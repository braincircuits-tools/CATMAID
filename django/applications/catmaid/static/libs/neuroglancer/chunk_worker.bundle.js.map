{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/gl-matrix/esm/common.js","webpack:///./node_modules/gl-matrix/esm/mat4.js","webpack:///./node_modules/gl-matrix/esm/vec3.js","webpack:///./node_modules/gl-matrix/esm/vec4.js","webpack:///./node_modules/gl-matrix/esm/quat.js","webpack:///./node_modules/gl-matrix/esm/mat3.js","webpack:///./src/neuroglancer/util/geom.ts","webpack:///./src/neuroglancer/worker_rpc.ts","webpack:///./src/neuroglancer/chunk_manager/base.ts","webpack:///./src/neuroglancer/util/json.ts","webpack:///./src/neuroglancer/util/uint64.ts","webpack:///./src/neuroglancer/util/linked_list.0.ts","webpack:///./src/neuroglancer/util/linked_list.1.ts","webpack:///./src/neuroglancer/util/pairing_heap.0.ts","webpack:///./src/neuroglancer/util/pairing_heap.1.ts","webpack:///./src/neuroglancer/chunk_manager/backend.ts","webpack:///./src/neuroglancer/util/http_request.ts","webpack:///./src/neuroglancer/util/endian.ts","webpack:///./src/neuroglancer/util/data_type.ts","webpack:///./src/neuroglancer/sliceview/chunk_layout.ts","webpack:///./src/neuroglancer/sliceview/base.ts","webpack:///./src/neuroglancer/util/compare.ts","webpack:///./src/neuroglancer/util/array.ts","webpack:///./src/neuroglancer/mesh/multiscale.ts","webpack:///./src/neuroglancer/mesh/triangle_strips.ts","webpack:///./src/neuroglancer/mesh/backend.ts","webpack:///./src/neuroglancer/util/cancellation.ts","webpack:///./src/neuroglancer/shared_watchable_value.ts","webpack:///./src/neuroglancer/visibility_priority/backend.ts","webpack:///./src/neuroglancer/util/signal.ts","webpack:///./src/neuroglancer/sliceview/volume/base.ts","webpack:///./src/neuroglancer/async_computation/request.ts","webpack:///./src/neuroglancer/sliceview/volume/backend.ts","webpack:///./src/neuroglancer/util/disposable.ts","webpack:///./src/neuroglancer/datasource/computed/base.ts","webpack:///./src/neuroglancer/annotation/index.ts","webpack:///./src/neuroglancer/trackable_value.ts","webpack:///./src/neuroglancer/segmentation_display_state/base.ts","webpack:///./src/neuroglancer/async_computation/index.ts","webpack:///./src/neuroglancer/sliceview/backend_chunk_decoders/raw.ts","webpack:///./src/neuroglancer/util/zorder.ts","webpack:///./src/neuroglancer/async_computation/decode_jpeg_request.ts","webpack:///./src/neuroglancer/sliceview/backend_chunk_decoders/jpeg.ts","webpack:///./src/neuroglancer/coordinate_transform.ts","webpack:///./src/neuroglancer/sliceview/backend.ts","webpack:///./src/neuroglancer/mesh/base.ts","webpack:///./src/neuroglancer/async_computation/decode_gzip_request.ts","webpack:///./src/neuroglancer/skeleton/backend.ts","webpack:///./src/neuroglancer/skeleton/base.ts","webpack:///./node_modules/pako/lib/utils/common.js","webpack:///./src/neuroglancer/util/object_id.ts","webpack:///./src/neuroglancer/chunk_manager/generic_file_source.ts","webpack:///./node_modules/nifti-reader-js/src/nifti.js","webpack:///./src/neuroglancer/sliceview/backend_chunk_decoders/compressed_segmentation.ts","webpack:///./src/neuroglancer/sliceview/compressed_segmentation/decode_common.ts","webpack:///./src/neuroglancer/sliceview/compressed_segmentation/decode_uint32.ts","webpack:///./src/neuroglancer/sliceview/compressed_segmentation/decode_uint64.ts","webpack:///./src/neuroglancer/datasource/computed/backend.ts","webpack:///./src/neuroglancer/async_computation/encode_compressed_segmentation_request.ts","webpack:///./src/neuroglancer/sliceview/backend_chunk_decoders/postprocess.ts","webpack:///./src/neuroglancer/gpu_hash/hash_function.ts","webpack:///./src/neuroglancer/util/disjoint_sets.ts","webpack:///./src/neuroglancer/shared_disjoint_sets.ts","webpack:///./src/neuroglancer/gpu_hash/hash_table.ts","webpack:///./src/neuroglancer/uint64_set.ts","webpack:///./src/neuroglancer/segmentation_display_state/backend.ts","webpack:///./src/neuroglancer/util/memoize.ts","webpack:///./src/neuroglancer/util/random.ts","webpack:///./src/neuroglancer/credentials_provider/http_request.ts","webpack:///./src/neuroglancer/credentials_provider/index.ts","webpack:///./src/neuroglancer/credentials_provider/shared_counterpart.ts","webpack:///./src/neuroglancer/credentials_provider/shared_common.ts","webpack:///./src/neuroglancer/annotation/base.ts","webpack:///./src/neuroglancer/annotation/backend.ts","webpack:///./src/neuroglancer/single_mesh/base.ts","webpack:///./src/neuroglancer/single_mesh/backend.ts","webpack:///./node_modules/nifti-reader-js/src/utilities.js","webpack:///./node_modules/pako/lib/zlib/messages.js","webpack:///./src/neuroglancer/perspective_view/backend.ts","webpack:///./src/neuroglancer/perspective_view/base.ts","webpack:///./node_modules/lodash/isObject.js","webpack:///./node_modules/lodash/_root.js","webpack:///./node_modules/lodash/_Symbol.js","webpack:///./node_modules/nifti-reader-js/src/nifti1.js","webpack:///./node_modules/pako/lib/zlib/adler32.js","webpack:///./node_modules/pako/lib/zlib/crc32.js","webpack:///./node_modules/pako/lib/utils/strings.js","webpack:///./node_modules/pako/lib/zlib/zstream.js","webpack:///./node_modules/pako/lib/zlib/constants.js","webpack:///./node_modules/lodash/debounce.js","webpack:///./src/neuroglancer/worker_rpc_context.ts","webpack:///./node_modules/lodash/now.js","webpack:///./node_modules/lodash/_freeGlobal.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/lodash/toNumber.js","webpack:///./node_modules/lodash/isSymbol.js","webpack:///./node_modules/lodash/_baseGetTag.js","webpack:///./node_modules/lodash/_getRawTag.js","webpack:///./node_modules/lodash/_objectToString.js","webpack:///./node_modules/lodash/isObjectLike.js","webpack:///./node_modules/nifti-reader-js/src/nifti2.js","webpack:///./node_modules/pako/index.js","webpack:///./node_modules/pako/lib/deflate.js","webpack:///./node_modules/pako/lib/zlib/deflate.js","webpack:///./node_modules/pako/lib/zlib/trees.js","webpack:///./node_modules/pako/lib/inflate.js","webpack:///./node_modules/pako/lib/zlib/inflate.js","webpack:///./node_modules/pako/lib/zlib/inffast.js","webpack:///./node_modules/pako/lib/zlib/inftrees.js","webpack:///./node_modules/pako/lib/zlib/gzheader.js","webpack:///./src/neuroglancer/datasource/boss/base.ts","webpack:///./src/neuroglancer/util/npy.ts","webpack:///./src/neuroglancer/datasource/boss/backend.ts","webpack:///./src/neuroglancer/sliceview/backend_chunk_decoders/bossNpz.ts","webpack:///./src/neuroglancer/datasource/boss/api.ts","webpack:///./src/neuroglancer/datasource/render/base.ts","webpack:///./src/neuroglancer/sliceview/vector_graphics/base.ts","webpack:///./src/neuroglancer/sliceview/vector_graphics/backend.ts","webpack:///./src/neuroglancer/util/float32array_builder.ts","webpack:///./src/neuroglancer/datasource/render/backend.ts","webpack:///./src/neuroglancer/datasource/precomputed/base.ts","webpack:///./src/neuroglancer/util/byte_range_http_requests.ts","webpack:///./src/neuroglancer/util/hash.ts","webpack:///./src/neuroglancer/datasource/precomputed/backend.ts","webpack:///./src/neuroglancer/skeleton/decode_precomputed_skeleton.ts","webpack:///./src/neuroglancer/datasource/brainmaps/api.ts","webpack:///./src/neuroglancer/datasource/brainmaps/base.ts","webpack:///./src/neuroglancer/datasource/brainmaps/backend.ts","webpack:///./src/neuroglancer/datasource/dvid/base.ts","webpack:///./src/neuroglancer/skeleton/decode_swc_skeleton.ts","webpack:///./src/neuroglancer/datasource/dvid/backend.ts","webpack:///./src/neuroglancer/datasource/nifti/base.ts","webpack:///./src/neuroglancer/datasource/nifti/backend.ts","webpack:///./src/neuroglancer/datasource/n5/base.ts","webpack:///./src/neuroglancer/datasource/n5/backend.ts","webpack:///./src/neuroglancer/datasource/computed/example/backend.ts","webpack:///./src/neuroglancer/datasource/computed/example/base.ts","webpack:///./src/neuroglancer/datasource/computed/tensorflow/backend.ts","webpack:///./src/neuroglancer/datasource/computed/tensorflow/base.ts","webpack:///./src/neuroglancer/async_computation/vtk_mesh_request.ts","webpack:///./src/neuroglancer/datasource/vtk/backend.ts","webpack:///./src/neuroglancer/async_computation/csv_vertex_attributes_request.ts","webpack:///./src/neuroglancer/datasource/csv/backend.ts"],"names":["self","chunkIds","moreModules","moduleId","modules","length","installedChunks","pop","installedModules","0","__webpack_require__","exports","module","i","l","call","e","chunkId","promises","push","Promise","resolve","then","importScripts","1","all","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","PI","out","clone","a","copy","fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","set","identity","transpose","a01","a02","a03","a12","a13","a23","invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","adjoint","determinant","multiply","b","b0","b1","b2","b3","translate","v","x","y","z","mat4_scale","rotate","rad","axis","b12","b20","b21","b22","len","sqrt","sin","cos","rotateX","rotateY","rotateZ","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","fromQuat","yx","zx","zy","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","targetTo","target","str","frob","pow","add","subtract","multiplyScalar","multiplyScalarAndAdd","scale","exactEquals","mat4_equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","max","mul","sub","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","divide","ceil","floor","min","round","vec3_scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","vec3_dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3_rotateX","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","zero","vec3_str","vec3_exactEquals","vec3_equals","vec","vec3_sub","vec3_mul","div","dist","sqrDist","vec3_len","sqrLen","forEach","stride","offset","count","fn","arg","vec4_length","vec4_squaredLength","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_random","u1","u2","u3","sqrt1MinusU1","sqrtU1","quat_invert","dot","invDot","conjugate","fromMat3","fRoot","fTrace","j","k","fromEuler","halfToRad","cx","cy","cz","quat_str","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","sqlerp","setAxes","view","__webpack_exports__","identityMat4","kAxes","kZeroVec","kOneVec","kInfinityVec","prod3","vec3Key","rectifyTransformMatrixIfAxisAligned","transformVectorByMat4","effectiveScalingFactorFromMat4","getFrustrumPlanes","isAABBVisible","mat4_namespaceObject","quat_namespaceObject","vec3_namespaceObject","RECTIFY_EPSILON","rectifyVec3IfAxisAligned","m0","m1","m2","m4","m5","m6","m8","m9","nearA","nearB","nearC","nearD","nearNorm","xLower","yLower","zLower","xUpper","yUpper","zUpper","clippingPlanes","registerRPC","registerPromiseRPC","RPC","SharedObject","initializeSharedObjectCounterpart","SharedObjectCounterpart","registerSharedObjectOwner","registerSharedObject","neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_0__","neuroglancer_util_disposable__WEBPACK_IMPORTED_MODULE_1__","IS_WORKER","Window","DEBUG","DEBUG_MESSAGES","PROMISE_RESPONSE_ID","PROMISE_CANCEL_ID","handlers","Map","handler","RPCError","Error","[object Object]","message","super","this","id","cancellationToken","promise","transfers","delete","invoke","error","errorName","request","undefined","cancel","reject","INITIAL_RPC_ID","objects","nextId","onmessage","data","console","log","functionName","numObjects","size","rpcId","obj","referencedGeneration","addRef","postMessage","token","newId","rpc","isOwner","options","initializeSharedObject","unreferencedGeneration","RPC_TYPE_ID","dispose","gen","ownerDispose","refCountReachedZero","generation","refCount","disposed","counterpartRefCountReachedZero","sharedObjectConstructors","identifier","constructorFunction","typeName","ChunkState","ChunkPriorityTier","ChunkDownloadStatistics","ChunkMemoryStatistics","numChunkMemoryStatistics","numChunkStatistics","getChunkStateStatisticIndex","getChunkDownloadStatisticIndex","PREFETCH_PRIORITY_MULTIPLIER","CHUNK_QUEUE_MANAGER_RPC_ID","CHUNK_MANAGER_RPC_ID","CHUNK_SOURCE_INVALIDATE_RPC_ID","REQUEST_CHUNK_STATISTICS_RPC_ID","numChunkStates","numChunkPriorityTiers","state","priorityTier","statistic","parseFiniteVec","stableStringify","pythonLiteralParse","parseArray","parseFixedLengthArray","verifyObject","verifyString","verifyOptionalString","verifyObjectProperty","verifyEnumString","verify3dVec","verify3dScale","verifyStringArray","neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__","verifyFloat","parseFloat","Number","isNaN","JSON","stringify","verifyFiniteFloat","isFinite","verifyFinitePositiveFloat","isArray","keys","sort","SINGLE_QUOTE_STRING_PATTERN","DOUBLE_QUOTE_STRING_PATTERN","SINGLE_OR_DOUBLE_QUOTE_STRING_PATTERN","RegExp","source","DOUBLE_QUOTE_PATTERN","convertStringLiteral","quoteInitial","quoteReplace","quoteSearch","charAt","inner","substr","match","index","normalizeStringLiteral","parse","before","replacement","singleQuoteString","replace","pythonLiteralToJSON","parseElement","map","propertyName","validator","parseError","enumType","toUpperCase","Uint64","randomTempBuffer","Uint32Array","trueBase","stringConversionData","base","lowDigits","log2","lowBase","patternString","String","fromCharCode","charCodeAt","pattern","uint32MultiplyHigh","a16","b16","c16","c32","c48","low","high","vLow","vHigh","toString","vHighExtra","vLowStr","repeat","less","crypto","getRandomValues","test","parseInt","splitPoint","lowPrime","highPrime","highRemainder","imul","tryParseString","parseString","input","bits","lowSum","highSum","ZERO","ONE","linked_list_0","head","next","next0","prev0","prev","linked_list_1","next1","prev1","Implementation","compare","temp","aChild","child0","node","cur","curNext","meld","root","newRoot","combineChildren","removeMin","child","entries","pairing_heap_1_Implementation","child1","backend_Chunk","backend_ChunkSourceBase","backend_ChunkSource","backend_ChunkQueueManager","backend_ChunkManager","WithParameters","withChunkManager","state_","NEW","priority","newPriority","RECENT","newPriorityTier","backendOnly","isComputational","newlyRequestedToFrontend","requestedToFrontend","downloadCancellationToken","NEGATIVE_INFINITY","chunkManager","queueManager","updateChunkState","FAILED","SYSTEM_MEMORY_WORKER","msg","_transfers","newState","oldState","chunkStateChanged","systemMemoryBytes","bytes","updateChunkStatistics","adjustCapacitiesForChunk","systemMemoryBytes_","scheduleUpdate","gpuMemoryBytes","gpuMemoryBytes_","listener","registerChunkListener","unregisterChunkListener","worker_rpc","listeners_","chunks","freeChunks","statistics","Float64Array","sourceQueueLevel","sources","chunkType","freeChunksLength","chunk","has","keyListeners","idx","indexOf","splice","stateChanged","sign","numChunks","startChunkDownload","cancellation","startTime","Date","now","download","endTime","totalTime","totalChunks","downloadSucceeded","downloadFailed","cancelChunkDownload","backend_ChunkPriorityQueue","heapOperations","linkedListOperations","heapRoots","recentHead","initializeHead","insertAfter","priorityLess","back","tier","LAST_ORDERED_TIER","FIRST_ORDERED_TIER","front","remove","makeChunkPriorityQueue1","tryToFreeCapacity","capacity","evictionCandidates","evict","availableItems","availableSize","evictionCandidate","evictionTier","backend_AvailableCapacity","disposable","itemLimit","sizeLimit","currentSize","currentItems","capacityChanged","signal","registerDisposer","changed","dispatch","items","Set","queuedDownloadPromotionQueue","priorityGreater","queuedComputePromotionQueue","downloadEvictionQueue","computeEvictionQueue","systemMemoryEvictionQueue","gpuMemoryPromotionQueue","gpuMemoryEvictionQueue","updatePending","numQueued","numFailed","getCapacity","result","gpuMemoryCapacity","systemMemoryCapacity","downloadCapacity","computeCapacity","setTimeout","process","QUEUED","DOWNLOADING","SYSTEM_MEMORY","GPU_MEMORY","factor","adjust","queue","chunkQueuesForChunk","removeChunk","removeChunkFromQueues_","updatePriorityProperties","addChunkToQueues_","evictFromGPUMemory","freeChunkGPUMemory","promotionCandidates","candidates","promotionCandidate","copyChunkToGPU","freeSystemMemory","EXPIRED","promiseInvoke","serialize","freeChunkSystemMemory","promotionLambda","systemMemoryEvictionCandidates","promotionCandidateResult","done","processGPUPromotions_","processQueuePromotions_","logStatistics","values","__decorate","existingTierChunks","newTierChunks","recomputeChunkPriorities","recomputeChunkPrioritiesLate","memoize","FIRST_TIER","LAST_TIER","recomputeChunkPriorities_","updateQueueState","VISIBLE","toFrontend","tiers","performChunkPriorityUpdate","Base","parametersConstructor","C","args","parameters","RPC_ID","invalidateSourceCache","results","HttpError","responseArrayBuffer","responseJson","cancellableFetchOk","getByteRangeHeader","neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_1__","url","status","statusText","response","async","fetchOk","init","fetch","TypeError","ok","fromResponse","arrayBuffer","json","transformResponse","abortController","AbortController","unregisterCancellation","abort","tempUint64","startOffset","endOffset","endOffsetStr","decrement","Range","Endianness","ENDIANNESS","convertEndian16","convertEndian32","Uint16Array","of","Uint8Array","buffer","BIG","LITTLE","determineEndianness","swapEndian16","array","byteOffset","byteLength","swapEndian32","DataType","DATA_TYPE_BYTES","UINT8","UINT16","UINT32","UINT64","FLOAT32","chunk_layout_ChunkLayout","transform","geom","invTransform","cache","from","localSpatial","globalSpatial","globalToLocalSpatial","localVector","globalVector","base_SliceViewBase","getNearIsotropicBlockSize","getCombinedTransform","getChunkDataSizes","base_SliceViewChunkSpecification","SLICEVIEW_RPC_ID","SLICEVIEW_RENDERLAYER_RPC_ID","SLICEVIEW_ADD_VISIBLE_LAYER_RPC_ID","SLICEVIEW_REMOVE_VISIBLE_LAYER_RPC_ID","SLICEVIEW_UPDATE_VIEW_RPC_ID","SLICEVIEW_RENDERLAYER_UPDATE_TRANSFORM_RPC_ID","data_type","DEBUG_CHUNK_INTERSECTIONS","DEBUG_VISIBLE_SOURCES","tempVec3","estimateSliceAreaPerChunk","zAxis","chunkLayout","chunkSize","zAxisRotated","globalToLocalSpatialVector","minProjection","maxProjection","chunkVolume","chunkSizeValue","projection","BoundsComparisonResult","compareBounds","needleLowerBound","needleUpperBound","haystackLowerBound","haystackUpperBound","curResult","FULLY_INSIDE","newResult","needleLower","needleUpper","haystackLower","haystackUpper","FULLY_OUTSIDE","PARTIALLY_INSIDE","getTransformedSources","renderLayer","transformedSources","transformedSourcesGeneration","equals","alternatives","spec","voxelSize","transformedChunkLayout","localSpatialVectorToGlobal","pickBestAlternativeSource","numAlternatives","bestAlternativeIndex","bestSliceArea","alternativeIndex","alternative","sliceArea","tempCorners","width","height","hasViewportToData","hasValidViewport","viewportToData","viewportAxes","previousViewportAxes","centerDataPosition","viewportPlaneDistanceToOrigin","visibleChunkLayouts","visibleLayers","visibleSourcesStale","pixelSize","onHasValidViewport","onViewportChanged","maybeSetHasValidViewport","newPixelSize","onViewportToDataMatrixChanged","clear","visibleSources","scaleIndex","numSources","smallestVoxelSize","renderScaleTarget","canImproveOnVoxelSize","targetSize","improvesOnPrevVoxelSize","prevVoxelSize","prevSize","addVisibleSource","transformedSource","sourceScaleIndex","existingSources","reverse","getLayoutObject","addChunk","updateVisibleSources","globalCorners","lowerChunkBound","upperChunkBound","sourcesLowerChunkBound","sourcesUpperChunkBound","positiveVertex","planeNormal","partiallyVisibleSources","fullyVisibleSources","layoutObject","sourcesLowerBound","sourcesUpperBound","POSITIVE_INFINITY","computeSourcesChunkBounds","planeDistanceToOrigin","globalToLocalGrid","localCorner","partiallyVisibleSourcesLength","checkBounds","nextSplitDim","slice","dimLower","dimUpper","diff","volume","positiveVertexDistanceToOrigin","negativeVertexDistanceToOrigin","normalValue","lowerValue","positiveOffset","intersectsPlane","newNextSplitDim","fullyVisibleSourcesLength","oldPartiallyVisibleSourcesLength","adjustSources","start","end","predicate","partitionArray","DEFAULT_MAX_VOXELS_PER_CHUNK_LOG2","lowerVoxelBound","upperVoxelBound","maxVoxelsPerChunkLog2","maxBlockSize","maxChunkDataSize","chunkDataSize","findNextDimension","minSize","minDimension","nextDim","getTwoDimensionalBlockSize","flatDimension","ChunkLayoutPreference","additionalTransform","chunkDataSizes","chunkLayoutPreference","ISOTROPIC","FLAT","getTwoDimensionalBlockSizes","getDesiredMultiscaleMeshChunks","manifest","modelViewProjection","detailCutoff","viewportWidth","viewportHeight","callback","octree","lodScales","chunkGridSpatialOrigin","chunkShape","maxLod","minWXcoeff","minWYcoeff","minWZcoeff","getPointW","minWClip","objectXLower","clipLowerBound","objectYLower","objectZLower","objectXUpper","clipUpperBound","objectYUpper","objectZUpper","scaleFactor","handleChunk","lod","row","priorLodScale","rowOffset","gridX","gridY","gridZ","childBegin","childEndAndEmpty","getBoxW","lodScale","nextPriorLodScale","childEnd","childRow","DEBUG_TIMING","collisions","hashTableInsert","table","numBuckets","emptyValue","hashCode","mask","bucket","probe","nextEdgeTable","getNextEdge","edgeIndexAndFlipped","getBaseIndex","entry","getEdgeIndex","vertexAIndex","edgeIndex","vertexBIndex","vertexCIndex","computeTriangleAdjacencies","triangleAdjacencies","indices","edgeMap","numTriangles","edgeMapSize","fill","triangle","baseIndex","vertexA0","vertexB0","newEntry","existingEntry","hash_function","otherBaseIndex","otherEdgeIndex","vertexA1","vertexB1","emitTriangleStrips","output","outputIndex","invalidVertex","BYTES_PER_ELEMENT","startNewStrip","computeTriangleStrips","subChunkOffsets","adjacenciesElapsed","emitElapsed","midTime","maxVertexIndex","maxVertex","normalizeTriangleVertexOrder","outputBufferSize","maxSubChunkIndices","numSubChunks","subChunk","numIndices","numEdges","getEdgeMapSize","subChunkOffset","subChunkEnd","subIndices","subarray","shrunkOutput","constructor","decodeJsonManifestChunk","computeVertexNormals","decodeVertexPositionsAndIndices","decodeTriangleVertexPositionsAndIndices","backend_MeshSource","backend_MultiscaleMeshSource","assignMeshFragmentData","assignMultiscaleMeshFragmentData","generateHigherOctreeLevel","computeOctreeChildOffsets","CONVERT_TO_TRIANGLE_STRIPS","backend_ManifestChunk","backend","objectId","uint64","initialize","assign","fragmentIds","scheduleUpdateChunkPriorities","serializeMeshData","vertexPositions","vertexNormals","strips","vertexPositionsBuffer","indicesBuffer","getMeshDataSize","backend_FragmentChunk","manifestChunk","fragmentId","meshData","keysPropertyName","positions","faceNormal","v1v0","v2v1","i0","i1","i2","numVertices","snorm8","signNotZero","verticesPerPrimitive","endianness","vertexByteOffset","indexByteOffset","numPrimitives","endian","fragmentSource","getRef","meshSource","segmentation_display_state_base","getNewChunk_","initializeManifestChunk","initializeFragmentChunk","backend_FragmentSource","downloadFragment","mesh_base","backend_MeshLayer","segmentation_display_state_backend","viewStates","trackable_value","viewStatesDisposers","updateChunkPriorities","viewState","disposer","viewport","visibility","visibility_priority_backend","basePriority","getChunk","requestChunk","fragmentChunk","getFragmentChunk","backend_MultiscaleManifestChunk","backend_MultiscaleFragmentChunk","chunkIndex","format","backend_MultiscaleFragmentSource","backend_MultiscaleMeshLayer","maxVisibility","manifestChunks","viewProjectionMat","objectToDataTransform","_renderScale","empty","convertMeshData","vertexPositionFormat","normals","encodedNormals","encodedIndices","encodedVertexPositions","outIndex","invL1Norm","encodeNormals32fx3ToOctahedron8x2","uint10","inputIndex","uint16","float32","priorStart","priorEnd","curEnd","childStart","parentEnd","childNode","parentNode","parentX","parentY","parentZ","childX","childY","childZ","zorder","CANCELED","uncancelableToken","CancellationTokenSource","MultipleConsumerCancellationTokenSource","makeCancelablePromise","noopFunction","isCanceled","consumers","executor","scopedToken","unregister","shared_watchable_value_SharedWatchableValue","SharedWatchableValue_1","updatingValue_","setupChangedHandler","initializeCounterpart","makeFromExisting","withSharedVisibility","getPriorityTier","PREFETCH","getBasePriority","Signal","NullarySignal","apply","arguments","VolumeType","VolumeChunkSpecification","neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_0__","neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_1__","neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__","baseVoxelOffset","lowerClipBound","upperClipBound","dataType","numChannels","chunkBytes","compressedSegmentationBlockSize","volumeSourceOptions","toObject","volumeType","SEGMENTATION","maxCompressedSegmentationBlockSize","adjustedOptions","withDefaultCompression","requestAsyncComputation","freeWorkers","pendingTasks","tasks","maxWorkers","navigator","hardwareConcurrency","nextTaskId","getNewWorker","worker","Worker","task","transfer","returnWorker","callbacks","cleanup","VolumeChunk","VolumeChunkSource","neuroglancer_sliceview_backend__WEBPACK_IMPORTED_MODULE_0__","neuroglancer_sliceview_volume_base__WEBPACK_IMPORTED_MODULE_1__","tempChunkDataSize","tempChunkPosition","chunkGridPosition","initializeVolumeChunk","fromObject","origChunkDataSize","newChunkDataSize","chunkPosition","partial","upper","chunkConstructor","RefCounted","RefCountedValue","disposers","invokeDisposers","wasDisposed","type","addEventListener","removeEventListener","registerEventListener","cancellable","ComputedVolumeChunkSourceParameters","ComputationParameters","getArrayView","neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_0__","AnnotationType","AnnotationSerializer","deserializeAnnotation","neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_2__","neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_5__","annotationTypes","POINT","LINE","AXIS_ALIGNED_BOUNDING_BOX","ELLIPSOID","typeHandlers","getAnnotationTypeHandler","icon","description","toJSON","annotation","pointA","pointB","restoreState","serializedBytes","serializer","numAnnotations","coordinates","coordinateOffset","point","radii","compare3WayById","annotations","allAnnotations","totalBytes","typeToOffset","typeToSegmentListIndexOffset","totalNumSegments","totalNumAnnotations","annotationType","numSegments","segments","segmentListIndex","segmentList","typeToIds","ArrayBuffer","segmentListOffset","segmentListIndexOffset","segment","serializeAnnotations","WatchableValue","WatchableSet","registerNested","lodash_debounce__WEBPACK_IMPORTED_MODULE_0__","lodash_debounce__WEBPACK_IMPORTED_MODULE_0___default","neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_2__","value_","newValue","iterator","baseState","context","updateValue","handleChange","signalDisposer","getObjectKey","forEachVisibleSegment","visibleSegments","segmentEquivalences","rootObjectId","disjointSets","isMinElement","setElements","asyncComputation","decodeRawChunk","neuroglancer_sliceview_backend_chunk_decoders_postprocess__WEBPACK_IMPORTED_MODULE_0__","neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_2__","neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__","numElements","bytesPerElement","expectedBytes","getOctreeChildIndex","decodeZIndexCompressed","zindex","xBits","yBits","zBits","maxCoordBits","inputBit","inputValue","coordBit","encodeZIndexCompressed","maxBits","outputBit","outputNum","isHigh","writeBit","bit","lessMsb","zorder3LessThan","mostSignificant0","mostSignificant1","decodeJpeg","async_computation","decodeJpegChunk","decoded","postprocess","coordinate_transform_CoordinateTransform","ignoredError","reset","rotation","backend_SliceView","backend_SliceViewChunk","backend_SliceViewChunkSource","backend_RenderLayer","SCALE_PRIORITY_MULTIPLIER","tempCenter","SliceViewIntermediateBase","handleLayerChanged","invalidateVisibleSources","updateVisibleChunks","globalCenter","localCenter","computeVisibleChunks","positionInChunks","priorityIndex","layer","layerChanged","removeVisibleLayer","setViewportSize","setViewportToDataMatrix","addVisibleLayer","alternativeIds","sourceId","oldValue","MESH_LAYER_RPC_ID","MULTISCALE_MESH_LAYER_RPC_ID","FRAGMENT_SOURCE_RPC_ID","MULTISCALE_FRAGMENT_SOURCE_RPC_ID","VertexPositionFormat","decodeGzip","neuroglancer_async_computation__WEBPACK_IMPORTED_MODULE_0__","backend_SkeletonSource","decodeSkeletonVertexPositionsAndIndices","backend_SkeletonChunk","vertexAttributes","total","vertexData","getVertexAttributeBytes","vertexAttributeOffsets","initializeSkeletonChunk","backend_SkeletonLayer","mesh_backend","TYPED_OK","Int32Array","_has","shift","shrinkBuf","buf","fnTyped","arraySet","dest","src","src_offs","dest_offs","flattenChunks","pos","fnUntyped","concat","setTyped","on","Buf8","Buf16","Buf32","OBJECT_ID_SYMBOL","nextObjectId","generic_file_source_GenericSharedDataSource","generic_file_source_GenericSharedDataChunk","requesters","requester","encodeKey","downloadFunction","encodeKeyFunction","getPriority","decodedKey","encodedKey","memoizeKey","getData","decodeFunction","getObjectId","http_request","nifti","NIFTI1","NIFTI2","Utils","pako","isNIFTI1","mag1","mag2","mag3","STANDARD_HEADER_SIZE","DataView","getUint8","MAGIC_NUMBER_LOCATION","MAGIC_NUMBER","isNIFTI2","isNIFTI","isCompressed","magicCookie1","magicCookie2","GUNZIP_MAGIC_COOKIE1","GUNZIP_MAGIC_COOKIE2","decompress","inflate","readHeader","header","hasExtension","extensionFlag","readImage","imageOffset","vox_offset","timeDim","statDim","dims","imageSize","numBitsPerVoxel","readExtension","loc","getExtensionLocation","extensionSize","readExtensionData","decodeCompressedSegmentationChunk","decodeValueOffset","baseOffset","blockSize","dataPosition","uint32sPerElement","gridOffset","subchunkOffset","gridStride","subchunkStride","posValue","subchunkSizeValue","subchunkSubscript","subchunkHeaderOffset","subchunkHeader0","subchunkHeader1","outputValueOffset","encodingBits","decodeChannel","expectedLength","vx","vy","vz","outputOffset","decode_uint64_decodeChannel","backend_VolumeComputationBackend","copyBufferOverlap","backend_ComputedVolumeChunk","backend_ComputedVolumeChunkSource","params","outputSpec","subBoxIndex","cropSize","sourceCorner","sourceSize","sourceView","destCorner","destSize","destView","copyFunction","commonLower","sourceUpper","destUpper","commonUpper","commonSize","sourceLower","destLower","gridPositionKey","gridPosition","toLocaleString","volume_backend","computing_","initialized_","originGridPositions_","computationParams","computationParams_","cancellationToken_","inputBuffer_","fail_","inputSpec","twos","outBoxLower","outputCenter","inputCenter","inputSize","inputLower_","setupSourceChunks_","resolve_","reject_","computation","bufferLength","originDataType","volumeChunk","copyOriginChunk_","gridKey","originSource","chunkCorner","requestChunkData","originGridPosition","originChunk","unregisterListener","destination","computed_base","rawSource","maybeDecodeBuffer_","checkDone_","catch","cleanup_","cancelChunkDataRequest","unregisterChunk","reason","compressedBlockSize","size4","channelOutputLength","channel","decodeChannels","decode_uint64_decodeChannels","outputSize","outputDataType","compute","outputBuffer","raw","outputBufferView","chunkBuffer","chunkBufferView","outputCorner","performComputation_","originChunkSize","inputLower","gridLower","inputSizeMinusOne","inBoxUpper","gridUpper","registerListener","pendingComputations_","frontendRequestPromises_","sourceRef","computationRef","outputChunk","getOverlappingOriginGridPositions","sourceChunk","computedChunk","dataChunk","originGridKey","computedChunkKey","retrieveChunkData","promiseMap","promisePair","requestKey","computeChunkBounds","initializeComputation","encodeCompressedSegmentationUint32","encodeCompressedSegmentationUint64","postProcessRawData","shape","hashCombine","k1","k2","rankSymbol","parentSymbol","nextSymbol","prevSymbol","findRepresentative","old","ancestor","setElementIterator","minSymbol","disjoint_sets_DisjointUint64Sets","element","equal","makeSet","newNode","iRank","jRank","linkUnequalSetRepresentatives","iPrev","jPrev","spliceCircularLists","aMin","bMin","mappings","sets","members","member","shared_disjoint_sets_SharedDisjointUint64Sets","link","al","ah","bl","bh","ids","NUM_ALTERNATIVES","DEFAULT_LOAD_FACTOR","pendingLow","pendingHigh","backupPendingLow","backupPendingHigh","hash_table_HashTableBase","hashSeeds","generateHashSeeds","loadFactor","emptyLow","emptyHigh","maxRehashAttempts","maxAttempts","mungedEmptyKey","initialSize","allocate","numHashes","emptySlots","getHash","chooseMungedEmptyKey","h","hashIndex","hash","entryStride","tableSize","indexOfPair","newLow","newHigh","hasPair","clearTable","tempLow","tempHigh","storePending","attempt","tableIndex","swapPending","oldTable","updateHashFunctions","tryToInsert","desiredTableSize","rehashAttempt","rehash","chooseAnotherEmptyKey","backupPending","grow","restorePending","HashSetUint64","insertInternal","pendingValueLow","pendingValueHigh","backupPendingValueLow","backupPendingValueHigh","uint64_set_Uint64Set","Uint64Set_1","hashTable","add_","delete_","uint64_set_decorate","SegmentationLayerSharedObjectCounterpart","StringMemoize","neuroglancer_util_disposable__WEBPACK_IMPORTED_MODULE_0__","neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_1__","Memoize","getRandomHexString","numBits","numValues","byteArray","fetchWithCredentials","neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_1__","credentialsProvider","applyCredentials","errorHandler","credentials","credentialsLoop","requestLoop","makeCachedCredentialsGetter","getUncached","cachedCredentials","pendingCredentials","pendingCancellationToken","invalidCredentials","addConsumer","WithSharedCredentialsProviderCounterpart","shared_counterpart_SharedCredentialsProviderCounterpart","providerId","base_AnnotationGeometryChunkSpecification","backend_AnnotationMetadataChunk","AnnotationGeometryData","backend_AnnotationGeometryChunk","backend_AnnotationSubsetGeometryChunk","backend_AnnotationSource","ANNOTATION_METADATA_CHUNK_PRIORITY","numBytes","GeometryChunkMixin","sliceview_backend","backend_AnnotationMetadataChunkSource","parent","downloadMetadata","backend_AnnotationGeometryChunkSource","downloadGeometry","backend_AnnotationSubsetGeometryChunkSource","downloadSegmentFilteredGeometry","references","metadataChunkSource","segmentFilteredSource","chunk_manager_base","newAnnotation","annotationId","update","backend_AnnotationPerspectiveRenderLayer","perspective_view_backend","filterBySegmentation","geometrySource","backend_AnnotationLayerSharedObjectCounterpart","segmentationState","getSegmentationState","SingleMeshSourceParameters","SingleMeshSourceParametersWithInfo","registerSingleMeshFactory","registerSingleMeshVertexAttributesFactory","backend_SingleMeshChunk","transferSet","singleMeshFactories","singleMeshVertexAttributesFactories","factory","protocolPattern","getDataSource","factories","dataSource","getMesh","path","getMeshVertexAttributes","getCombinedMesh","meshSourceUrl","attributeSourceUrls","origMesh","combinedMesh","info","addAttribute","getMinMax","numComponents","addAttributes","numAttributes","attributeInfo","attributes","backend_SingleMeshSource","SingleMeshLayerBase","backend_SingleMeshLayer","mesh","crcTable","getStringAt","ctr","ch","getByteAt","getInt8","getShortAt","littleEndian","getInt16","getIntAt","getInt32","getFloatAt","getFloat32","getDoubleAt","getFloat64","getLongAt","toArrayBuffer","ab","isString","formatNumber","num","shortFormat","val","toPrecision","makeCRCTable","crc32","dataView","crc","2","-1","-2","-3","-4","-5","-6","backend_PerspectiveViewState","backend_PerspectiveViewRenderLayer","projectionMat","viewMat","freeGlobal","freeSelf","Function","dim_info","intent_p1","intent_p2","intent_p3","intent_code","datatypeCode","slice_start","slice_end","slice_code","pixDims","scl_slope","scl_inter","xyzt_units","cal_max","cal_min","slice_duration","toffset","aux_file","intent_name","qform_code","sform_code","quatern_b","quatern_c","quatern_d","qoffset_x","qoffset_y","qoffset_z","affine","magic","isHDR","extensionCode","TYPE_NONE","TYPE_BINARY","TYPE_UINT8","TYPE_INT16","TYPE_INT32","TYPE_FLOAT32","TYPE_COMPLEX64","TYPE_FLOAT64","TYPE_RGB24","TYPE_INT8","TYPE_UINT16","TYPE_UINT32","TYPE_INT64","TYPE_UINT64","TYPE_FLOAT128","TYPE_COMPLEX128","TYPE_COMPLEX256","XFORM_UNKNOWN","XFORM_SCANNER_ANAT","XFORM_ALIGNED_ANAT","XFORM_TALAIRACH","XFORM_MNI_152","SPATIAL_UNITS_MASK","TEMPORAL_UNITS_MASK","UNITS_UNKNOWN","UNITS_METER","UNITS_MM","UNITS_MICRON","UNITS_SEC","UNITS_MSEC","UNITS_USEC","UNITS_HZ","UNITS_PPM","UNITS_RADS","MAGIC_COOKIE","MAGIC_NUMBER2","EXTENSION_HEADER_SIZE","ctrOut","ctrIn","rawData","magicCookieVal","getExtensionSize","getExtensionCode","toFormattedString","fmt","string","getDatatypeCodeString","getUnitsCodeString","getTransformCodeString","code","getQformMat","convertNiftiQFormToNiftiSForm","qb","qc","qd","dx","dy","dz","qfac","xd","yd","zd","R","convertNiftiSFormToNEMA","xi","xj","xk","yi","yj","yk","zi","zj","zk","detQ","ibest","jbest","kbest","pbest","qbest","rbest","M","vbest","Q","P","iChar","jChar","kChar","iSense","jSense","kSense","nifti_mat33_determ","nifti_mat33_mul","A","B","r11","r12","r13","r21","r22","r23","r31","r32","r33","adler","s1","s2","makeTable","utils","STR_APPLY_OK","STR_APPLY_UIA_OK","__","_utf8len","buf2binstring","string2buf","c2","m_pos","str_len","buf_len","binstring2buf","buf2string","c_len","utf16buf","utf8border","next_in","avail_in","total_in","next_out","avail_out","total_out","Z_NO_FLUSH","Z_PARTIAL_FLUSH","Z_SYNC_FLUSH","Z_FULL_FLUSH","Z_FINISH","Z_BLOCK","Z_TREES","Z_OK","Z_STREAM_END","Z_NEED_DICT","Z_ERRNO","Z_STREAM_ERROR","Z_DATA_ERROR","Z_BUF_ERROR","Z_NO_COMPRESSION","Z_BEST_SPEED","Z_BEST_COMPRESSION","Z_DEFAULT_COMPRESSION","Z_FILTERED","Z_HUFFMAN_ONLY","Z_RLE","Z_FIXED","Z_DEFAULT_STRATEGY","Z_BINARY","Z_TEXT","Z_UNKNOWN","Z_DEFLATED","isObject","toNumber","FUNC_ERROR_TEXT","nativeMax","nativeMin","func","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","thisArg","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","timeWaiting","remainingWait","debounced","isInvoking","leadingEdge","clearTimeout","flush","global","g","window","isSymbol","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","other","valueOf","isBinary","baseGetTag","isObjectLike","symbolTag","getRawTag","objectToString","nullTag","undefinedTag","symToStringTag","objectProto","nativeObjectToString","isOwn","tag","unmasked","zlib_deflate","strings","ZStream","Deflate","level","method","windowBits","memLevel","strategy","to","opt","gzip","err","ended","strm","deflateInit2","deflateSetHeader","dictionary","dict","deflateSetDictionary","_dict_set","deflate","deflator","_mode","onEnd","onData","deflateEnd","join","deflateRaw","configuration_table","trees","adler32","MAX_MEM_LEVEL","MAX_WBITS","DEF_MEM_LEVEL","L_CODES","LITERALS","D_CODES","BL_CODES","HEAP_SIZE","MAX_BITS","MIN_MATCH","MAX_MATCH","MIN_LOOKAHEAD","PRESET_DICT","INIT_STATE","EXTRA_STATE","NAME_STATE","COMMENT_STATE","HCRC_STATE","BUSY_STATE","FINISH_STATE","BS_NEED_MORE","BS_BLOCK_DONE","BS_FINISH_STARTED","BS_FINISH_DONE","OS_CODE","errorCode","rank","flush_pending","pending","pending_buf","pending_out","flush_block_only","last","_tr_flush_block","block_start","strstart","put_byte","putShortMSB","longest_match","cur_match","chain_length","max_chain_length","scan","best_len","prev_length","nice_match","limit","w_size","_win","wmask","w_mask","strend","scan_end1","scan_end","good_match","lookahead","match_start","fill_window","more","_w_size","window_size","hash_size","wrap","insert","ins_h","hash_shift","hash_mask","deflate_fast","hash_head","bflush","match_length","_tr_tally","max_lazy_match","last_lit","deflate_slow","max_insert","prev_match","match_available","Config","good_length","max_lazy","nice_length","max_chain","DeflateState","pending_buf_size","gzhead","gzindex","last_flush","w_bits","hash_bits","dyn_ltree","dyn_dtree","bl_tree","l_desc","d_desc","bl_desc","bl_count","heap","heap_len","heap_max","depth","l_buf","lit_bufsize","d_buf","opt_len","static_len","matches","bi_buf","bi_valid","deflateResetKeep","_tr_init","deflateReset","ret","max_block_size","max_start","deflateInit","old_flush","beg","text","hcrc","extra","comment","os","bstate","deflate_huff","deflate_rle","_tr_align","_tr_stored_block","avail","tmpDict","dictLength","deflateInfo","STORED_BLOCK","STATIC_TREES","DYN_TREES","LENGTH_CODES","Buf_size","MAX_BL_BITS","END_BLOCK","REP_3_6","REPZ_3_10","REPZ_11_138","extra_lbits","extra_dbits","extra_blbits","bl_order","static_ltree","static_dtree","_dist_code","_length_code","base_length","static_l_desc","static_d_desc","static_bl_desc","base_dist","StaticTreeDesc","static_tree","extra_bits","extra_base","elems","max_length","has_stree","TreeDesc","dyn_tree","stat_desc","max_code","d_code","put_short","send_bits","send_code","tree","bi_reverse","res","gen_codes","next_code","init_block","bi_windup","smaller","_n2","_m2","pqdownheap","compress_block","ltree","dtree","lc","lx","build_tree","desc","stree","xbits","overflow","gen_bitlen","scan_tree","curlen","prevlen","nextlen","max_count","min_count","send_tree","static_init_done","stored_len","copy_block","tr_static_init","opt_lenb","static_lenb","max_blindex","black_mask","detect_data_type","build_bl_tree","lcodes","dcodes","blcodes","send_all_trees","bi_flush","zlib_inflate","GZheader","Inflate","inflateInit2","inflateGetHeader","inflateSetDictionary","inflator","next_out_utf8","tail","utf8str","allowBufError","inflateEnd","inflateRaw","ungzip","inflate_fast","inflate_table","CODES","LENS","DISTS","Z_MEM_ERROR","HEAD","FLAGS","TIME","OS","EXLEN","EXTRA","NAME","COMMENT","HCRC","DICTID","DICT","TYPE","TYPEDO","STORED","COPY_","COPY","TABLE","LENLENS","CODELENS","LEN_","LEN","LENEXT","DIST","DISTEXT","MATCH","LIT","CHECK","LENGTH","DONE","BAD","MEM","SYNC","ENOUGH_LENS","ENOUGH_DISTS","DEF_WBITS","zswap32","InflateState","havedict","flags","dmax","check","wbits","wsize","whave","wnext","hold","lencode","distcode","lenbits","distbits","ncode","nlen","ndist","have","lens","work","lendyn","distdyn","sane","was","inflateResetKeep","inflateReset","inflateReset2","lenfix","distfix","virgin","fixedtables","sym","updatewindow","inflateInit","put","_in","_out","from_source","here_bits","here_op","here_val","last_bits","last_op","last_val","opts","here","hbuf","order","inf_leave","xflags","extra_len","inflateInfo","s_window","lcode","dcode","lmask","dmask","op","dolen","dodist","lbase","lext","dbase","dext","lens_index","codes","table_index","incr","curr","drop","used","huff","base_index","MAXBITS","offs","extra_index","BossSourceParameters","VolumeChunkSourceParameters","baseUrl","collection","experiment","resolution","encoding","MeshSourceParameters","supportedDataTypes","arrayConstructor","fixEndianness","javascriptElementsPerArrayElement","elementBytes","endiannessChar","typeChar","NumpyArray","fortranOrder","backend_BossVolumeChunkSource","backend_BossMeshSource","chunkDecoders","parseResult","majorVersion","minorVersion","headerLength","getUint16","TextDecoder","decode","headerObject","dataOffset","dtype","dim","supportedDataType","javascriptElements","parseNpy","decode_gzip_request","parsedDataType","jpeg","acceptHeaders","BossSource","shared_counterpart","chunkDecoder","headers","Headers","fetchWithBossCredentials","Accept","util_http_request","decodeManifestChunk","getUint32","decodeFragmentChunk","RenderBaseSourceParameters","RenderSourceParameters","TileChunkSourceParameters","PointMatchChunkSourceParameters","VectorGraphicsType","base_VectorGraphicsChunkSpecification","vectorGraphicsSourceOptions","backend_VectorGraphicsChunkSource","vertexNormalsBuffer","Float32ArrayBuilder","initialCapacity","newLength","newData","resize","copyWithin","backend_TileChunkSource","backend_PointMatchSource","queryString","query_params","minIntensity","maxIntensity","maxTileSpecsToRender","filter","xTileSize","yTileSize","owner","project","stack","createConversionObject","tileId","xcoord","ycoord","local","decodePointMatches","conversionObjects","matchObj","pId","qId","pMatches","qMatches","conversionObjectArray","body","Content-Type","conversionObjectToWorld","allConvertedCoordinates","convertedCoordinate","appendArray","downloadPointMatchChunk","sectionIds","matchCollection","getPointMatches","sectionIDs","decodeSectionIDs","zoffset","VolumeChunkEncoding","DataEncoding","ShardingHashFunction","MultiscaleMeshSourceParameters","SkeletonSourceParameters","cacheMode","userAgent","fetchHttpByteRange","murmurHash3_x86_128Mix","rotl32","backend_PrecomputedVolumeChunkSource","backend_PrecomputedMeshSource","backend_PrecomputedMultiscaleMeshSource","backend_PrecomputedSkeletonSource","shardingHashFunctions","MURMURHASH3_X86_128","seed","h1","h2","h3","h4","murmurHash3_x86_128Hash64Bits","IDENTITY","getMinishardIndexDataSource","sharding","generic_file_source","shardAndMinishard","minishard","lowMask","minishardBits","and","shard","shardBits","rshift","shardUrlPrefix","padStart","indexUrl","shardIndexStart","lshift","shardIndexEnd","addUint32","shardIndexResponse","shardIndexDv","minishardStartOffset","minishardEndOffset","dataUrl","minishardIndexResponse","minishardIndexEncoding","GZIP","minishardIndex","minishardIndexSize","prevEntryKeyLow","prevEntryKeyHigh","prevStartLow","prevStartHigh","entryKeyLow","entryKeyHigh","startLow","startHigh","endLow","endHigh","shardUrl","getShardedData","minishardIndexSource","hashFunction","preshiftBits","minishardIndexData","keyLow","keyHigh","findMinishardEntry","dataEncoding","shardInfo","RAW","JPEG","COMPRESSED_SEGMENTATION","compressed_segmentation","gridShape","metadata","dv","gridOrigin","numStoredLods","storedLodScales","vertexOffsets","numFragmentsPerLod","totalFragments","reduce","fragmentInfo","numLods","fragmentBase","lodIndex","numFragments","upperBoundValue","lowerBoundValue","maxFragments","prevNumFragments","prevLodIndex","octreeTemp","offsetsTemp","baseRow","dataSize","offsets","lodScaleMultiplier","decodeMultiscaleManifestChunk","requestUrl","adjustedStartOffset","adjustedEndOffset","fullDataSize","rawMesh","decodeDracoPartitioned","vertexQuantizationBits","decodeMultiscaleFragmentChunk","skeleton_backend","curOffset","bytesPerVertex","attribute","decodeSkeletonChunk","makeRequest","instance","httpCall","serverUrl","payload","responseType","tokenType","accessToken","VolumeSourceParameters","AnnotationSourceParameters","backend_BrainmapsVolumeChunkSource","backend_BrainmapsMultiscaleMeshSource","backend_BrainmapsMeshSource","backend_BrainmapsSkeletonSource","backend_BrainmapsAnnotationSource","CHUNK_DECODERS","applyChangeStack","changeStack","change_spec","change_stack_id","changeStackId","timeStamp","time_stamp","skipEquivalences","skip_equivalences","BrainmapsSource","chunk_manager_backend","subvolume_format","image_format_options","image_format","jpeg_quality","compressed_segmentation_block_size","geometry","corner","applyEncodingParams","changeSpec","getFragmentCorner","maxMeshBatchSize","decodeBatchMeshResponse","objectIdLow","objectIdHigh","prefix","fragmentKeyLength","fragmentKeyLengthHigh","fullKey","numVerticesHigh","numTrianglesHigh","verticesOffset","indicesOffset","combineBatchMeshFragments","fragments","totalVertices","totalIndices","fragment","vertexBuffer","indexBuffer","vertexOffset","indexOffset","sourceIndices","makeBatchMeshRequest","batches","batchSize","splitIndex","substring","prevObjectId","object_id","fragment_keys","volume_id","volumeId","mesh_name","meshName","listFragmentsParams","lods","fragmentKeys","supervoxelIds","fragmentSupervoxelIds","fragmentIdAndCorners","minNumLods","minCoord","maxCoord","numBaseChunks","startChunkIndex","endChunkIndex","relativeBlockShape","fragmentKey","supervoxelId","prevLod","idArray","decodeResponse","makeBatchRequest","prevSubChunkIndex","subChunkIndex","copyMeshData","localeCompare","decodeManifestChunkWithSupervoxelIds","groupFragmentsIntoBatches","spatialAnnotationTypes","parseCommaSeparatedPoint","cornerParts","getIdPrefix","changestack","parseBrainmapsAnnotationId","idPrefix","fullId","startsWith","parseObjectLabels","parseAnnotation","expectedId","spatialAnnotationType","neuroglancer_annotation","parseAnnotations","responses","responseIndex","annotationsArray","getSpatialAnnotationTypeFromId","toCommaSeparated","getFullSpatialAnnotationId","annotationToBrainmaps","objectLabels","minPoint","maxPoint","object_labels","ignore_payload","parseAnnotationResponse","brainmapsAnnotation","DVIDSourceParameters","decodeSwcSkeletonChunk","swcStr","swcObjects","swcInputAr","split","swcObjectsAr","float","PointObj","radius","parseSwc","glVertices","glIndices","swc_obj","backend_DVIDSkeletonSource","backend_DVIDMeshSource","backend_DVIDVolumeChunkSource","bodyid","enc","getPath","decoder","getDecoder","COMPRESSED_SEGMENTATIONARRAY","NiftiDataType","NiftiFileData","backend_NiftiVolumeChunkSource","decodeNiftiFile","uncompressedData","getNiftiFileData","getUrl","NIFTI_HEADER_INFO_PRIORITY","convertAffine","DATA_TYPE_CONVERSIONS","INT8","volume_base","IMAGE","INT16","INT32","INT64","headerPromise","getNiftiHeaderInfo","dataTypeInfo","unitsPerNm","quatern_a","volumeSize","qoffset","quatern","imageBuffer","numDimensions","decodeChunk","backend_ExampleComputation","inputBuffer","inputBufferView","createOutputBuffer","zeros","backend_TensorflowComputation","inputArray","outputArray","mean","stdDev","inferenceRequest","convertInputBuffer_","inputDType","convertOutputBuffer_","parseVTKFromArrayBuffer","parseCSVFromArrayBuffer"],"mappings":"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","file":"chunk_worker.bundle.js","sourcesContent":[" \tself[\"webpackChunk\"] = function webpackChunkCallback(chunkIds, moreModules) {\n \t\tfor(var moduleId in moreModules) {\n \t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t}\n \t\twhile(chunkIds.length)\n \t\t\tinstalledChunks[chunkIds.pop()] = 1;\n \t};\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded chunks\n \t// \"1\" means \"already loaded\"\n \tvar installedChunks = {\n \t\t0: 1\n \t};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n \t\tpromises.push(Promise.resolve().then(function() {\n \t\t\t// \"1\" is the signal for \"already loaded\"\n \t\t\tif(!installedChunks[chunkId]) {\n \t\t\t\timportScripts(\"\" + ({\"1\":\"draco\"}[chunkId]||chunkId) + \".bundle.js\");\n \t\t\t}\n \t\t}));\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 61);\n","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n;\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {mat3, mat4, quat, vec3} from 'gl-matrix';\n\nexport {mat2, mat3, mat4, quat, vec2, vec3, vec4} from 'gl-matrix';\n\nexport const identityMat4 = mat4.create();\n\nexport const AXES_NAMES = ['x', 'y', 'z'];\n\nexport class BoundingBox {\n  constructor(public lower: vec3, public upper: vec3) {}\n}\n\nexport const kAxes = [\n  vec3.fromValues(1, 0, 0),\n  vec3.fromValues(0, 1, 0),\n  vec3.fromValues(0, 0, 1),\n];\nexport const kZeroVec = vec3.fromValues(0, 0, 0);\nexport const kOneVec = vec3.fromValues(1, 1, 1);\nexport const kInfinityVec = vec3.fromValues(Infinity, Infinity, Infinity);\nexport const kIdentityQuat = quat.create();\n\nexport function prod3(x: ArrayLike<number>) {\n  return x[0] * x[1] * x[2];\n}\n\nexport function prod4(x: ArrayLike<number>) {\n  return x[0] * x[1] * x[2] * x[3];\n}\n\n/**\n * Implements a one-to-one conversion from Vec3 to string, suitable for use a Map key.\n *\n * Specifically, returns the string representation of the 3 values separated by commas.\n */\nexport function vec3Key(x: ArrayLike<number>) {\n  return `${x[0]},${x[1]},${x[2]}`;\n}\n\nconst RECTIFY_EPSILON = 1e-4;\n\nexport function rectifyVec3IfAxisAligned(v: Float32Array, offset: number) {\n  let a0 = Math.abs(v[offset]), a1 = Math.abs(v[offset + 1]), a2 = Math.abs(v[offset + 2]);\n  let max = Math.max(a0, a1, a2);\n  if (a0 / max < RECTIFY_EPSILON) {\n    v[offset] = 0;\n  }\n  if (a1 / max < RECTIFY_EPSILON) {\n    v[offset + 1] = 0;\n  }\n  if (a2 / max < RECTIFY_EPSILON) {\n    v[offset + 2] = 0;\n  }\n}\n\n/**\n * Makes columns of m that are approximately axis-aligned exactly axis aligned.\n *\n * Note that mat is stored in Fortran order, and therefore the first column is m[0], m[1], m[2].\n */\nexport function rectifyTransformMatrixIfAxisAligned(m: mat4) {\n  rectifyVec3IfAxisAligned(m, 0);\n  rectifyVec3IfAxisAligned(m, 4);\n  rectifyVec3IfAxisAligned(m, 8);\n}\n\n/**\n * Transforms `a` by a 180-degree rotation about X, stores result in `out`.\n */\nexport function quatRotateX180(out: quat, a: quat) {\n  let x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = w;\n  out[1] = z;\n  out[2] = -y;\n  out[3] = -x;\n}\n\n/**\n * Transforms `a` by a 180-degree rotation about Y, stores result in `out`.\n */\nexport function quatRotateY180(out: quat, a: quat) {\n  let x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = -z;\n  out[1] = w;\n  out[2] = x;\n  out[3] = -y;\n}\n\n/**\n * Transforms `a` by a 180-degree rotation about Z, stores result in `out`.\n */\nexport function quatRotateZ180(out: quat, a: quat) {\n  let x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = y;\n  out[1] = -x;\n  out[2] = w;\n  out[3] = -z;\n}\n\n\n/**\n * Transforms a vector `a` by a homogenous transformation matrix `m`.  The translation component of\n * `m` is ignored.\n */\nexport function transformVectorByMat4(out: vec3, a: vec3, m: mat4) {\n  let x = a[0], y = a[1], z = a[2];\n  out[0] = m[0] * x + m[4] * y + m[8] * z;\n  out[1] = m[1] * x + m[5] * y + m[9] * z;\n  out[2] = m[2] * x + m[6] * y + m[10] * z;\n  return out;\n}\n\n\n/**\n * Computes the effective scaling factor of each local spatial dimension by `m`, which is assumed to\n * transform local coordinates to global coordinates.\n */\nexport function effectiveScalingFactorFromMat4(out: vec3, m: mat4) {\n  const m0 = m[0], m1 = m[1], m2 = m[2], m4 = m[4], m5 = m[5], m6 = m[6], m8 = m[8], m9 = m[9],\n        m10 = m[10];\n  out[0] = Math.sqrt(m0 * m0 + m1 * m1 + m2 * m2);\n  out[1] = Math.sqrt(m4 * m4 + m5 * m5 + m6 * m6);\n  out[2] = Math.sqrt(m8 * m8 + m9 * m9 + m10 * m10);\n  return out;\n}\n\nexport function translationRotationScaleZReflectionToMat4(\n    out: mat4, translation: vec3, rotation: quat, scale: vec3, zReflection: number) {\n  const temp: Float32Array = out;\n  out[0] = scale[0];\n  out[1] = scale[1];\n  out[2] = scale[2] * zReflection;\n  return mat4.fromRotationTranslationScale(out, rotation, translation, <vec3>temp);\n}\n\n/**\n * Returns the value of `t` that minimizes `(p - (a + t * (b - a)))`.\n */\nexport function findClosestParameterizedLinePosition(a: vec3, b: vec3, p: vec3) {\n  // http://mathworld.wolfram.com/Point-LineDistance3-Dimensional.html\n  // Compute t: -dot(a-p, b-a) / |b - a|^2\n  const denominator = vec3.squaredDistance(a, b);\n  let numerator = 0;\n  for (let i = 0; i < 3; ++i) {\n    const aValue = a[i];\n    numerator -= (aValue - p[i]) * (b[i] - aValue);\n  }\n  return numerator / Math.max(denominator, 1e-6);\n}\n\n/**\n * Sets `out` to the position on the line segment `[a, b]` closest to `p`.\n */\nexport function projectPointToLineSegment(out: vec3, a: vec3, b: vec3, p: vec3) {\n  let t = findClosestParameterizedLinePosition(a, b, p);\n  t = Math.max(0.0, Math.min(1.0, t));\n  for (let i = 0; i < 3; ++i) {\n    const aValue = a[i];\n    out[i] = aValue + t * (b[i] - aValue);\n  }\n  return out;\n}\n\nexport function mat3FromMat4(out: mat3, m: mat4) {\n  const m00 = m[0], m01 = m[1], m02 = m[2], m10 = m[4], m11 = m[5], m12 = m[6], m20 = m[8],\n        m21 = m[9], m22 = m[10];\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Extracts the left, right, bottom, top, near, far clipping planes from `projectionMat`.\n * @param out Row-major array of shape `(6, 4)` specifying for each of the left, right, bottom, top,\n *     near, far clipping planes the `a`, `b`, `c`, `d` coefficients such that\n *     `0 < a * x + b * y + c * z + d` if the point `x, y, z` is inside the half-space of the\n * clipping plane.\n * @param m Projection matrix\n */\nexport function getFrustrumPlanes(out: Float32Array, m: mat4): Float32Array {\n  // http://web.archive.org/web/20120531231005/http://crazyjoke.free.fr/doc/3D/plane%20extraction.pdf\n  const m00 = m[0], m10 = m[1], m20 = m[2], m30 = m[3], m01 = m[4], m11 = m[5], m21 = m[6],\n        m31 = m[7], m02 = m[8], m12 = m[9], m22 = m[10], m32 = m[11], m03 = m[12], m13 = m[13],\n        m23 = m[14], m33 = m[15];\n\n  out[0] = m30 + m00;  // left: a\n  out[1] = m31 + m01;  // left: b\n  out[2] = m32 + m02;  // left: c\n  out[3] = m33 + m03;  // left: d\n\n  out[4] = m30 - m00;  // right: a\n  out[5] = m31 - m01;  // right: b\n  out[6] = m32 - m02;  // right: c\n  out[7] = m33 - m03;  // right: d\n\n  out[8] = m30 + m10;   // bottom: a\n  out[9] = m31 + m11;   // bottom: b\n  out[10] = m32 + m12;  // bottom: c\n  out[11] = m33 + m13;  // bottom: d\n\n  out[12] = m30 - m10;  // top: a\n  out[13] = m31 - m11;  // top: b\n  out[14] = m32 - m12;  // top: c\n  out[15] = m33 - m13;  // top: d\n\n  const nearA = m30 + m20;  // near: a\n  const nearB = m31 + m21;  // near: b\n  const nearC = m32 + m22;  // near: c\n  const nearD = m33 + m23;  // near: d\n\n  // Normalize near plane\n  const nearNorm = Math.sqrt(nearA ** 2 + nearB ** 2 + nearC ** 2);\n  out[16] = nearA / nearNorm;\n  out[17] = nearB / nearNorm;\n  out[18] = nearC / nearNorm;\n  out[19] = nearD / nearNorm;\n\n  out[20] = m30 - m20;  // far: a\n  out[21] = m31 - m21;  // far: b\n  out[22] = m32 - m22;  // far: c\n  out[23] = m33 - m23;  // far: d\n\n  return out;\n}\n\n/**\n * Checks whether the specified axis-aligned bounding box (AABB) intersects the view frustrum.\n *\n * @param clippingPlanes Array of length 24 specifying the clipping planes of the view frustrum, as\n *     computed by `getFrustrumPlanes`\n */\nexport function isAABBVisible(\n    xLower: number, yLower: number, zLower: number, xUpper: number, yUpper: number, zUpper: number,\n    clippingPlanes: Float32Array) {\n  for (let i = 0; i < 6; ++i) {\n    const a = clippingPlanes[i * 4], b = clippingPlanes[i * 4 + 1], c = clippingPlanes[i * 4 + 2],\n          d = clippingPlanes[i * 4 + 3];\n    const sum = Math.max(a * xLower, a * xUpper) + Math.max(b * yLower, b * yUpper) +\n        Math.max(c * zLower, c * zUpper) + d;\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CANCELED, CancellationToken, CancellationTokenSource, makeCancelablePromise, uncancelableToken} from 'neuroglancer/util/cancellation';\nimport {RefCounted} from 'neuroglancer/util/disposable';\n\nexport type RPCHandler = (this: RPC, x: any) => void;\n\nexport type RpcId = number;\n\nconst IS_WORKER = !(typeof Window !== 'undefined' && self instanceof Window);\n\nconst DEBUG = false;\n\nconst DEBUG_MESSAGES = false;\n\nconst PROMISE_RESPONSE_ID = 'rpc.promise.response';\nconst PROMISE_CANCEL_ID = 'rpc.promise.cancel';\n\nvar handlers = new Map<string, RPCHandler>();\n\nexport function registerRPC(key: string, handler: RPCHandler) {\n  handlers.set(key, handler);\n}\n\nexport type RPCPromise<T> = Promise<{value: T, transfers?: any[]}>;\n\nexport class RPCError extends Error {\n  constructor(public name: string, public message: string) {\n    super(message);\n  }\n}\n\nexport function registerPromiseRPC<T>(\n    key: string,\n    handler: (this: RPC, x: any, cancellationToken: CancellationToken) => RPCPromise<T>) {\n  registerRPC(key, function(this: RPC, x: any) {\n    let id = <number>x['id'];\n    const cancellationToken = new CancellationTokenSource();\n    let promise = handler.call(this, x, cancellationToken) as RPCPromise<T>;\n    this.set(id, {promise, cancellationToken});\n    promise.then(\n        ({value, transfers}) => {\n          this.delete(id);\n          this.invoke(PROMISE_RESPONSE_ID, {'id': id, 'value': value}, transfers);\n        },\n        error => {\n          this.delete(id);\n          this.invoke(\n              PROMISE_RESPONSE_ID, {'id': id, 'error': error.message, 'errorName': error.name});\n        });\n  });\n}\n\nregisterRPC(PROMISE_CANCEL_ID, function(this: RPC, x: any) {\n  let id = <number>x['id'];\n  const request = this.get(id);\n  if (request !== undefined) {\n    let {cancellationToken} = request;\n    cancellationToken.cancel();\n  }\n});\n\nregisterRPC(PROMISE_RESPONSE_ID, function(this: RPC, x: any) {\n  let id = <number>x['id'];\n  let {resolve, reject} = this.get(id);\n  this.delete(id);\n  if (x.hasOwnProperty('value')) {\n    resolve(x['value']);\n  } else {\n    const errorName = x['errorName'];\n    if (errorName === CANCELED.name) {\n      reject(CANCELED);\n    } else {\n      reject(new RPCError(x['errorName'], x['error']));\n    }\n  }\n});\n\ninterface RPCTarget {\n  postMessage(message?: any, ports?: any): void;\n  onmessage: ((ev: MessageEvent) => any)|null;\n}\n\nconst INITIAL_RPC_ID = IS_WORKER ? -1 : 0;\n\nexport class RPC {\n  private objects = new Map<RpcId, any>();\n  private nextId: RpcId = INITIAL_RPC_ID;\n  constructor(public target: RPCTarget) {\n    target.onmessage = (e) => {\n      let data = e.data;\n      if (DEBUG_MESSAGES) {\n        console.log('Received message', data);\n      }\n      handlers.get(data.functionName)!.call(this, data);\n    };\n  }\n\n  get numObjects() {\n    return this.objects.size;\n  }\n\n  set(id: RpcId, value: any) {\n    this.objects.set(id, value);\n  }\n\n  delete(id: RpcId) {\n    this.objects.delete(id);\n  }\n  get(id: RpcId) {\n    return this.objects.get(id);\n  }\n  getRef<T extends SharedObject>(x: {'id': RpcId, 'gen': number}) {\n    let rpcId = x['id'];\n    let obj = <T>this.get(rpcId);\n    obj.referencedGeneration = x['gen'];\n    obj.addRef();\n    return obj;\n  }\n\n  invoke(name: string, x: any, transfers?: any[]) {\n    x.functionName = name;\n    if (DEBUG_MESSAGES) {\n      console.trace('Sending message', x);\n    }\n    this.target.postMessage(x, transfers);\n  }\n\n  promiseInvoke<T>(name: string, x: any, cancellationToken = uncancelableToken, transfers?: any[]):\n      Promise<T> {\n    return makeCancelablePromise<T>(cancellationToken, (resolve, reject, token) => {\n      const id = x['id'] = this.newId();\n      this.set(id, {resolve, reject});\n      this.invoke(name, x, transfers);\n      token.add(() => {\n        this.invoke(PROMISE_CANCEL_ID, {'id': id});\n      });\n    });\n  }\n  newId() {\n    return IS_WORKER ? this.nextId-- : this.nextId++;\n  }\n}\n\nexport class SharedObject extends RefCounted {\n  rpc: RPC|null = null;\n  rpcId: RpcId|null = null;\n  isOwner: boolean|undefined;\n  unreferencedGeneration: number;\n  referencedGeneration: number;\n\n  initializeSharedObject(rpc: RPC, rpcId = rpc.newId()) {\n    this.rpc = rpc;\n    this.rpcId = rpcId;\n    this.isOwner = false;\n    rpc.set(rpcId, this);\n  }\n\n  initializeCounterpart(rpc: RPC, options: any = {}) {\n    this.initializeSharedObject(rpc);\n    this.unreferencedGeneration = 0;\n    this.referencedGeneration = 0;\n    this.isOwner = true;\n    options['id'] = this.rpcId;\n    options['type'] = this.RPC_TYPE_ID;\n    rpc.invoke('SharedObject.new', options);\n  }\n\n  dispose() {\n    super.dispose();\n  }\n\n  /**\n   * Precondition: this.isOwner === true.\n   */\n  addCounterpartRef() {\n    return {'id': this.rpcId, 'gen': ++this.referencedGeneration};\n  }\n\n  protected refCountReachedZero() {\n    if (this.isOwner === true) {\n      if (this.referencedGeneration === this.unreferencedGeneration) {\n        this.ownerDispose();\n      }\n    } else if (this.isOwner === false) {\n      this.rpc!.invoke(\n          'SharedObject.refCountReachedZero', {'id': this.rpcId, 'gen': this.referencedGeneration});\n    } else {\n      super.refCountReachedZero();\n    }\n  }\n\n  /**\n   * Precondition: this.isOwner === true.\n   */\n  protected ownerDispose() {\n    if (DEBUG) {\n      console.log(`[${IS_WORKER}] #rpc object = ${this.rpc!.numObjects}`);\n    }\n    let {rpc, rpcId} = this;\n    super.refCountReachedZero();\n    rpc!.delete(rpcId!);\n    rpc!.invoke('SharedObject.dispose', {'id': rpcId});\n  }\n\n  /**\n   * Precondition: this.isOwner === true.\n   *\n   * This should be called when the counterpart's refCount is decremented and reaches zero.\n   */\n  counterpartRefCountReachedZero(generation: number) {\n    this.unreferencedGeneration = generation;\n    if (this.refCount === 0 && generation === this.referencedGeneration) {\n      this.ownerDispose();\n    }\n  }\n\n  /**\n   * Should be set to a constant specifying the SharedObject type identifier on the prototype of\n   * final derived owner classes.  It is not used on counterpart (non-owner) classes.\n   */\n  RPC_TYPE_ID: string;\n}\n\nexport function initializeSharedObjectCounterpart(obj: SharedObject, rpc?: RPC, options: any = {}) {\n  if (rpc != null) {\n    obj.initializeSharedObject(rpc, options['id']);\n  }\n}\n\n/**\n * Base class for defining a SharedObject type that will never be owned.\n */\nexport class SharedObjectCounterpart extends SharedObject {\n  constructor(rpc?: RPC, options: any = {}) {\n    super();\n    initializeSharedObjectCounterpart(this, rpc, options);\n  }\n}\n\n\nexport interface SharedObjectConstructor { new(rpc: RPC, options: any): SharedObjectCounterpart; }\n\nregisterRPC('SharedObject.dispose', function(x) {\n  let obj = <SharedObject>this.get(x['id']);\n  if (obj.refCount !== 0) {\n    throw new Error(`Attempted to dispose object with non-zero reference count.`);\n  }\n  if (DEBUG) {\n    console.log(`[${IS_WORKER}] #rpc objects: ${this.numObjects}`);\n  }\n  obj.disposed();\n  this.delete(obj.rpcId!);\n  obj.rpcId = null;\n  obj.rpc = null;\n});\n\nregisterRPC('SharedObject.refCountReachedZero', function(x) {\n  let obj = <SharedObject>this.get(x['id']);\n  let generation = <number>x['gen'];\n  obj.counterpartRefCountReachedZero(generation);\n});\n\nconst sharedObjectConstructors = new Map<string, SharedObjectConstructor>();\n\n/**\n * Register a class as a SharedObject owner type under the specified identifier.\n *\n * This is intended to be used as a decorator.\n */\nexport function registerSharedObjectOwner(identifier: string) {\n  return (constructorFunction: {prototype: {RPC_TYPE_ID: string}}) => {\n    constructorFunction.prototype.RPC_TYPE_ID = identifier;\n  };\n}\n\n/**\n * Register a class as a SharedObject counterpart type under the specified identifier.\n *\n * This is intended to be used as a decorator.\n *\n * Also register the type as a SharedObject owner, which is useful if this type is also used as a\n * SharedObject owner.\n */\nexport function registerSharedObject(identifier?: string) {\n  return (constructorFunction: SharedObjectConstructor) => {\n    if (identifier !== undefined) {\n      constructorFunction.prototype.RPC_TYPE_ID = identifier;\n    } else {\n      identifier = constructorFunction.prototype.RPC_TYPE_ID;\n      if (identifier === undefined) {\n        throw new Error('RPC_TYPE_ID should have already been defined');\n      }\n    }\n    sharedObjectConstructors.set(identifier, constructorFunction);\n  };\n}\n\nregisterRPC('SharedObject.new', function(x) {\n  let rpc = <RPC>this;\n  let typeName = <string>x['type'];\n  let constructorFunction = sharedObjectConstructors.get(typeName)!;\n  let obj = new constructorFunction(rpc, x);\n  // Counterpart objects start with a reference count of zero.\n  --obj.refCount;\n});\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum ChunkState {\n  // Chunk is stored in GPU memory in addition to system memory.\n  GPU_MEMORY = 0,\n  // Chunk is stored only in system memory but not in GPU memory.\n  SYSTEM_MEMORY = 1,\n\n  // Chunk is stored in system memory on worker.\n  SYSTEM_MEMORY_WORKER = 2,\n\n  // Chunk is downloading.\n  DOWNLOADING = 3,\n  // Chunk is not yet downloading.\n  QUEUED = 4,\n\n  // Chunk has just been added.\n  NEW = 5,\n\n  // Download failed.\n  FAILED = 6,\n\n  EXPIRED = 7,\n\n  // If new states are added, keep numChangeStates in sync.\n}\n\nexport const numChunkStates = 8;\n\nexport enum ChunkPriorityTier {\n  FIRST_TIER = 0,\n  FIRST_ORDERED_TIER = 0,\n  VISIBLE = 0,\n  PREFETCH = 1,\n  LAST_ORDERED_TIER = 1,\n  RECENT = 2,\n  LAST_TIER = 2\n}\n\nexport const numChunkPriorityTiers = 3;\n\nexport enum ChunkDownloadStatistics {\n  totalTime = 0,\n  totalChunks = 1,\n}\n\nexport enum ChunkMemoryStatistics {\n  numChunks = 0,\n  systemMemoryBytes = 1,\n  gpuMemoryBytes = 2,\n}\n\nexport const numChunkMemoryStatistics = 3;\n\nexport const numChunkDownloadStatistics = 2;\n\nexport const numChunkStatistics =\n    numChunkStates * numChunkPriorityTiers * numChunkMemoryStatistics + numChunkDownloadStatistics;\n\nexport function getChunkStateStatisticIndex(state: ChunkState, priorityTier: ChunkPriorityTier) {\n  return state * numChunkPriorityTiers + priorityTier;\n}\n\nexport function getChunkDownloadStatisticIndex(statistic: ChunkDownloadStatistics) {\n  return numChunkStates * numChunkPriorityTiers * numChunkMemoryStatistics + statistic;\n}\n\nexport const PREFETCH_PRIORITY_MULTIPLIER = 1e13;\n\nexport const CHUNK_QUEUE_MANAGER_RPC_ID = 'ChunkQueueManager';\nexport const CHUNK_MANAGER_RPC_ID = 'ChunkManager';\nexport const CHUNK_SOURCE_INVALIDATE_RPC_ID = 'ChunkSource.invalidate';\n\nexport const REQUEST_CHUNK_STATISTICS_RPC_ID = 'ChunkQueueManager.requestChunkStatistics';\n\nexport interface ChunkSourceParametersConstructor<T> {\n  new(): T;\n  RPC_ID: string;\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {WritableArrayLike} from 'neuroglancer/util/array';\nimport {vec3} from 'neuroglancer/util/geom';\n\nexport function verifyFloat(obj: any): number {\n  let t = typeof obj;\n  if (t === 'number' || t === 'string') {\n    let x = parseFloat('' + obj);\n    if (!Number.isNaN(x)) {\n      return x;\n    }\n  }\n  throw new Error(`Expected floating-point number, but received: ${JSON.stringify(obj)}.`);\n}\n\nexport function verifyFiniteFloat(obj: any): number {\n  let x = verifyFloat(obj);\n  if (Number.isFinite(x)) {\n    return x;\n  }\n  throw new Error(`Expected finite floating-point number, but received: ${x}.`);\n}\n\nexport function verifyFinitePositiveFloat(obj: any): number {\n  let x = verifyFiniteFloat(obj);\n  if (x > 0) {\n    return x;\n  }\n  throw new Error(`Expected positive finite floating-point number, but received: ${x}.`);\n}\n\nexport function parseXYZ<A extends WritableArrayLike<number>>(\n    out: A, obj: any, validator: (x: any) => number = verifyFloat): A {\n  verifyObject(obj);\n  out[0] = out[1] = out[2] = 0;\n  for (const key of Object.keys(obj)) {\n    switch (key) {\n    case 'x':\n      out[0] = validator(obj[key]);\n      break;\n    case 'y':\n      out[1] = validator(obj[key]);\n      break;\n    case 'z':\n      out[2] = validator(obj[key]);\n      break;\n    default:\n      throw new Error(\n          `Expected object to have keys ['x', 'y', 'z'], but received: ${JSON.stringify(obj)}.`);\n    }\n  }\n  return out;\n}\n\nexport function parseFiniteVec<U extends WritableArrayLike<number>>(out: U, obj: any[]) {\n  let length = out.length;\n  if (!Array.isArray(obj) || obj.length !== length) {\n    throw new Error('Incompatible sizes');\n  }\n\n  for (let i = 0; i < length; ++i) {\n    if (!Number.isFinite(parseFloat(obj[i]))) {\n      throw new Error('Non-finite value.');\n    }\n  }\n  for (let i = 0; i < length; ++i) {\n    out[i] = parseFloat(obj[i]);\n  }\n  return out;\n}\n\nexport function parseIntVec<U extends WritableArrayLike<number>>(out: U, obj: any) {\n  let length = out.length;\n  if (!Array.isArray(obj) || obj.length !== length) {\n    throw new Error('Incompatible sizes.');\n  }\n\n  for (let i = 0; i < length; ++i) {\n    let val = parseInt(obj[i], undefined);\n    if (!Number.isInteger(val)) {\n      throw new Error('Non-integer value.');\n    }\n  }\n\n  for (let i = 0; i < length; ++i) {\n    out[i] = parseInt(obj[i], undefined);\n  }\n  return out;\n}\n\n/**\n * Returns a JSON representation of x, with object keys sorted to ensure a\n * consistent result.\n */\nexport function stableStringify(x: any) {\n  if (typeof x === 'object') {\n    if (x === null) {\n      return 'null';\n    }\n    if (Array.isArray(x)) {\n      let s = '[';\n      let size = x.length;\n      let i = 0;\n      if (i < size) {\n        s += stableStringify(x[i]);\n        while (++i < size) {\n          s += ',';\n          s += stableStringify(x[i]);\n        }\n      }\n      s += ']';\n      return s;\n    }\n    let s = '{';\n    let keys = Object.keys(x).sort();\n    let i = 0;\n    let size = keys.length;\n    if (i < size) {\n      let key = keys[i];\n      s += JSON.stringify(key);\n      s += ':';\n      s += stableStringify(x[key]);\n      while (++i < size) {\n        s += ',';\n        key = keys[i];\n        s += JSON.stringify(key);\n        s += ':';\n        s += stableStringify(x[key]);\n      }\n    }\n    s += '}';\n    return s;\n  }\n  return JSON.stringify(x);\n}\n\nfunction swapQuotes(x: string) {\n  return x.replace(/['\"]/g, s => {\n    return (s === '\"' ? '\\'' : '\"');\n  });\n}\n\nexport function urlSafeStringifyString(x: string) {\n  return swapQuotes(JSON.stringify(swapQuotes(x)));\n}\n\nconst URL_SAFE_COMMA = '_';\n\nexport function urlSafeStringify(x: any): string {\n  if (typeof x === 'object') {\n    if (x === null) {\n      return 'null';\n    }\n    let toJSON = x['toJSON'];\n    if (typeof toJSON === 'function') {\n      return urlSafeStringify(toJSON.call(x));\n    }\n    if (Array.isArray(x)) {\n      let s = '[';\n      let size = x.length;\n      let i = 0;\n      if (i < size) {\n        s += urlSafeStringify(x[i]);\n        while (++i < size) {\n          s += URL_SAFE_COMMA;\n          s += urlSafeStringify(x[i]);\n        }\n      }\n      s += ']';\n      return s;\n    }\n    let s = '{';\n    let keys = Object.keys(x);\n    let first = true;\n    for (let key of keys) {\n      let value = x[key];\n      if (value === undefined) {\n        continue;\n      }\n      let valueString = urlSafeStringify(value);\n      if (!valueString) {\n        continue;\n      }\n      if (!first) {\n        s += URL_SAFE_COMMA;\n      } else {\n        first = false;\n      }\n      s += urlSafeStringifyString(key);\n      s += ':';\n      s += valueString;\n    }\n    s += '}';\n    return s;\n  }\n  if (typeof x === 'string') {\n    return urlSafeStringifyString(x);\n  }\n  return JSON.stringify(x);\n}\n\nconst SINGLE_QUOTE_STRING_PATTERN = /('(?:[^'\\\\]|(?:\\\\.))*')/;\nconst DOUBLE_QUOTE_STRING_PATTERN = /(\"(?:[^'\\\\]|(?:\\\\.))*\")/;\nconst SINGLE_OR_DOUBLE_QUOTE_STRING_PATTERN =\n    new RegExp(`${SINGLE_QUOTE_STRING_PATTERN.source}|${DOUBLE_QUOTE_STRING_PATTERN.source}`);\nconst DOUBLE_OR_SINGLE_QUOTE_STRING_PATTERN =\n    new RegExp(`${DOUBLE_QUOTE_STRING_PATTERN.source}|${SINGLE_QUOTE_STRING_PATTERN.source}`);\n\nconst DOUBLE_QUOTE_PATTERN = /^((?:[^\"'\\\\]|(?:\\\\[^']))*)(\"|\\\\')/;\nconst SINGLE_QUOTE_PATTERN = /^((?:[^\"'\\\\]|(?:\\\\.))*)'/;\n\nfunction convertStringLiteral(\n  x: string, quoteInitial: string, quoteReplace: string, quoteSearch: RegExp) {\n  if (x.length >= 2 && x.charAt(0) === quoteInitial && x.charAt(x.length - 1) === quoteInitial) {\n    let inner = x.substr(1, x.length - 2);\n    let s = quoteReplace;\n    while (inner.length > 0) {\n      let m = inner.match(quoteSearch);\n      if (m === null) {\n        s += inner;\n        break;\n      }\n      s += m[1];\n      if (m[2] === quoteReplace) {\n        // We received a single unescaped quoteReplace character.\n        s += '\\\\';\n        s += quoteReplace;\n      } else {\n        // We received \"\\\\\" + quoteInitial.  We need to remove the escaping.\n        s += quoteInitial;\n      }\n      inner = inner.substr(m.index! + m[0].length);\n    }\n    s += quoteReplace;\n    return s;\n  }\n  return x;\n}\n\n/**\n * Converts a string literal delimited by either single or double quotes into a string literal\n * delimited by double quotes.\n */\nexport function normalizeStringLiteral(x: string) {\n  return convertStringLiteral(x, '\\'', '\"', DOUBLE_QUOTE_PATTERN);\n}\n\n\n\n// quoteChar: des\nfunction convertJsonHelper(x: string, desiredCommaChar: string, desiredQuoteChar: string) {\n  const commaSearch = /[&_,]/g;\n  let quoteInitial: string;\n  let quoteSearch: RegExp;\n  let stringLiteralPattern: RegExp;\n  if (desiredQuoteChar === '\"') {\n    quoteInitial = '\\'';\n    quoteSearch = DOUBLE_QUOTE_PATTERN;\n    stringLiteralPattern = SINGLE_OR_DOUBLE_QUOTE_STRING_PATTERN;\n  } else {\n    quoteInitial = '\"';\n    quoteSearch = SINGLE_QUOTE_PATTERN;\n    stringLiteralPattern = DOUBLE_OR_SINGLE_QUOTE_STRING_PATTERN;\n  }\n  let s = '';\n  while (x.length > 0) {\n    let m = x.match(stringLiteralPattern);\n    let before: string;\n    let replacement: string;\n    if (m === null) {\n      before = x;\n      x = '';\n      replacement = '';\n    } else {\n      before = x.substr(0, m.index);\n      x = x.substr(m.index! + m[0].length);\n      let originalString = m[1];\n      if (originalString !== undefined) {\n        replacement =\n            convertStringLiteral(originalString, quoteInitial, desiredQuoteChar, quoteSearch);\n      } else {\n        replacement = m[2];\n      }\n    }\n    s += before.replace(commaSearch, desiredCommaChar);\n    s += replacement;\n  }\n  return s;\n}\n\nexport function urlSafeToJSON(x: string) {\n  return convertJsonHelper(x, ',', '\"');\n}\n\nexport function jsonToUrlSafe(x: string) {\n  return convertJsonHelper(x, '_', '\\'');\n}\n\nexport function urlSafeParse(x: string) {\n  return JSON.parse(urlSafeToJSON(x));\n}\n\n// Converts a string containing a Python literal into a string containing an equivalent JSON\n// literal.\nexport function pythonLiteralToJSON(x: string) {\n  let s = '';\n  while (x.length > 0) {\n    let m = x.match(SINGLE_OR_DOUBLE_QUOTE_STRING_PATTERN);\n    let before: string;\n    let replacement: string;\n    if (m === null) {\n      before = x;\n      x = '';\n      replacement = '';\n    } else {\n      before = x.substr(0, m.index);\n      x = x.substr(m.index! + m[0].length);\n      let singleQuoteString = m[1];\n      if (singleQuoteString !== undefined) {\n        replacement = normalizeStringLiteral(singleQuoteString);\n      } else {\n        replacement = m[2];\n      }\n    }\n    s += before.replace(/\\(/g, '[')\n             .replace(/\\)/g, ']')\n             .replace('True', 'true')\n             .replace('False', 'false')\n             .replace(/,\\s*([\\}\\]])/g, '$1');\n    s += replacement;\n  }\n  return s;\n}\n\n// Converts a string containing a Python literal into an equivalent JavaScript value.\nexport function pythonLiteralParse(x: string) {\n  return JSON.parse(pythonLiteralToJSON(x));\n}\n\n// Checks that `x' is an array, maps each element by parseElement.\nexport function parseArray<T>(x: any, parseElement: (x: any, index: number) => T): T[] {\n  if (!Array.isArray(x)) {\n    throw new Error(`Expected array, but received: ${JSON.stringify(x)}.`);\n  }\n  return (<any[]>x).map(parseElement);\n}\n\nexport function parseFixedLengthArray<T, U extends WritableArrayLike<T>>(\n    out: U, obj: any, parseElement: (x: any, index: number) => T): U {\n  const length = out.length;\n  if (!Array.isArray(obj) || obj.length !== length) {\n    throw new Error(`Expected length ${length} array, but received: ${JSON.stringify(obj)}.`);\n  }\n  for (let i = 0; i < length; ++i) {\n    out[i] = parseElement(obj[i], i);\n  }\n  return out;\n}\n\nexport function verifyObject(obj: any) {\n  if (typeof obj !== 'object' || obj == null || Array.isArray(obj)) {\n    throw new Error(`Expected JSON object, but received: ${JSON.stringify(obj)}.`);\n  }\n  return obj;\n}\n\nexport function verifyInt(obj: any) {\n  let result = parseInt(obj, 10);\n  if (!Number.isInteger(result)) {\n    throw new Error(`Expected integer, but received: ${JSON.stringify(obj)}.`);\n  }\n  return result;\n}\n\nexport function verifyPositiveInt(obj: any) {\n  let result = verifyInt(obj);\n  if (result <= 0) {\n    throw new Error(`Expected positive integer, but received: ${result}.`);\n  }\n  return result;\n}\n\nexport function verifyMapKey<U>(obj: any, map: Map<string, U>) {\n  let result = map.get(obj);\n  if (result === undefined) {\n    throw new Error(\n        `Expected one of ${JSON.stringify(Array.from(map.keys()))}, ` +\n        `but received: ${JSON.stringify(obj)}.`);\n  }\n  return result;\n}\n\nexport function verifyString(obj: any) {\n  if (typeof obj !== 'string') {\n    throw new Error(`Expected string, but received: ${JSON.stringify(obj)}.`);\n  }\n  return obj;\n}\n\nexport function verifyOptionalString(obj: any): string|undefined {\n  if (obj === undefined) {\n    return undefined;\n  }\n  return verifyString(obj);\n}\n\nexport function verifyOptionalInt(obj: any): number|undefined {\n  if (obj === undefined) {\n    return undefined;\n  }\n  return verifyInt(obj);\n}\n\nexport function verifyOptionalBoolean(obj: any): boolean|undefined {\n  if (obj === undefined) {\n    return undefined;\n  }\n  if (typeof obj === 'boolean') {\n    return obj;\n  } else if (obj === 'true') {\n    return true;\n  } else if (obj === 'false') {\n    return false;\n  } else {\n    throw new Error(`Expected string or boolean but received: ${JSON.stringify(obj)}`);\n  }\n}\n\nexport function valueOr<T>(value: T|undefined, defaultValue: T) {\n  return value === undefined ? defaultValue : value;\n}\n\nexport function verifyObjectProperty<T>(\n    obj: any, propertyName: string, validator: (value: any) => T): T {\n  let value = obj.hasOwnProperty(propertyName) ? obj[propertyName] : undefined;\n  try {\n    return validator(value);\n  } catch (parseError) {\n    throw new Error(\n        `Error parsing ${JSON.stringify(propertyName)} property: ${parseError.message}`);\n  }\n}\n\nexport function verifyObjectAsMap<T>(obj: any, validator: (value: any) => T): Map<string, T> {\n  verifyObject(obj);\n  let map = new Map<string, T>();\n  for (let key of Object.keys(obj)) {\n    try {\n      map.set(key, validator(obj[key]));\n    } catch (parseError) {\n      throw new Error(\n          `Error parsing value associated with key ${JSON.stringify(key)}: ${parseError.message}`);\n    }\n  }\n  return map;\n}\n\nexport function verifyFloat01(obj: any): number {\n  if (typeof obj !== 'number' || !Number.isFinite(obj) || obj < 0 || obj > 1) {\n    throw new Error(\n        `Expected floating point number in [0,1], but received: ${JSON.stringify(obj)}.`);\n  }\n  return obj;\n}\n\n/**\n * The query string parameters may either be specified in the usual\n * 'name=value&otherName=otherValue' form or as (optionally urlSafe) JSON: '{\"name\":\"value\"}`.\n */\nexport function parseQueryStringParameters(queryString: string) {\n  if (queryString === '') {\n    return {};\n  }\n  if (queryString.startsWith('{')) {\n    return urlSafeParse(queryString);\n  } else {\n    let result: any = {};\n    let parts = queryString.split(/[&;]/);\n    for (let part of parts) {\n      let m = part.match(/^([^=&;]+)=([^&;]*)$/);\n      if (m === null) {\n        throw new Error(`Invalid query string part: ${JSON.stringify(part)}.`);\n      }\n      result[m[1]] = decodeURIComponent(m[2]);\n    }\n    return result;\n  }\n}\n\n/**\n * Verifies that `obj' is a string that, when converted to uppercase, matches a string property of\n * `enumType`.\n *\n * Note: TypeScript does not seem to allow better typing of the return type.\n *\n * @returns The corresponding numerical value.\n */\nexport function verifyEnumString(obj: any, enumType: {[x: string]: any}): number {\n  if (typeof obj === 'string' && obj.match(/^[a-zA-Z]/) !== null) {\n    obj = obj.toUpperCase();\n    if (enumType.hasOwnProperty(obj)) {\n      return enumType[obj];\n    }\n  }\n  throw new Error(`Invalid enum value: ${JSON.stringify(obj)}.`);\n}\n\nexport function verify3dVec(obj: any) {\n  return parseFixedLengthArray(vec3.create(), obj, verifyFiniteFloat);\n}\n\nexport function verify3dScale(obj: any) {\n  return parseFixedLengthArray(vec3.create(), obj, verifyFinitePositiveFloat);\n}\n\nexport function verify3dDimensions(obj: any) {\n  return parseFixedLengthArray(vec3.create(), obj, verifyPositiveInt);\n}\n\nexport function verifyStringArray(a: any) {\n  if (!Array.isArray(a)) {\n    throw new Error(`Expected array, received: ${JSON.stringify(a)}.`);\n  }\n  for (let x of a) {\n    if (typeof x !== 'string') {\n      throw new Error(`Expected string, received: ${JSON.stringify(x)}.`);\n    }\n  }\n  return <string[]>a;\n}\n\nexport function verifyBoolean(x: any) {\n  if (typeof x !== 'boolean') {\n    throw new Error(`Expected boolean, received: ${JSON.stringify(x)}`);\n  }\n  return x;\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst randomTempBuffer = new Uint32Array(2);\n\nconst trueBase = 0x100000000;\n\n// For dealing with the string representation in base b, we will represent the 64-bit number as\n//\n//   highPrime * intermediateBase[b] + lowPrime,\n//\n// where:\n//\n//   intermediateBaseForBase[b] = Math.pow(b, lowDigitsforBase[b]),\n//\n// and\n//\n//   lowDigitsForBase[b] = Math.floor(Math.log(Math.pow(2,53 - 32)) / Math.log(b)).\n\ninterface StringConversionData {\n  lowDigits: number;\n\n  lowBase: number;\n\n  pattern: RegExp;\n}\n\nlet stringConversionData: StringConversionData[] = [];\nfor (let base = 2; base <= 36; ++base) {\n  let lowDigits = Math.floor(32 / Math.log2(base));\n  let lowBase = Math.pow(base, lowDigits);\n  let patternString = `^[0-${String.fromCharCode('0'.charCodeAt(0) + Math.min(9, base - 1))}`;\n  if (base > 10) {\n    patternString += `a-${String.fromCharCode('a'.charCodeAt(0) + base - 11)}`;\n    patternString += `A-${String.fromCharCode('A'.charCodeAt(0) + base - 11)}`;\n  }\n  let maxDigits = Math.ceil(64 / Math.log2(base));\n  patternString += `]{1,${maxDigits}}$`;\n  let pattern = new RegExp(patternString);\n  stringConversionData[base] = {lowDigits, lowBase, pattern};\n}\n\n/**\n * Returns the high 32 bits of the result of the 32-bit integer multiply `a` and `b`.\n *\n * The low 32-bits can be obtained using the built-in `Math.imul` function.\n */\nfunction uint32MultiplyHigh(a: number, b: number) {\n  a >>>= 0;\n  b >>>= 0;\n\n  const a00 = a & 0xFFFF, a16 = a >>> 16;\n  const b00 = b & 0xFFFF, b16 = b >>> 16;\n\n  let c00 = a00 * b00;\n  let c16 = (c00 >>> 16) + (a16 * b00);\n  let c32 = c16 >>> 16;\n  c16 = (c16 & 0xFFFF) + (a00 * b16);\n  c32 += c16 >>> 16;\n  let c48 = c32 >>> 16;\n  c32 = (c32 & 0xFFFF) + (a16 * b16);\n  c48 += c32 >>> 16;\n\n  return (((c48 & 0xFFFF) << 16) | (c32 & 0xFFFF)) >>> 0;\n}\n\nexport class Uint64 {\n  constructor(public low: number = 0, public high: number = 0) {}\n\n  clone() {\n    return new Uint64(this.low, this.high);\n  }\n\n  assign(x: Uint64) {\n    this.low = x.low;\n    this.high = x.high;\n  }\n\n  toString(base = 10): string {\n    let vLow = this.low, vHigh = this.high;\n    if (vHigh === 0) {\n      return vLow.toString(base);\n    }\n    vHigh *= trueBase;\n    let {lowBase, lowDigits} = stringConversionData[base];\n    let vHighExtra = vHigh % lowBase;\n    vHigh = Math.floor(vHigh / lowBase);\n    vLow += vHighExtra;\n    vHigh += Math.floor(vLow / lowBase);\n    vLow = vLow % lowBase;\n    let vLowStr = vLow.toString(base);\n    return vHigh.toString(base) + '0'.repeat(lowDigits - vLowStr.length) + vLowStr;\n  }\n\n  /**\n   * Returns true if a is strictly less than b.\n   */\n  static less(a: Uint64, b: Uint64): boolean {\n    return a.high < b.high || (a.high === b.high && a.low < b.low);\n  }\n\n  /**\n   * Returns a negative number if a is strictly less than b, 0 if a is equal to b, or a positive\n   * number if a is strictly greater than b.\n   */\n  static compare(a: Uint64, b: Uint64): number {\n    return (a.high - b.high) || (a.low - b.low);\n  }\n\n  static ZERO = new Uint64(0, 0);\n  static ONE = new Uint64(1, 0);\n\n  static equal(a: Uint64, b: Uint64) {\n    return a.low === b.low && a.high === b.high;\n  }\n\n  static min(a: Uint64, b: Uint64): Uint64 {\n    return Uint64.less(a, b) ? a : b;\n  }\n\n  static max(a: Uint64, b: Uint64): Uint64 {\n    return Uint64.less(a, b) ? b : a;\n  }\n\n  static random() {\n    crypto.getRandomValues(randomTempBuffer);\n    return new Uint64(randomTempBuffer[0], randomTempBuffer[1]);\n  }\n\n  tryParseString(s: string, base = 10) {\n    const {lowDigits, lowBase, pattern} = stringConversionData[base];\n    if (!pattern.test(s)) {\n      return false;\n    }\n    if (s.length <= lowDigits) {\n      this.low = parseInt(s, base);\n      this.high = 0;\n      return true;\n    }\n    const splitPoint = s.length - lowDigits;\n    const lowPrime = parseInt(s.substr(splitPoint), base);\n    const highPrime = parseInt(s.substr(0, splitPoint), base);\n\n    let high: number, low: number;\n\n    if (lowBase === trueBase) {\n      high = highPrime;\n      low = lowPrime;\n    } else {\n      const highRemainder = Math.imul(highPrime, lowBase) >>> 0;\n      high = uint32MultiplyHigh(highPrime, lowBase) +\n          (Math.imul(Math.floor(highPrime / trueBase), lowBase) >>> 0);\n      low = lowPrime + highRemainder;\n      if (low >= trueBase) {\n        ++high;\n        low -= trueBase;\n      }\n    }\n    if ((low >>> 0) !== low || ((high >>> 0) !== high)) {\n      return false;\n    }\n    this.low = low;\n    this.high = high;\n    return true;\n  }\n\n  parseString(s: string, base = 10) {\n    if (!this.tryParseString(s, base)) {\n      throw new Error(`Failed to parse string as uint64 value: ${JSON.stringify(s)}.`);\n    }\n    return this;\n  }\n\n  static parseString(s: string, base = 10) {\n    let x = new Uint64();\n    return x.parseString(s, base);\n  }\n\n  valid() {\n    let {low, high} = this;\n    return ((low >>> 0) === low) && ((high >>> 0) === high);\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n  static lshift(out: Uint64, input: Uint64, bits: number): Uint64 {\n    const {low, high} = input;\n    if (bits === 0) {\n      out.low = low;\n      out.high = high;\n    } else if (bits < 32) {\n      out.low = low << bits;\n      out.high = (high << bits) | (low >>> (32 - bits));\n    } else {\n      out.low = 0;\n      out.high = low << (bits - 32);\n    }\n    return out;\n  }\n\n  static rshift(out: Uint64, input: Uint64, bits: number) {\n    const {low, high} = input;\n    if (bits === 0) {\n      out.low = low;\n      out.high = high;\n    } else if (bits < 32) {\n      out.low = (low >>> bits) | (high << (32 - bits));\n      out.high = high >>> bits;\n    } else {\n      out.low = high >>> (bits - 32);\n      out.high = 0;\n    }\n    return out;\n  }\n\n  static or(out: Uint64, a: Uint64, b: Uint64): Uint64 {\n    out.low = a.low | b.low;\n    out.high = a.high | b.high;\n    return out;\n  }\n\n  static xor(out: Uint64, a: Uint64, b: Uint64): Uint64 {\n    out.low = a.low ^ b.low;\n    out.high = a.high ^ b.high;\n    return out;\n  }\n\n  static and(out: Uint64, a: Uint64, b: Uint64): Uint64 {\n    out.low = a.low & b.low;\n    out.high = a.high & b.high;\n    return out;\n  }\n\n  static add(out: Uint64, a: Uint64, b: Uint64): Uint64 {\n    let lowSum = a.low + b.low;\n    let highSum = a.high + b.high;\n    const low = lowSum >>> 0;\n    if (low !== lowSum) highSum += 1;\n    out.low = low;\n    out.high = highSum >>> 0;\n    return out;\n  }\n\n  static addUint32(out: Uint64, a: Uint64, b: number): Uint64 {\n    let lowSum = a.low + b;\n    let highSum = a.high;\n    const low = lowSum >>> 0;\n    if (low !== lowSum) highSum += 1;\n    out.low = low;\n    out.high = highSum >>> 0;\n    return out;\n  }\n\n  static decrement(out: Uint64, input: Uint64): Uint64 {\n    let {low, high} = input;\n    if (low === 0) {\n      high -= 1;\n    }\n    out.low = (low - 1) >>> 0;\n    out.high = high >>> 0;\n    return out;\n  }\n\n  static increment(out: Uint64, input: Uint64): Uint64 {\n    let {low, high} = input;\n    if (low === 0xFFFFFFFF) high += 1;\n    out.low = (low + 1) >>> 0;\n    out.high = high >>> 0;\n    return out;\n  }\n\n  static subtract(out: Uint64, a: Uint64, b: Uint64): Uint64 {\n    let lowSum = a.low - b.low;\n    let highSum = a.high - b.high;\n    const low = lowSum >>> 0;\n    if (low !== lowSum) highSum -= 1;\n    out.low = low;\n    out.high = highSum >>> 0;\n    return out;\n  }\n\n  static multiplyUint32(out: Uint64, a: Uint64, b: number): Uint64 {\n    const {low, high} = a;\n    out.low = Math.imul(low, b) >>> 0;\n    out.high = (Math.imul(high, b) + uint32MultiplyHigh(low, b)) >>> 0;\n    return out;\n  }\n\n  static lowMask(out: Uint64, bits: number) {\n    if (bits <= 32) {\n      out.high = 0;\n      out.low = 0xffffffff >>> (32 - bits);\n    } else {\n      out.high = 0xffffffff >>> (bits - 32);\n      out.low = 0xffffffff;\n    }\n    return out;\n  }\n}\n","// DO NOT EDIT.  Generated from templates/neuroglancer/util/linked_list.template.ts.\n/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ninterface Node<T> {\n  next0: T|null;\n  prev0: T|null;\n}\n\nexport default class {\n  static insertAfter<T extends Node<T>>(head: T, x: T) {\n    let next = <T>head.next0;\n    x.next0 = next;\n    x.prev0 = head;\n    head.next0 = x;\n    next.prev0 = x;\n  }\n  static insertBefore<T extends Node<T>>(head: T, x: T) {\n    let prev = <T>head.prev0;\n    x.prev0 = prev;\n    x.next0 = head;\n    head.prev0 = x;\n    prev.next0 = x;\n  }\n  static front<T extends Node<T>>(head: T) {\n    let next = head.next0;\n    if (next === head) {\n      return null;\n    }\n    return next;\n  }\n  static back<T extends Node<T>>(head: T) {\n    let next = head.prev0;\n    if (next === head) {\n      return null;\n    }\n    return next;\n  }\n  static pop<T extends Node<T>>(x: T) {\n    let next = <T>x.next0;\n    let prev = <T>x.prev0;\n    next.prev0 = prev;\n    prev.next0 = next;\n    x.next0 = null;\n    x.prev0 = null;\n    return x;\n  }\n  static * iterator<T extends Node<T>>(head: T) {\n    for (let x = <T>head.next0; x !== head; x = <T>x.next0) {\n      yield x;\n    }\n  }\n  static * reverseIterator<T extends Node<T>>(head: T) {\n    for (let x = <T>head.prev0; x !== head; x = <T>x.prev0) {\n      yield x;\n    }\n  }\n  static initializeHead<T extends Node<T>>(head: T) {\n    head.next0 = head.prev0 = head;\n  }\n}\n","// DO NOT EDIT.  Generated from templates/neuroglancer/util/linked_list.template.ts.\n/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ninterface Node<T> {\n  next1: T|null;\n  prev1: T|null;\n}\n\nexport default class {\n  static insertAfter<T extends Node<T>>(head: T, x: T) {\n    let next = <T>head.next1;\n    x.next1 = next;\n    x.prev1 = head;\n    head.next1 = x;\n    next.prev1 = x;\n  }\n  static insertBefore<T extends Node<T>>(head: T, x: T) {\n    let prev = <T>head.prev1;\n    x.prev1 = prev;\n    x.next1 = head;\n    head.prev1 = x;\n    prev.next1 = x;\n  }\n  static front<T extends Node<T>>(head: T) {\n    let next = head.next1;\n    if (next === head) {\n      return null;\n    }\n    return next;\n  }\n  static back<T extends Node<T>>(head: T) {\n    let next = head.prev1;\n    if (next === head) {\n      return null;\n    }\n    return next;\n  }\n  static pop<T extends Node<T>>(x: T) {\n    let next = <T>x.next1;\n    let prev = <T>x.prev1;\n    next.prev1 = prev;\n    prev.next1 = next;\n    x.next1 = null;\n    x.prev1 = null;\n    return x;\n  }\n  static * iterator<T extends Node<T>>(head: T) {\n    for (let x = <T>head.next1; x !== head; x = <T>x.next1) {\n      yield x;\n    }\n  }\n  static * reverseIterator<T extends Node<T>>(head: T) {\n    for (let x = <T>head.prev1; x !== head; x = <T>x.prev1) {\n      yield x;\n    }\n  }\n  static initializeHead<T extends Node<T>>(head: T) {\n    head.next1 = head.prev1 = head;\n  }\n}\n","// DO NOT EDIT.  Generated from templates/neuroglancer/util/pairing_heap.template.ts.\n/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {PairingHeapOperations} from 'neuroglancer/util/pairing_heap';\n\ninterface Node<T> {\n  child0: T|null;\n  next0: T|null;\n  prev0: T|null;\n}\n\n/**\n * Pairing heap.\n *\n * The root node is the minimum element according to comparator.\n *\n * @final\n */\nexport default class Implementation<T extends Node<T>> implements PairingHeapOperations<T> {\n  /**\n   * @param compare Returns true iff a < b.\n   */\n  constructor(public compare: (a: T, b: T) => boolean) {}\n\n  meld(a: T|null, b: T|null) {\n    if (b === null) {\n      return a;\n    }\n    if (a === null) {\n      return b;\n    }\n    let {compare} = this;\n    if (compare(b, a)) {\n      let temp = a;\n      a = b;\n      b = temp;\n    }\n    var aChild = a.child0;\n    b.next0 = aChild;\n    b.prev0 = a;\n    if (aChild !== null) {\n      aChild.prev0 = b;\n    }\n    a.child0 = b;\n    return a;\n  }\n  private combineChildren(node: T) {\n    var cur = node.child0;\n    if (cur === null) {\n      return null;\n    }\n    // While in this function, we will use the nextProperty to create a\n    // singly-linked list of pairwise-merged nodes that still need to be\n    // merged together.\n    let head: T|null = null;\n    while (true) {\n      let curNext: T|null = cur.next0;\n      let next: T|null, m: T;\n      if (curNext === null) {\n        next = null;\n        m = cur;\n      } else {\n        next = curNext.next0;\n        m = this.meld(cur, curNext)!;\n      }\n      m.next0 = head;\n      head = m;\n      if (next === null) {\n        break;\n      }\n      cur = next;\n    }\n\n    var root = head;\n    head = head.next0;\n    while (true) {\n      if (head === null) {\n        break;\n      }\n      let next: T|null = head.next0;\n      root = this.meld(root, head)!;\n      head = next;\n    }\n    root.prev0 = null;\n    root.next0 = null;\n    return root;\n  }\n  removeMin(root: T) {\n    var newRoot = this.combineChildren(root);\n    root.next0 = null;\n    root.prev0 = null;\n    root.child0 = null;\n    return newRoot;\n  }\n\n  remove(root: T, node: T) {\n    if (root === node) {\n      return this.removeMin(root);\n    }\n    var prev = node.prev0!;\n    var next = node.next0!;\n    if (prev.child0 === node) {\n      prev.child0 = next;\n    } else {\n      prev.next0 = next;\n    }\n    if (next !== null) {\n      next.prev0 = prev;\n    }\n    let newRoot = this.meld(root, this.combineChildren(node));\n    node.next0 = null;\n    node.prev0 = null;\n    node.child0 = null;\n    return newRoot;\n  }\n\n  /**\n   * Returns a new iterator over the entries in the heap.\n   */\n  * entries(root: T): IterableIterator<T> {\n    if (root !== null) {\n      let child = root.child0;\n      yield root;\n      while (child !== null) {\n        let next: T|null = child.next0;\n        yield* this.entries(child);\n        child = next;\n      }\n    }\n  }\n\n  /**\n   * Returns a new iterator over the entries in the heap.  The entries\n   * will be removed as they are iterated.\n   */\n  * removedEntries(root: T): IterableIterator<T> {\n    if (root !== null) {\n      let child = root.child0;\n      root.child0 = null;\n      root.next0 = null;\n      root.prev0 = null;\n      yield root;\n      while (child !== null) {\n        let next: T|null = child.next0;\n        child.child0 = null;\n        child.next0 = null;\n        child.prev0 = null;\n        yield* this.entries(child);\n        child = next;\n      }\n    }\n  }\n}\n","// DO NOT EDIT.  Generated from templates/neuroglancer/util/pairing_heap.template.ts.\n/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {PairingHeapOperations} from 'neuroglancer/util/pairing_heap';\n\ninterface Node<T> {\n  child1: T|null;\n  next1: T|null;\n  prev1: T|null;\n}\n\n/**\n * Pairing heap.\n *\n * The root node is the minimum element according to comparator.\n *\n * @final\n */\nexport default class Implementation<T extends Node<T>> implements PairingHeapOperations<T> {\n  /**\n   * @param compare Returns true iff a < b.\n   */\n  constructor(public compare: (a: T, b: T) => boolean) {}\n\n  meld(a: T|null, b: T|null) {\n    if (b === null) {\n      return a;\n    }\n    if (a === null) {\n      return b;\n    }\n    let {compare} = this;\n    if (compare(b, a)) {\n      let temp = a;\n      a = b;\n      b = temp;\n    }\n    var aChild = a.child1;\n    b.next1 = aChild;\n    b.prev1 = a;\n    if (aChild !== null) {\n      aChild.prev1 = b;\n    }\n    a.child1 = b;\n    return a;\n  }\n  private combineChildren(node: T) {\n    var cur = node.child1;\n    if (cur === null) {\n      return null;\n    }\n    // While in this function, we will use the nextProperty to create a\n    // singly-linked list of pairwise-merged nodes that still need to be\n    // merged together.\n    let head: T|null = null;\n    while (true) {\n      let curNext: T|null = cur.next1;\n      let next: T|null, m: T;\n      if (curNext === null) {\n        next = null;\n        m = cur;\n      } else {\n        next = curNext.next1;\n        m = this.meld(cur, curNext)!;\n      }\n      m.next1 = head;\n      head = m;\n      if (next === null) {\n        break;\n      }\n      cur = next;\n    }\n\n    var root = head;\n    head = head.next1;\n    while (true) {\n      if (head === null) {\n        break;\n      }\n      let next: T|null = head.next1;\n      root = this.meld(root, head)!;\n      head = next;\n    }\n    root.prev1 = null;\n    root.next1 = null;\n    return root;\n  }\n  removeMin(root: T) {\n    var newRoot = this.combineChildren(root);\n    root.next1 = null;\n    root.prev1 = null;\n    root.child1 = null;\n    return newRoot;\n  }\n\n  remove(root: T, node: T) {\n    if (root === node) {\n      return this.removeMin(root);\n    }\n    var prev = node.prev1!;\n    var next = node.next1!;\n    if (prev.child1 === node) {\n      prev.child1 = next;\n    } else {\n      prev.next1 = next;\n    }\n    if (next !== null) {\n      next.prev1 = prev;\n    }\n    let newRoot = this.meld(root, this.combineChildren(node));\n    node.next1 = null;\n    node.prev1 = null;\n    node.child1 = null;\n    return newRoot;\n  }\n\n  /**\n   * Returns a new iterator over the entries in the heap.\n   */\n  * entries(root: T): IterableIterator<T> {\n    if (root !== null) {\n      let child = root.child1;\n      yield root;\n      while (child !== null) {\n        let next: T|null = child.next1;\n        yield* this.entries(child);\n        child = next;\n      }\n    }\n  }\n\n  /**\n   * Returns a new iterator over the entries in the heap.  The entries\n   * will be removed as they are iterated.\n   */\n  * removedEntries(root: T): IterableIterator<T> {\n    if (root !== null) {\n      let child = root.child1;\n      root.child1 = null;\n      root.next1 = null;\n      root.prev1 = null;\n      yield root;\n      while (child !== null) {\n        let next: T|null = child.next1;\n        child.child1 = null;\n        child.next1 = null;\n        child.prev1 = null;\n        yield* this.entries(child);\n        child = next;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CHUNK_MANAGER_RPC_ID, CHUNK_QUEUE_MANAGER_RPC_ID, CHUNK_SOURCE_INVALIDATE_RPC_ID, ChunkDownloadStatistics, ChunkMemoryStatistics, ChunkPriorityTier, ChunkSourceParametersConstructor, ChunkState, getChunkDownloadStatisticIndex, getChunkStateStatisticIndex, numChunkMemoryStatistics, numChunkStatistics, REQUEST_CHUNK_STATISTICS_RPC_ID} from 'neuroglancer/chunk_manager/base';\nimport {SharedWatchableValue} from 'neuroglancer/shared_watchable_value';\nimport {TypedArray} from 'neuroglancer/util/array';\nimport {CancellationToken, CancellationTokenSource} from 'neuroglancer/util/cancellation';\nimport {Disposable, RefCounted} from 'neuroglancer/util/disposable';\nimport {Borrowed} from 'neuroglancer/util/disposable';\nimport {LinkedListOperations} from 'neuroglancer/util/linked_list';\nimport LinkedList0 from 'neuroglancer/util/linked_list.0';\nimport LinkedList1 from 'neuroglancer/util/linked_list.1';\nimport {StringMemoize} from 'neuroglancer/util/memoize';\nimport {ComparisonFunction, PairingHeapOperations} from 'neuroglancer/util/pairing_heap';\nimport PairingHeap0 from 'neuroglancer/util/pairing_heap.0';\nimport PairingHeap1 from 'neuroglancer/util/pairing_heap.1';\nimport {NullarySignal} from 'neuroglancer/util/signal';\nimport {initializeSharedObjectCounterpart, registerPromiseRPC, registerRPC, registerSharedObject, registerSharedObjectOwner, RPC, SharedObject, SharedObjectCounterpart} from 'neuroglancer/worker_rpc';\n\nconst DEBUG_CHUNK_UPDATES = false;\n\nexport interface ChunkStateListener {\n  stateChanged(chunk: Chunk, oldState: ChunkState): void;\n}\n\nexport class Chunk implements Disposable {\n  // Node properties used for eviction/promotion heaps and LRU linked lists.\n  child0: Chunk|null = null;\n  next0: Chunk|null = null;\n  prev0: Chunk|null = null;\n  child1: Chunk|null = null;\n  next1: Chunk|null = null;\n  prev1: Chunk|null = null;\n\n  source: ChunkSource|null = null;\n\n  key: string|null = null;\n\n  private state_ = ChunkState.NEW;\n\n  error: any = null;\n\n  /**\n   * Specifies existing priority within priority tier.  Only meaningful if priorityTier in\n   * CHUNK_ORDERED_PRIORITY_TIERS.\n   */\n  priority = 0;\n\n  /**\n   * Specifies updated priority within priority tier, not yet reflected in priority queue state.\n   * Only meaningful if newPriorityTier in CHUNK_ORDERED_PRIORITY_TIERS.\n   */\n  newPriority = 0;\n\n  priorityTier = ChunkPriorityTier.RECENT;\n\n  /**\n   * Specifies updated priority tier, not yet reflected in priority queue state.\n   */\n  newPriorityTier = ChunkPriorityTier.RECENT;\n\n  private systemMemoryBytes_: number;\n  private gpuMemoryBytes_: number;\n  backendOnly = false;\n  isComputational = false;\n  newlyRequestedToFrontend = false;\n  requestedToFrontend = false;\n\n  /**\n   * Cancellation token used to cancel the pending download.  Set to undefined except when state !==\n   * DOWNLOADING.  This should not be accessed by code outside this module.\n   */\n  downloadCancellationToken: CancellationTokenSource|undefined = undefined;\n\n  initialize(key: string) {\n    this.key = key;\n    this.priority = Number.NEGATIVE_INFINITY;\n    this.priorityTier = ChunkPriorityTier.RECENT;\n    this.newPriority = Number.NEGATIVE_INFINITY;\n    this.newPriorityTier = ChunkPriorityTier.RECENT;\n    this.error = null;\n    this.state = ChunkState.NEW;\n    this.requestedToFrontend = false;\n    this.newlyRequestedToFrontend = false;\n  }\n\n  /**\n   * Sets this.priority{Tier,} to this.newPriority{Tier,}, and resets this.newPriorityTier to\n   * ChunkPriorityTier.RECENT.\n   *\n   * This does not actually update any queues to reflect this change.\n   */\n  updatePriorityProperties() {\n    this.priorityTier = this.newPriorityTier;\n    this.priority = this.newPriority;\n    this.newPriorityTier = ChunkPriorityTier.RECENT;\n    this.newPriority = Number.NEGATIVE_INFINITY;\n    this.requestedToFrontend = this.newlyRequestedToFrontend;\n  }\n\n  dispose() {\n    this.source = null;\n    this.error = null;\n  }\n\n  get chunkManager() {\n    return (<ChunkSource>this.source).chunkManager;\n  }\n\n  get queueManager() {\n    return (<ChunkSource>this.source).chunkManager.queueManager;\n  }\n\n  downloadFailed(error: any) {\n    this.error = error;\n    this.queueManager.updateChunkState(this, ChunkState.FAILED);\n  }\n\n  downloadSucceeded() {\n    this.queueManager.updateChunkState(this, ChunkState.SYSTEM_MEMORY_WORKER);\n  }\n\n  freeSystemMemory() {}\n\n  serialize(msg: any, _transfers: any[]) {\n    msg['id'] = this.key;\n    msg['source'] = (<ChunkSource>this.source).rpcId;\n    msg['new'] = true;\n  }\n\n  toString() {\n    return this.key;\n  }\n\n  set state(newState: ChunkState) {\n    if (newState === this.state_) {\n      return;\n    }\n    const oldState = this.state_;\n    this.state_ = newState;\n    this.source!.chunkStateChanged(this, oldState);\n  }\n\n  get state() {\n    return this.state_;\n  }\n\n  set systemMemoryBytes(bytes: number) {\n    updateChunkStatistics(this, -1);\n    this.chunkManager.queueManager.adjustCapacitiesForChunk(this, false);\n    this.systemMemoryBytes_ = bytes;\n    this.chunkManager.queueManager.adjustCapacitiesForChunk(this, true);\n    updateChunkStatistics(this, 1);\n    this.chunkManager.queueManager.scheduleUpdate();\n  }\n\n  get systemMemoryBytes() {\n    return this.systemMemoryBytes_;\n  }\n\n  set gpuMemoryBytes(bytes: number) {\n    updateChunkStatistics(this, -1);\n    this.chunkManager.queueManager.adjustCapacitiesForChunk(this, false);\n    this.gpuMemoryBytes_ = bytes;\n    this.chunkManager.queueManager.adjustCapacitiesForChunk(this, true);\n    updateChunkStatistics(this, 1);\n    this.chunkManager.queueManager.scheduleUpdate();\n  }\n\n  get gpuMemoryBytes() {\n    return this.gpuMemoryBytes_;\n  }\n\n  registerListener(listener: ChunkStateListener) {\n    if (!this.source) {\n      return false;\n    }\n    return this.source.registerChunkListener(this.key!, listener);\n  }\n\n  unregisterListener(listener: ChunkStateListener) {\n    if (!this.source) {\n      return false;\n    }\n    return this.source.unregisterChunkListener(this.key!, listener);\n  }\n\n  static priorityLess(a: Chunk, b: Chunk) {\n    return a.priority < b.priority;\n  }\n\n  static priorityGreater(a: Chunk, b: Chunk) {\n    return a.priority > b.priority;\n  }\n}\n\nexport interface ChunkConstructor<T extends Chunk> {\n  new(): T;\n}\n\nconst numSourceQueueLevels = 2;\n\n/**\n * Base class inherited by both ChunkSource, for implementing the backend part of chunk sources that\n * also have a frontend-part, as well as other chunk sources, such as the GenericFileSource, that\n * has only a backend part.\n */\nexport class ChunkSourceBase extends SharedObject {\n  private listeners_ = new Map<string, ChunkStateListener[]>();\n  chunks: Map<string, Chunk> = new Map<string, Chunk>();\n  freeChunks: Chunk[] = new Array<Chunk>();\n  statistics = new Float64Array(numChunkStatistics);\n\n  /**\n   * sourceQueueLevel must be greater than the sourceQueueLevel of any ChunkSource whose download\n   * method depends on chunks from this source.  A normal ChunkSource with no other dependencies\n   * should have a level of 0.\n   */\n  sourceQueueLevel = 0;\n\n  constructor(public chunkManager: Borrowed<ChunkManager>) {\n    super();\n    chunkManager.queueManager.sources.add(this);\n  }\n\n  disposed() {\n    this.chunkManager.queueManager.sources.delete(this);\n    super.disposed();\n  }\n\n  getNewChunk_<T extends Chunk>(chunkType: ChunkConstructor<T>): T {\n    let freeChunks = this.freeChunks;\n    let freeChunksLength = freeChunks.length;\n    if (freeChunksLength > 0) {\n      let chunk = <T>freeChunks[freeChunksLength - 1];\n      freeChunks.length = freeChunksLength - 1;\n      chunk.source = this;\n      return chunk;\n    }\n    let chunk = new chunkType();\n    chunk.source = this;\n    return chunk;\n  }\n\n  /**\n   * Adds the specified chunk to the chunk cache.\n   *\n   * If the chunk cache was previously empty, also call this.addRef() to increment the reference\n   * count.\n   */\n  addChunk(chunk: Chunk) {\n    let {chunks} = this;\n    if (chunks.size === 0) {\n      this.addRef();\n    }\n    chunks.set(chunk.key!, chunk);\n    updateChunkStatistics(chunk, 1);\n  }\n\n  /**\n   * Remove the specified chunk from the chunk cache.\n   *\n   * If the chunk cache becomes empty, also call this.dispose() to decrement the reference count.\n   */\n  removeChunk(chunk: Chunk) {\n    let {chunks, freeChunks} = this;\n    chunks.delete(chunk.key!);\n    chunk.dispose();\n    freeChunks[freeChunks.length] = chunk;\n    if (chunks.size === 0) {\n      this.dispose();\n    }\n  }\n\n  registerChunkListener(key: string, listener: ChunkStateListener) {\n    if (!this.listeners_.has(key)) {\n      this.listeners_.set(key, [listener]);\n    } else {\n      this.listeners_.get(key)!.push(listener);\n    }\n    return true;\n  }\n\n  unregisterChunkListener(key: string, listener: ChunkStateListener) {\n    if (!this.listeners_.has(key)) {\n      return false;\n    }\n    const keyListeners = this.listeners_.get(key)!;\n    const idx = keyListeners.indexOf(listener);\n    if (idx < 0) {\n      return false;\n    }\n    keyListeners.splice(idx, 1);\n    if (keyListeners.length === 0) {\n      this.listeners_.delete(key);\n    }\n    return true;\n  }\n\n  chunkStateChanged(chunk: Chunk, oldState: ChunkState) {\n    if (!chunk.key) {\n      return;\n    }\n    if (!this.listeners_.has(chunk.key)) {\n      return;\n    }\n    for (const listener of [...this.listeners_.get(chunk.key)!]) {\n      listener.stateChanged(chunk, oldState);\n    }\n  }\n}\n\nfunction updateChunkStatistics(chunk: Chunk, sign: number) {\n  const {statistics} = chunk.source!;\n  const {systemMemoryBytes, gpuMemoryBytes} = chunk;\n  const index = getChunkStateStatisticIndex(chunk.state, chunk.priorityTier);\n  statistics[index * numChunkMemoryStatistics + ChunkMemoryStatistics.numChunks] += sign;\n  statistics[index * numChunkMemoryStatistics + ChunkMemoryStatistics.systemMemoryBytes] +=\n      sign * systemMemoryBytes;\n  statistics[index * numChunkMemoryStatistics + ChunkMemoryStatistics.gpuMemoryBytes] +=\n      sign * gpuMemoryBytes;\n}\n\nexport interface ChunkSourceBase {\n  /**\n   * Begin downloading the specified the chunk.  The returned promise should resolve when the\n   * downloaded data has been successfully decoded and stored in the chunk, or rejected if the\n   * download or decoding fails.\n   *\n   * Note: This method must be defined by subclasses.\n   *\n   * @param chunk Chunk to download.\n   * @param cancellationToken If this token is canceled, the download/decoding should be aborted if\n   * possible.\n   *\n   * TODO(jbms): Move this back to the class definition above and declare this abstract once mixins\n   * are compatible with abstract classes.\n   */\n  download(chunk: Chunk, cancellationToken: CancellationToken): Promise<void>;\n}\n\nexport class ChunkSource extends ChunkSourceBase {\n  constructor(rpc: RPC, options: any) {\n    // No need to add a reference, since the owner counterpart will hold a reference to the owner\n    // counterpart of chunkManager.\n    const chunkManager = <ChunkManager>rpc.get(options['chunkManager']);\n    super(chunkManager);\n    initializeSharedObjectCounterpart(this, rpc, options);\n  }\n}\n\nfunction startChunkDownload(chunk: Chunk) {\n  const downloadCancellationToken = chunk.downloadCancellationToken = new CancellationTokenSource();\n  const startTime = Date.now();\n  chunk.source!.download(chunk, downloadCancellationToken)\n      .then(\n          () => {\n            if (chunk.downloadCancellationToken === downloadCancellationToken) {\n              chunk.downloadCancellationToken = undefined;\n              const endTime = Date.now();\n              const {statistics} = chunk.source!;\n              statistics[getChunkDownloadStatisticIndex(ChunkDownloadStatistics.totalTime)] +=\n                  (endTime - startTime);\n              ++statistics[getChunkDownloadStatisticIndex(ChunkDownloadStatistics.totalChunks)];\n              chunk.downloadSucceeded();\n            }\n          },\n          (error: any) => {\n            if (chunk.downloadCancellationToken === downloadCancellationToken) {\n              chunk.downloadCancellationToken = undefined;\n              chunk.downloadFailed(error);\n              console.log(`Error retrieving chunk ${chunk}: ${error}`);\n            }\n          });\n}\n\nfunction cancelChunkDownload(chunk: Chunk) {\n  const token = chunk.downloadCancellationToken!;\n  chunk.downloadCancellationToken = undefined;\n  token.cancel();\n}\n\nclass ChunkPriorityQueue {\n  /**\n   * Heap roots for VISIBLE and PREFETCH priority tiers.\n   */\n  private heapRoots: (Chunk|null)[] = [null, null];\n\n  /**\n   * Head node for RECENT linked list.\n   */\n  private recentHead = new Chunk();\n  constructor(\n      private heapOperations: PairingHeapOperations<Chunk>,\n      private linkedListOperations: LinkedListOperations<Chunk>) {\n    linkedListOperations.initializeHead(this.recentHead);\n  }\n\n  add(chunk: Chunk) {\n    let priorityTier = chunk.priorityTier;\n    if (priorityTier === ChunkPriorityTier.RECENT) {\n      this.linkedListOperations.insertAfter(this.recentHead, chunk);\n    } else {\n      let {heapRoots} = this;\n      heapRoots[priorityTier] = this.heapOperations.meld(heapRoots[priorityTier], chunk);\n    }\n  }\n\n  * candidates(): Iterator<Chunk> {\n    if (this.heapOperations.compare === Chunk.priorityLess) {\n      // Start with least-recently used RECENT chunk.\n      let {linkedListOperations, recentHead} = this;\n      while (true) {\n        let chunk = linkedListOperations.back(recentHead);\n        if (chunk == null) {\n          break;\n        } else {\n          yield chunk;\n        }\n      }\n      let {heapRoots} = this;\n      for (let tier = ChunkPriorityTier.LAST_ORDERED_TIER;\n           tier >= ChunkPriorityTier.FIRST_ORDERED_TIER; --tier) {\n        while (true) {\n          let root = heapRoots[tier];\n          if (root == null) {\n            break;\n          } else {\n            yield root;\n          }\n        }\n      }\n    } else {\n      let heapRoots = this.heapRoots;\n      for (let tier = ChunkPriorityTier.FIRST_ORDERED_TIER;\n           tier <= ChunkPriorityTier.LAST_ORDERED_TIER; ++tier) {\n        while (true) {\n          let root = heapRoots[tier];\n          if (root == null) {\n            break;\n          } else {\n            yield root;\n          }\n        }\n      }\n      let {linkedListOperations, recentHead} = this;\n      while (true) {\n        let chunk = linkedListOperations.front(recentHead);\n        if (chunk == null) {\n          break;\n        } else {\n          yield chunk;\n        }\n      }\n    }\n  }\n\n  /**\n   * Deletes a chunk from this priority queue.\n   * @param chunk The chunk to delete from the priority queue.\n   */\n  delete(chunk: Chunk) {\n    let priorityTier = chunk.priorityTier;\n    if (priorityTier === ChunkPriorityTier.RECENT) {\n      this.linkedListOperations.pop(chunk);\n    } else {\n      let heapRoots = this.heapRoots;\n      heapRoots[priorityTier] = this.heapOperations.remove(<Chunk>heapRoots[priorityTier], chunk);\n    }\n  }\n}\n\nfunction makeChunkPriorityQueue0(compare: ComparisonFunction<Chunk>) {\n  return new ChunkPriorityQueue(new PairingHeap0(compare), LinkedList0);\n}\n\nfunction makeChunkPriorityQueue1(compare: ComparisonFunction<Chunk>) {\n  return new ChunkPriorityQueue(new PairingHeap1(compare), LinkedList1);\n}\n\nfunction tryToFreeCapacity(\n    size: number, capacity: AvailableCapacity, priorityTier: ChunkPriorityTier, priority: number,\n    evictionCandidates: Iterator<Chunk>, evict: (chunk: Chunk) => void) {\n  while (capacity.availableItems < 1 || capacity.availableSize < size) {\n    let evictionCandidate = evictionCandidates.next().value;\n    if (evictionCandidate === undefined) {\n      // No eviction candidates available, promotions are done.\n      return false;\n    } else {\n      let evictionTier = evictionCandidate.priorityTier;\n      if (evictionTier < priorityTier ||\n          (evictionTier === priorityTier && evictionCandidate.priority >= priority)) {\n        // Lowest priority eviction candidate has priority >= highest\n        // priority promotion candidate.  No more promotions are\n        // possible.\n        return false;\n      }\n      evict(evictionCandidate);\n    }\n  }\n  return true;\n}\n\nclass AvailableCapacity extends RefCounted {\n  currentSize: number = 0;\n  currentItems: number = 0;\n\n  capacityChanged = new NullarySignal();\n\n  constructor(\n      public itemLimit: Borrowed<SharedWatchableValue<number>>,\n      public sizeLimit: Borrowed<SharedWatchableValue<number>>) {\n    super();\n    this.registerDisposer(itemLimit.changed.add(this.capacityChanged.dispatch));\n    this.registerDisposer(sizeLimit.changed.add(this.capacityChanged.dispatch));\n  }\n\n  /**\n   * Adjust available capacity by the specified amounts.\n   */\n  adjust(items: number, size: number) {\n    this.currentItems -= items;\n    this.currentSize -= size;\n  }\n\n  get availableSize() {\n    return this.sizeLimit.value - this.currentSize;\n  }\n  get availableItems() {\n    return this.itemLimit.value - this.currentItems;\n  }\n}\n\n@registerSharedObject(CHUNK_QUEUE_MANAGER_RPC_ID)\nexport class ChunkQueueManager extends SharedObjectCounterpart {\n  gpuMemoryCapacity: AvailableCapacity;\n  systemMemoryCapacity: AvailableCapacity;\n\n  /**\n   * Download capacity for each sourceQueueLevel.\n   */\n  downloadCapacity: AvailableCapacity[];\n  computeCapacity: AvailableCapacity;\n\n  /**\n   * Set of chunk sources associated with this queue manager.\n   */\n  sources = new Set<Borrowed<ChunkSource>>();\n\n  /**\n   * Contains all chunks in QUEUED state pending download, for each sourceQueueLevel.\n   */\n  private queuedDownloadPromotionQueue = [\n    makeChunkPriorityQueue1(Chunk.priorityGreater),\n    makeChunkPriorityQueue1(Chunk.priorityGreater),\n  ];\n\n  /**\n   * Contains all chunks in QUEUED state pending compute.\n   */\n  private queuedComputePromotionQueue = makeChunkPriorityQueue1(Chunk.priorityGreater);\n\n  /**\n   * Contains all chunks in DOWNLOADING state, for each sourceQueueLevel.\n   */\n  private downloadEvictionQueue = [\n    makeChunkPriorityQueue1(Chunk.priorityLess),\n    makeChunkPriorityQueue1(Chunk.priorityLess),\n  ];\n\n  /**\n   * Contains all chunks in COMPUTING state.\n   */\n  private computeEvictionQueue = makeChunkPriorityQueue1(Chunk.priorityLess);\n\n  /**\n   * Contains all chunks that take up memory (DOWNLOADING, SYSTEM_MEMORY,\n   * GPU_MEMORY).\n   */\n  private systemMemoryEvictionQueue = makeChunkPriorityQueue0(Chunk.priorityLess);\n\n  /**\n   * Contains all chunks in SYSTEM_MEMORY state not in RECENT priority tier.\n   */\n  private gpuMemoryPromotionQueue = makeChunkPriorityQueue1(Chunk.priorityGreater);\n\n  /**\n   * Contains all chunks in GPU_MEMORY state.\n   */\n  private gpuMemoryEvictionQueue = makeChunkPriorityQueue1(Chunk.priorityLess);\n\n  private updatePending: number|null = null;\n\n  private numQueued = 0;\n  private numFailed = 0;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    const getCapacity = (capacity: any) => {\n      const result = this.registerDisposer(\n          new AvailableCapacity(rpc.get(capacity['itemLimit']), rpc.get(capacity['sizeLimit'])));\n      result.capacityChanged.add(() => this.scheduleUpdate());\n      return result;\n    };\n    this.gpuMemoryCapacity = getCapacity(options['gpuMemoryCapacity']);\n    this.systemMemoryCapacity = getCapacity(options['systemMemoryCapacity']);\n    this.downloadCapacity = [\n      getCapacity(options['downloadCapacity']),\n      getCapacity(options['downloadCapacity']),\n    ];\n    this.computeCapacity = getCapacity(options['computeCapacity']);\n  }\n\n  scheduleUpdate() {\n    if (this.updatePending === null) {\n      this.updatePending = setTimeout(this.process.bind(this), 0);\n    }\n  }\n\n  * chunkQueuesForChunk(chunk: Chunk) {\n    switch (chunk.state) {\n      case ChunkState.QUEUED:\n        if (chunk.isComputational) {\n          yield this.queuedComputePromotionQueue;\n        } else {\n          yield this.queuedDownloadPromotionQueue[chunk.source!.sourceQueueLevel];\n        }\n        break;\n\n      case ChunkState.DOWNLOADING:\n        if (chunk.isComputational) {\n          yield this.computeEvictionQueue;\n        } else {\n          yield this.downloadEvictionQueue[chunk.source!.sourceQueueLevel];\n          yield this.systemMemoryEvictionQueue;\n        }\n        break;\n\n      case ChunkState.SYSTEM_MEMORY_WORKER:\n      case ChunkState.SYSTEM_MEMORY:\n        yield this.systemMemoryEvictionQueue;\n        if (chunk.priorityTier !== ChunkPriorityTier.RECENT && !chunk.backendOnly &&\n            chunk.requestedToFrontend) {\n          yield this.gpuMemoryPromotionQueue;\n        }\n        break;\n\n      case ChunkState.GPU_MEMORY:\n        yield this.systemMemoryEvictionQueue;\n        yield this.gpuMemoryEvictionQueue;\n        break;\n    }\n  }\n\n  adjustCapacitiesForChunk(chunk: Chunk, add: boolean) {\n    let factor = add ? -1 : 1;\n    switch (chunk.state) {\n      case ChunkState.FAILED:\n        this.numFailed -= factor;\n        break;\n\n      case ChunkState.QUEUED:\n        this.numQueued -= factor;\n        break;\n\n      case ChunkState.DOWNLOADING:\n        (chunk.isComputational ? this.computeCapacity :\n                                 this.downloadCapacity[chunk.source!.sourceQueueLevel])\n            .adjust(factor, factor * chunk.systemMemoryBytes);\n        this.systemMemoryCapacity.adjust(factor, factor * chunk.systemMemoryBytes);\n        break;\n\n      case ChunkState.SYSTEM_MEMORY:\n      case ChunkState.SYSTEM_MEMORY_WORKER:\n        this.systemMemoryCapacity.adjust(factor, factor * chunk.systemMemoryBytes);\n        break;\n\n      case ChunkState.GPU_MEMORY:\n        this.systemMemoryCapacity.adjust(factor, factor * chunk.systemMemoryBytes);\n        this.gpuMemoryCapacity.adjust(factor, factor * chunk.gpuMemoryBytes);\n        break;\n    }\n  }\n\n  private removeChunkFromQueues_(chunk: Chunk) {\n    updateChunkStatistics(chunk, -1);\n    for (let queue of this.chunkQueuesForChunk(chunk)) {\n      queue.delete(chunk);\n    }\n  }\n\n  // var freedChunks = 0;\n  private addChunkToQueues_(chunk: Chunk) {\n    if (chunk.state === ChunkState.QUEUED && chunk.priorityTier === ChunkPriorityTier.RECENT) {\n      // Delete this chunk.\n      let {source} = chunk;\n      source!.removeChunk(chunk);\n      this.adjustCapacitiesForChunk(chunk, false);\n      return false;\n    } else {\n      updateChunkStatistics(chunk, 1);\n      for (let queue of this.chunkQueuesForChunk(chunk)) {\n        queue.add(chunk);\n      }\n      return true;\n    }\n  }\n\n  performChunkPriorityUpdate(chunk: Chunk) {\n    if (chunk.priorityTier === chunk.newPriorityTier && chunk.priority === chunk.newPriority) {\n      chunk.newPriorityTier = ChunkPriorityTier.RECENT;\n      chunk.newPriority = Number.NEGATIVE_INFINITY;\n      return;\n    }\n    if (DEBUG_CHUNK_UPDATES) {\n      console.log(\n          `${chunk}: changed priority ${chunk.priorityTier}:` +\n          `${chunk.priority} -> ${chunk.newPriorityTier}:${chunk.newPriority}`);\n    }\n    this.removeChunkFromQueues_(chunk);\n    chunk.updatePriorityProperties();\n    if (chunk.state === ChunkState.NEW) {\n      chunk.state = ChunkState.QUEUED;\n      this.adjustCapacitiesForChunk(chunk, true);\n    }\n    this.addChunkToQueues_(chunk);\n  }\n\n  updateChunkState(chunk: Chunk, newState: ChunkState) {\n    if (newState === chunk.state) {\n      return;\n    }\n    if (DEBUG_CHUNK_UPDATES) {\n      console.log(`${chunk}: changed state ${chunk.state} -> ${newState}`);\n    }\n    this.adjustCapacitiesForChunk(chunk, false);\n    this.removeChunkFromQueues_(chunk);\n    chunk.state = newState;\n    this.adjustCapacitiesForChunk(chunk, true);\n    this.addChunkToQueues_(chunk);\n    this.scheduleUpdate();\n  }\n\n  private processGPUPromotions_() {\n    let queueManager = this;\n    function evictFromGPUMemory(chunk: Chunk) {\n      queueManager.freeChunkGPUMemory(chunk);\n      chunk.source!.chunkManager.queueManager.updateChunkState(chunk, ChunkState.SYSTEM_MEMORY);\n    }\n    let promotionCandidates = this.gpuMemoryPromotionQueue.candidates();\n    let evictionCandidates = this.gpuMemoryEvictionQueue.candidates();\n    let capacity = this.gpuMemoryCapacity;\n    while (true) {\n      let promotionCandidate = promotionCandidates.next().value;\n      if (promotionCandidate === undefined) {\n        break;\n      } else {\n        let priorityTier = promotionCandidate.priorityTier;\n        let priority = promotionCandidate.priority;\n        if (!tryToFreeCapacity(\n                promotionCandidate.gpuMemoryBytes, capacity, priorityTier, priority,\n                evictionCandidates, evictFromGPUMemory)) {\n          break;\n        }\n        this.copyChunkToGPU(promotionCandidate);\n        this.updateChunkState(promotionCandidate, ChunkState.GPU_MEMORY);\n      }\n    }\n  }\n\n  freeChunkGPUMemory(chunk: Chunk) {\n    this.rpc!.invoke(\n        'Chunk.update',\n        {'id': chunk.key, 'state': ChunkState.SYSTEM_MEMORY, 'source': chunk.source!.rpcId});\n  }\n\n  freeChunkSystemMemory(chunk: Chunk) {\n    if (chunk.state === ChunkState.SYSTEM_MEMORY_WORKER) {\n      chunk.freeSystemMemory();\n    } else {\n      this.rpc!.invoke(\n          'Chunk.update',\n          {'id': chunk.key, 'state': ChunkState.EXPIRED, 'source': chunk.source!.rpcId});\n    }\n  }\n\n  retrieveChunkData(chunk: Chunk) {\n    return this.rpc!.promiseInvoke<TypedArray>(\n        'Chunk.retrieve', {key: chunk.key!, source: chunk.source!.rpcId});\n  }\n\n  copyChunkToGPU(chunk: Chunk) {\n    let rpc = this.rpc!;\n    if (chunk.state === ChunkState.SYSTEM_MEMORY) {\n      rpc.invoke(\n          'Chunk.update',\n          {'id': chunk.key, 'source': chunk.source!.rpcId, 'state': ChunkState.GPU_MEMORY});\n    } else {\n      let msg: any = {};\n      let transfers: any[] = [];\n      chunk.serialize(msg, transfers);\n      msg['state'] = ChunkState.GPU_MEMORY;\n      rpc.invoke('Chunk.update', msg, transfers);\n    }\n  }\n\n  private processQueuePromotions_() {\n    let queueManager = this;\n    const evict = (chunk: Chunk) => {\n      switch (chunk.state) {\n        case ChunkState.DOWNLOADING:\n          cancelChunkDownload(chunk);\n          break;\n        case ChunkState.GPU_MEMORY:\n          queueManager.freeChunkGPUMemory(chunk);\n        case ChunkState.SYSTEM_MEMORY_WORKER:\n        case ChunkState.SYSTEM_MEMORY:\n          queueManager.freeChunkSystemMemory(chunk);\n          break;\n      }\n      // Note: After calling this, chunk may no longer be valid.\n      this.updateChunkState(chunk, ChunkState.QUEUED);\n    };\n\n    const promotionLambda =\n        (promotionCandidates: Iterator<Chunk>, evictionCandidates: Iterator<Chunk>,\n         capacity: AvailableCapacity) => {\n          let systemMemoryEvictionCandidates = this.systemMemoryEvictionQueue.candidates();\n          let systemMemoryCapacity = this.systemMemoryCapacity;\n          while (true) {\n            let promotionCandidateResult = promotionCandidates.next();\n            if (promotionCandidateResult.done) {\n              return;\n            }\n            let promotionCandidate = promotionCandidateResult.value;\n            const size = 0; /* unknown size, since it hasn't been downloaded yet. */\n            let priorityTier = promotionCandidate.priorityTier;\n            let priority = promotionCandidate.priority;\n            // console.log(\"Download capacity: \" + downloadCapacity);\n            if (!tryToFreeCapacity(\n                    size, capacity, priorityTier, priority, evictionCandidates, evict)) {\n              return;\n            }\n            if (!tryToFreeCapacity(\n                    size, systemMemoryCapacity, priorityTier, priority,\n                    systemMemoryEvictionCandidates, evict)) {\n              return;\n            }\n            this.updateChunkState(promotionCandidate, ChunkState.DOWNLOADING);\n            startChunkDownload(promotionCandidate);\n          }\n        };\n\n    for (let sourceQueueLevel = 0; sourceQueueLevel < numSourceQueueLevels; ++sourceQueueLevel) {\n      promotionLambda(\n          this.queuedDownloadPromotionQueue[sourceQueueLevel].candidates(),\n          this.downloadEvictionQueue[sourceQueueLevel].candidates(),\n          this.downloadCapacity[sourceQueueLevel]);\n    }\n    promotionLambda(\n        this.queuedComputePromotionQueue.candidates(), this.computeEvictionQueue.candidates(),\n        this.computeCapacity);\n  }\n\n  process() {\n    if (!this.updatePending) {\n      return;\n    }\n    this.updatePending = null;\n    this.processGPUPromotions_();\n    this.processQueuePromotions_();\n    this.logStatistics();\n  }\n\n  logStatistics() {\n    if (DEBUG_CHUNK_UPDATES) {\n      console.log(\n          `[Chunk status] QUEUED: ${this.numQueued}, FAILED: ` +\n          `${this.numFailed}, DOWNLOAD: ${this.downloadCapacity}, ` +\n          `MEM: ${this.systemMemoryCapacity}, GPU: ${this.gpuMemoryCapacity}`);\n    }\n  }\n\n  invalidateSourceCache(source: ChunkSource) {\n    for (const chunk of source.chunks.values()) {\n      switch (chunk.state) {\n        case ChunkState.DOWNLOADING:\n          cancelChunkDownload(chunk);\n          break;\n        case ChunkState.SYSTEM_MEMORY_WORKER:\n          chunk.freeSystemMemory();\n          break;\n      }\n      // Note: After calling this, chunk may no longer be valid.\n      this.updateChunkState(chunk, ChunkState.QUEUED);\n    }\n    this.rpc!.invoke('Chunk.update', {'source': source.rpcId});\n    this.scheduleUpdate();\n  }\n}\n\n@registerSharedObject(CHUNK_MANAGER_RPC_ID)\nexport class ChunkManager extends SharedObjectCounterpart {\n  queueManager: ChunkQueueManager;\n\n  /**\n   * Array of chunks within each existing priority tier.\n   */\n  private existingTierChunks: Chunk[][] = [];\n\n  /**\n   * Array of chunks whose new priorities have not yet been reflected in the\n   * queue states.\n   */\n  private newTierChunks: Chunk[] = [];\n\n  private updatePending: number|null = null;\n\n  recomputeChunkPriorities = new NullarySignal();\n\n  /**\n   * Dispatched immediately after recomputeChunkPriorities is dispatched.\n   * This signal should be used for handlers that depend on the result of another handler.\n   */\n  recomputeChunkPrioritiesLate = new NullarySignal();\n\n  memoize = new StringMemoize();\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.queueManager = (<ChunkQueueManager>rpc.get(options['chunkQueueManager'])).addRef();\n\n    for (let tier = ChunkPriorityTier.FIRST_TIER; tier <= ChunkPriorityTier.LAST_TIER; ++tier) {\n      if (tier === ChunkPriorityTier.RECENT) {\n        continue;\n      }\n      this.existingTierChunks[tier] = [];\n    }\n  }\n\n  scheduleUpdateChunkPriorities() {\n    if (this.updatePending === null) {\n      this.updatePending = setTimeout(this.recomputeChunkPriorities_.bind(this), 0);\n    }\n  }\n\n  private recomputeChunkPriorities_() {\n    this.updatePending = null;\n    this.recomputeChunkPriorities.dispatch();\n    this.recomputeChunkPrioritiesLate.dispatch();\n    this.updateQueueState([ChunkPriorityTier.VISIBLE]);\n  }\n\n  /**\n   * @param chunk\n   * @param tier New priority tier.  Must not equal ChunkPriorityTier.RECENT.\n   * @param priority Priority within tier.\n   * @param toFrontend true if the chunk should be moved to the frontend when ready.\n   */\n  requestChunk(chunk: Chunk, tier: ChunkPriorityTier, priority: number, toFrontend = true) {\n    if (tier === ChunkPriorityTier.RECENT) {\n      throw new Error('Not going to request a chunk with the RECENT tier');\n    }\n    chunk.newlyRequestedToFrontend = chunk.newlyRequestedToFrontend || toFrontend;\n    if (chunk.newPriorityTier === ChunkPriorityTier.RECENT) {\n      this.newTierChunks.push(chunk);\n    }\n    const newPriorityTier = chunk.newPriorityTier;\n    if (tier < newPriorityTier || (tier === newPriorityTier && priority > chunk.newPriority)) {\n      chunk.newPriorityTier = tier;\n      chunk.newPriority = priority;\n    }\n  }\n\n  /**\n   * Update queue state to reflect updated contents of the specified priority tiers.  Existing\n   * chunks within those tiers not present in this.newTierChunks will be moved to the RECENT tier\n   * (and removed if in the QUEUED state).\n   */\n  updateQueueState(tiers: ChunkPriorityTier[]) {\n    let existingTierChunks = this.existingTierChunks;\n    let queueManager = this.queueManager;\n    for (let tier of tiers) {\n      let chunks = existingTierChunks[tier];\n      for (let chunk of chunks) {\n        if (chunk.newPriorityTier === ChunkPriorityTier.RECENT) {\n          // Downgrade the priority of this chunk.\n          queueManager.performChunkPriorityUpdate(chunk);\n        }\n      }\n      chunks.length = 0;\n    }\n    let newTierChunks = this.newTierChunks;\n    for (let chunk of newTierChunks) {\n      queueManager.performChunkPriorityUpdate(chunk);\n      existingTierChunks[chunk.priorityTier].push(chunk);\n    }\n    if (DEBUG_CHUNK_UPDATES) {\n      console.log(`updateQueueState: newTierChunks.length = ${newTierChunks.length}`);\n    }\n    newTierChunks.length = 0;\n    this.queueManager.scheduleUpdate();\n  }\n}\n\n\n/**\n * Mixin for adding a `parameters` member to a ChunkSource, and for registering the shared object\n * type based on the `RPC_ID` member of the Parameters class.\n */\nexport function WithParameters<Parameters, TBase extends {new (...args: any[]): SharedObject}>(\n    Base: TBase, parametersConstructor: ChunkSourceParametersConstructor<Parameters>) {\n  @registerSharedObjectOwner(parametersConstructor.RPC_ID)\n  class C extends Base {\n    parameters: Parameters;\n    constructor(...args: any[]) {\n      super(...args);\n      const options = args[1];\n      this.parameters = options['parameters'];\n    }\n  }\n  return C;\n}\n\n/**\n * Interface that represents shared objects that request chunks from a ChunkManager.\n */\nexport interface ChunkRequester extends SharedObject {\n  chunkManager: ChunkManager;\n}\n\n/**\n * Mixin that adds a chunkManager property initialized from the RPC-supplied options.\n *\n * The resultant class implements `ChunkRequester`.\n */\nexport function withChunkManager<T extends {new (...args: any[]): SharedObject}>(Base: T) {\n  return class extends Base implements ChunkRequester {\n    chunkManager: ChunkManager;\n    constructor(...args: any[]) {\n      super(...args);\n      const rpc: RPC = args[0];\n      const options = args[1];\n      // We don't increment the reference count, because our owner owns a reference to the\n      // ChunkManager.\n      this.chunkManager = <ChunkManager>rpc.get(options['chunkManager']);\n    }\n  };\n}\n\nregisterRPC(CHUNK_SOURCE_INVALIDATE_RPC_ID, function(x) {\n  const source = <ChunkSource>this.get(x['id']);\n  source.chunkManager.queueManager.invalidateSourceCache(source);\n});\n\nregisterPromiseRPC(REQUEST_CHUNK_STATISTICS_RPC_ID, function(x: {queue: number}) {\n  const queue = this.get(x.queue) as ChunkQueueManager;\n  const results = new Map<number, Float64Array>();\n  for (const source of queue.sources) {\n    results.set(source.rpcId!, source.statistics);\n  }\n  return Promise.resolve({value: results});\n});\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CancellationToken, uncancelableToken} from 'neuroglancer/util/cancellation';\nimport {Uint64} from 'neuroglancer/util/uint64';\n\nexport class HttpError extends Error {\n  url: string;\n  status: number;\n  statusText: string;\n\n  constructor(url: string, status: number, statusText: string) {\n    let message = `Fetching ${JSON.stringify(url)} resulted in HTTP error ${status}`;\n    if (statusText) {\n      message += `: ${statusText}`;\n    }\n    message += '.';\n    super(message);\n    this.name = 'HttpError';\n    this.message = message;\n    this.url = url;\n    this.status = status;\n    this.statusText = statusText;\n  }\n\n  static fromResponse(response: Response) {\n    return new HttpError(response.url, response.status, response.statusText);\n  }\n}\n\n/**\n * Issues a `fetch` request.\n *\n * If the request fails due to an HTTP status outside `[200, 300)`, throws an `HttpError`.  If the\n * request fails due to a network or CORS restriction, throws an `HttpError` with a `status` of `0`.\n */\nexport async function fetchOk(input: RequestInfo, init?: RequestInit): Promise<Response> {\n  let response: Response;\n  try {\n    response = await fetch(input, init);\n  } catch (error) {\n    if (error instanceof TypeError) {\n      throw new HttpError('', 0, '');\n    }\n    throw error;\n  }\n  if (!response.ok) throw HttpError.fromResponse(response);\n  return response;\n}\n\nexport function responseArrayBuffer(response: Response): Promise<ArrayBuffer> {\n  return response.arrayBuffer();\n}\n\nexport function responseJson(response: Response): Promise<any> {\n  return response.json();\n}\n\nexport type ResponseTransform<T> = (response: Response) => Promise<T>;\n\n/**\n * Issues a `fetch` request in the same way as `fetchOk`, and returns the result of the promise\n * returned by `transformResponse`.\n *\n * Additionally, the request may be cancelled through `cancellationToken`.\n *\n * The `transformResponse` function should not do anything with the `Response` object after its\n * result becomes ready; otherwise, cancellation may not work as expected.\n */\nexport async function cancellableFetchOk<T>(\n    input: RequestInfo, init: RequestInit, transformResponse: ResponseTransform<T>,\n    cancellationToken: CancellationToken = uncancelableToken): Promise<T> {\n  if (cancellationToken === uncancelableToken) {\n    const response = await fetchOk(input, init);\n    return await transformResponse(response);\n  }\n  const abortController = new AbortController();\n  const unregisterCancellation = cancellationToken.add(() => abortController.abort());\n  try {\n    const response = await fetchOk(input, init);\n    return await transformResponse(response);\n  } finally {\n    unregisterCancellation();\n  }\n}\n\nconst tempUint64 = new Uint64();\n\nexport function getByteRangeHeader(startOffset: Uint64|number, endOffset: Uint64|number) {\n  let endOffsetStr: string;\n  if (typeof endOffset === 'number') {\n    endOffsetStr = `${endOffset - 1}`;\n  } else {\n    Uint64.decrement(tempUint64, endOffset);\n    endOffsetStr = tempUint64.toString();\n  }\n  return {'Range': `bytes=${startOffset}-${endOffsetStr}`};\n}\n\n/**\n * Parses a URL that may have a special protocol designation into a real URL.\n *\n * If the protocol is 'http' or 'https', the input string is returned as is.\n *\n * The special 'gs://bucket/path' syntax is supported for accessing Google Storage buckets.\n */\nexport function parseSpecialUrl(url: string): string {\n  const urlProtocolPattern = /^([^:\\/]+):\\/\\/([^\\/]+)(\\/.*)?$/;\n  let match = url.match(urlProtocolPattern);\n  if (match === null) {\n    throw new Error(`Invalid URL: ${JSON.stringify(url)}`);\n  }\n  const protocol = match[1];\n  if (protocol === 'gs') {\n    const bucket = match[2];\n    let path = match[3];\n    if (path === undefined) path = '';\n    return `https://storage.googleapis.com/${bucket}${path}`;\n  }\n  return url;\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Facilities for endianness detection and swapping.\n */\n\nexport enum Endianness {\n  LITTLE = 0,\n  BIG = 1\n}\n\nexport function determineEndianness() {\n  const a = Uint16Array.of(0x1122);\n  const b = new Uint8Array(a.buffer);\n  return b[0] === 0x11 ? Endianness.BIG : Endianness.LITTLE;\n}\n\n/**\n * The native endianness of the runtime.\n */\nexport const ENDIANNESS = determineEndianness();\n\n/**\n * Swaps the endianness of an array assumed to contain 16-bit values.\n */\nexport function swapEndian16(array: ArrayBufferView) {\n  let view = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n  for (let i = 0, length = view.length; i < length; i += 2) {\n    let temp = view[i];\n    view[i] = view[i + 1];\n    view[i + 1] = temp;\n  }\n}\n\n/**\n * Swaps the endianness of an array assumed to contain 32-bit values.\n */\nexport function swapEndian32(array: ArrayBufferView) {\n  let view = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n  for (let i = 0, length = view.length; i < length; i += 4) {\n    let temp = view[i];\n    view[i] = view[i + 3];\n    view[i + 3] = temp;\n    temp = view[i + 1];\n    view[i + 1] = view[i + 2];\n    view[i + 2] = temp;\n  }\n}\n\n/**\n * Converts the endianness of an array assumed to contain 16-bit values from source to target.\n *\n * This does nothing if source === target.\n */\nexport function convertEndian16(\n    array: ArrayBufferView, source: Endianness, target: Endianness = ENDIANNESS) {\n  if (source !== target) {\n    swapEndian16(array);\n  }\n}\n\n/**\n * Converts the endianness of an array assumed to contain 16-bit values from native to little\n * endian.\n *\n * This does nothing if the native ENDIANNESS is little endian.\n */\nexport function nativeToLittle16(array: ArrayBufferView) {\n  if (ENDIANNESS !== Endianness.LITTLE) {\n    swapEndian16(array);\n  }\n}\n\n/**\n * Converts the endianness of an array assumed to contain 32-bit values from source to target.\n *\n * This does nothing if source === target.\n */\nexport function convertEndian32(\n    array: ArrayBufferView, source: Endianness, target: Endianness = ENDIANNESS) {\n  if (source !== target) {\n    swapEndian32(array);\n  }\n}\n\n/**\n * Converts the endianness of an array assumed to contain 32-bit values from native to little\n * endian.\n *\n * This does nothing if the native ENDIANNESS is little endian.\n */\nexport function nativeToLittle32(array: ArrayBufferView) {\n  if (ENDIANNESS !== Endianness.LITTLE) {\n    swapEndian32(array);\n  }\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * If this is updated, DATA_TYPE_BYTES must also be updated.\n */\nexport enum DataType {\n  UINT8 = 0,\n  UINT16 = 1,\n  UINT32 = 2,\n  UINT64 = 3,\n  FLOAT32 = 4,\n}\n\ninterface DataTypeBytes {\n  [index: number]: number;\n}\n\nexport const DATA_TYPE_BYTES: DataTypeBytes = [];\nDATA_TYPE_BYTES[DataType.UINT8] = 1;\nDATA_TYPE_BYTES[DataType.UINT16] = 2;\nDATA_TYPE_BYTES[DataType.UINT32] = 4;\nDATA_TYPE_BYTES[DataType.UINT64] = 8;\nDATA_TYPE_BYTES[DataType.FLOAT32] = 4;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {identityMat4, mat4, transformVectorByMat4, vec3} from 'neuroglancer/util/geom';\n\nexport class ChunkLayout {\n  /**\n   * Size of each chunk in local spatial coordinates.\n   */\n  size: vec3;\n\n  /**\n   * Transform from local spatial coordinates to global coordinates (nm).\n   */\n  transform: mat4;\n\n  /**\n   * Inverse of transform.  Transform from global spatial coordinates to local spatial coordinates.\n   */\n  invTransform: mat4;\n\n  constructor(size: vec3, transform: mat4 = identityMat4) {\n    this.size = vec3.clone(size);\n    this.transform = mat4.clone(transform);\n    this.invTransform = mat4.invert(mat4.create(), transform)!;\n  }\n  static cache = new Map<string, ChunkLayout>();\n  toObject(msg: any) {\n    msg['size'] = this.size;\n    msg['transform'] = this.transform;\n  }\n\n  static get(size: vec3, transform = identityMat4) {\n    let cache = ChunkLayout.cache;\n    const key = JSON.stringify([Array.from(size), Array.from(transform)]);\n    let obj = cache.get(key);\n    if (obj === undefined) {\n      obj = new ChunkLayout(size, transform);\n      cache.set(key, obj);\n    }\n    return obj;\n  }\n\n  static fromObject(msg: any) {\n    return ChunkLayout.get(msg['size'], msg['transform']);\n  }\n\n  /**\n   * Transform local spatial coordinates to global spatial coordinates.\n   */\n  localSpatialToGlobal(out: vec3, localSpatial: vec3): vec3 {\n    return vec3.transformMat4(out, localSpatial, this.transform);\n  }\n\n  /**\n   * Transform global spatial coordinates to local spatial coordinates.\n   */\n  globalToLocalSpatial(out: vec3, globalSpatial: vec3): vec3 {\n    return vec3.transformMat4(out, globalSpatial, this.invTransform);\n  }\n\n  globalToLocalGrid(out: vec3, globalSpatial: vec3): vec3 {\n    this.globalToLocalSpatial(out, globalSpatial);\n    vec3.divide(out, out, this.size);\n    return out;\n  }\n\n  localSpatialVectorToGlobal(out: vec3, localVector: vec3): vec3 {\n    return transformVectorByMat4(out, localVector, this.transform);\n  }\n\n  globalToLocalSpatialVector(out: vec3, globalVector: vec3): vec3 {\n    return transformVectorByMat4(out, globalVector, this.invTransform);\n  }\n\n  assignLocalSpatialToGlobalMat4(out: mat4): mat4 {\n    return mat4.copy(out, this.transform);\n  }\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CoordinateTransform} from 'neuroglancer/coordinate_transform';\nimport {ChunkLayout} from 'neuroglancer/sliceview/chunk_layout';\nimport {WatchableValueInterface} from 'neuroglancer/trackable_value';\nimport {partitionArray} from 'neuroglancer/util/array';\nimport {approxEqual} from 'neuroglancer/util/compare';\nimport {DATA_TYPE_BYTES, DataType} from 'neuroglancer/util/data_type';\nimport {effectiveScalingFactorFromMat4, identityMat4, kAxes, kInfinityVec, kZeroVec, mat4, rectifyTransformMatrixIfAxisAligned, transformVectorByMat4, vec3} from 'neuroglancer/util/geom';\nimport {SharedObject} from 'neuroglancer/worker_rpc';\n\nexport {DATA_TYPE_BYTES, DataType};\n\nconst DEBUG_CHUNK_INTERSECTIONS = false;\nconst DEBUG_VISIBLE_SOURCES = false;\n\nconst tempVec3 = vec3.create();\n\n/**\n * Average cross-sectional area contained within a chunk of the specified size and rotation.\n *\n * This is estimated by taking the total volume of the chunk and dividing it by the total length of\n * the chunk along the z axis.\n */\nfunction estimateSliceAreaPerChunk(zAxis: vec3, chunkLayout: ChunkLayout) {\n  const chunkSize = chunkLayout.size;\n  const zAxisRotated = chunkLayout.globalToLocalSpatialVector(tempVec3, zAxis);\n\n  // Minimum and maximum dot product of zAxisRotated with each of the corners of the chunk.  Both\n  // are initialized to 0 because the origin of the chunk has a projection of 0.\n  let minProjection = 0, maxProjection = 0;\n  let chunkVolume = 1;\n  for (let i = 0; i < 3; ++i) {\n    const chunkSizeValue = chunkSize[i];\n    chunkVolume *= chunkSizeValue;\n    const projection = chunkSizeValue * zAxisRotated[i];\n    minProjection = Math.min(minProjection, projection);\n    maxProjection = Math.max(maxProjection, projection);\n  }\n  const projectionLength = maxProjection - minProjection;\n  return chunkVolume / projectionLength;\n}\n\n/**\n * All valid chunks are in the range [lowerBound, upperBound).\n *\n * @param lowerBound Output parameter for lowerBound.\n * @param upperBound Output parameter for upperBound.\n * @param sources Sources for which to compute the chunk bounds.\n */\nfunction computeSourcesChunkBounds(\n    sourcesLowerBound: vec3, sourcesUpperBound: vec3, sources: Iterable<SliceViewChunkSource>) {\n  for (let i = 0; i < 3; ++i) {\n    sourcesLowerBound[i] = Number.POSITIVE_INFINITY;\n    sourcesUpperBound[i] = Number.NEGATIVE_INFINITY;\n  }\n\n  for (let source of sources) {\n    let {spec} = source;\n    let {lowerChunkBound, upperChunkBound} = spec;\n    for (let i = 0; i < 3; ++i) {\n      sourcesLowerBound[i] = Math.min(sourcesLowerBound[i], lowerChunkBound[i]);\n      sourcesUpperBound[i] = Math.max(sourcesUpperBound[i], upperChunkBound[i]);\n    }\n  }\n}\n\nenum BoundsComparisonResult {\n  // Needle is fully outside haystack.\n  FULLY_OUTSIDE,\n  // Needle is fully inside haystack.\n  FULLY_INSIDE,\n  // Needle is partially inside haystack.\n  PARTIALLY_INSIDE\n}\n\nfunction compareBoundsSingleDimension(\n    needleLower: number, needleUpper: number, haystackLower: number, haystackUpper: number) {\n  if (needleLower >= haystackUpper || needleUpper <= haystackLower) {\n    return BoundsComparisonResult.FULLY_OUTSIDE;\n  }\n  if (needleLower >= haystackLower && needleUpper <= haystackUpper) {\n    return BoundsComparisonResult.FULLY_INSIDE;\n  }\n  return BoundsComparisonResult.PARTIALLY_INSIDE;\n}\n\nfunction compareBounds(\n    needleLowerBound: vec3, needleUpperBound: vec3, haystackLowerBound: vec3,\n    haystackUpperBound: vec3) {\n  let curResult = BoundsComparisonResult.FULLY_INSIDE;\n  for (let i = 0; i < 3; ++i) {\n    let newResult = compareBoundsSingleDimension(\n        needleLowerBound[i], needleUpperBound[i], haystackLowerBound[i], haystackUpperBound[i]);\n    switch (newResult) {\n      case BoundsComparisonResult.FULLY_OUTSIDE:\n        return newResult;\n      case BoundsComparisonResult.PARTIALLY_INSIDE:\n        curResult = newResult;\n        break;\n    }\n  }\n  return curResult;\n}\n\nexport interface TransformedSource<Source extends SliceViewChunkSource = SliceViewChunkSource> {\n  source: Source;\n  chunkLayout: ChunkLayout;\n  voxelSize: vec3;\n}\n\nexport interface RenderLayer<Source extends SliceViewChunkSource> {\n  sources: Source[][];\n  transform: CoordinateTransform;\n  transformedSources: TransformedSource<Source>[][]|undefined;\n  transformedSourcesGeneration: number;\n  renderScaleTarget: WatchableValueInterface<number>;\n}\n\nexport function getTransformedSources<Source extends SliceViewChunkSource>(\n    renderLayer: RenderLayer<Source>) {\n  const {transform} = renderLayer;\n  let {transformedSources} = renderLayer;\n  const generation = transform.changed.count;\n  if (generation !== renderLayer.transformedSourcesGeneration) {\n    renderLayer.transformedSourcesGeneration = generation;\n    if (mat4.equals(transform.transform, identityMat4)) {\n      transformedSources = renderLayer.sources.map(\n          alternatives => alternatives.map(source => ({\n                                             source,\n                                             chunkLayout: source.spec.chunkLayout,\n                                             voxelSize: source.spec.voxelSize\n                                           })));\n    } else {\n      transformedSources = renderLayer.sources.map(alternatives => alternatives.map(source => {\n        const chunkLayout = source.spec.chunkLayout;\n        const transformedChunkLayout = ChunkLayout.get(\n            chunkLayout.size, getCombinedTransform(chunkLayout.transform, transform));\n        return {\n          chunkLayout: transformedChunkLayout,\n          source,\n          voxelSize: transformedChunkLayout.localSpatialVectorToGlobal(\n              vec3.create(), source.spec.voxelSize),\n        };\n      }));\n    }\n    renderLayer.transformedSources = transformedSources;\n  }\n  return transformedSources!;\n}\n\nfunction pickBestAlternativeSource<Source extends SliceViewChunkSource>(\n    zAxis: vec3, alternatives: TransformedSource<Source>[]) {\n  let numAlternatives = alternatives.length;\n  let bestAlternativeIndex = 0;\n  if (DEBUG_VISIBLE_SOURCES) {\n    console.log(alternatives);\n  }\n  if (numAlternatives > 1) {\n    let bestSliceArea = 0;\n    for (let alternativeIndex = 0; alternativeIndex < numAlternatives; ++alternativeIndex) {\n      let alternative = alternatives[alternativeIndex];\n      const {chunkLayout} = alternative;\n      let sliceArea = estimateSliceAreaPerChunk(zAxis, chunkLayout);\n      if (DEBUG_VISIBLE_SOURCES) {\n        console.log(`zAxis = ${zAxis}, chunksize = ${chunkLayout.size}, sliceArea = ${sliceArea}`);\n      }\n      if (sliceArea > bestSliceArea) {\n        bestSliceArea = sliceArea;\n        bestAlternativeIndex = alternativeIndex;\n      }\n    }\n  }\n  return alternatives[bestAlternativeIndex];\n}\n\nconst tempCorners = [vec3.create(), vec3.create(), vec3.create(), vec3.create()];\n\nexport class SliceViewBase<Source extends SliceViewChunkSource,\n                                          RLayer extends RenderLayer<Source>> extends SharedObject {\n  width = -1;\n  height = -1;\n  hasViewportToData = false;\n  /**\n   * Specifies whether width, height, and viewportToData are valid.\n   */\n  hasValidViewport = false;\n\n  // Transforms (x,y) viewport coordinates in the range:\n  //\n  // x=[left: -width/2, right: width/2] and\n  //\n  // y=[top: -height/2, bottom: height/2],\n  //\n  // to data coordinates.\n  viewportToData = mat4.create();\n\n  // Normalized x, y, and z viewport axes in data coordinate space.\n  viewportAxes = [vec3.create(), vec3.create(), vec3.create()];\n\n  // Viewport axes used for selecting visible sources.\n  previousViewportAxes = [vec3.create(), vec3.create()];\n\n  centerDataPosition = vec3.create();\n\n  viewportPlaneDistanceToOrigin: number = 0;\n\n  /**\n   * For each visible ChunkLayout, maps each visible GenericVolumeChunkSource to its priority index.\n   * Overall chunk priority ordering is based on a lexicographical ordering of (priorityIndex,\n   * -distanceToCenter).\n   */\n  visibleChunkLayouts = new Map<ChunkLayout, Map<Source, number>>();\n\n  visibleLayers = new Map<RLayer, TransformedSource<Source>[]>();\n\n  visibleSourcesStale = true;\n\n  /**\n   * Size in spatial units (nm) of a single pixel.\n   */\n  pixelSize: number = 0;\n\n  constructor() {\n    super();\n    mat4.identity(this.viewportToData);\n  }\n\n  /**\n   * Called when hasValidViewport == true and the viewport width/height or data transform matrix\n   * changes.\n   */\n  onViewportChanged() {}\n  maybeSetHasValidViewport() {\n    if (!this.hasValidViewport && this.width !== -1 && this.height !== -1 &&\n        this.hasViewportToData) {\n      this.hasValidViewport = true;\n      this.onHasValidViewport();\n    }\n    if (this.hasValidViewport) {\n      this.onViewportChanged();\n    }\n  }\n  onHasValidViewport() {}\n  setViewportSize(width: number, height: number) {\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.maybeSetHasValidViewport();\n      return true;\n    }\n    return false;\n  }\n  setViewportToDataMatrix(mat: mat4) {\n    if (this.hasViewportToData && mat4.equals(this.viewportToData, mat)) {\n      return false;\n    }\n\n    this.hasViewportToData = true;\n\n    let {viewportToData} = this;\n    mat4.copy(viewportToData, mat);\n    rectifyTransformMatrixIfAxisAligned(viewportToData);\n    vec3.transformMat4(this.centerDataPosition, kZeroVec, mat);\n\n    // Initialize to zero to avoid confusing TypeScript compiler.\n    let newPixelSize = 0;\n\n    // Swap previousViewportAxes with viewportAxes.\n    let viewportAxes = this.viewportAxes;\n    let previousViewportAxes = this.previousViewportAxes;\n\n    // Compute axes.\n    for (var i = 0; i < 3; ++i) {\n      let a = viewportAxes[i];\n      transformVectorByMat4(a, kAxes[i], viewportToData);\n      // a[3] is guaranteed to be 0.\n      if (i === 0) {\n        newPixelSize = vec3.length(a);\n      }\n      vec3.normalize(a, a);\n    }\n\n    this.viewportAxes = viewportAxes;\n    this.previousViewportAxes = previousViewportAxes;\n\n    if (!approxEqual(newPixelSize, this.pixelSize) ||\n        (vec3.dot(viewportAxes[0], previousViewportAxes[0]) < 0.95) ||\n        (vec3.dot(viewportAxes[1], previousViewportAxes[1]) < 0.95)) {\n      vec3.copy(previousViewportAxes[0], viewportAxes[0]);\n      vec3.copy(previousViewportAxes[1], viewportAxes[1]);\n      this.visibleSourcesStale = true;\n      this.pixelSize = newPixelSize;\n    }\n\n    // Compute viewport plane distance to origin.\n    this.viewportPlaneDistanceToOrigin = vec3.dot(this.centerDataPosition, this.viewportAxes[2]);\n    this.onViewportToDataMatrixChanged();\n    this.maybeSetHasValidViewport();\n    return true;\n  }\n\n  onViewportToDataMatrixChanged() {}\n\n  /**\n   * Computes the list of sources to use for each visible layer, based on the\n   * current pixelSize.\n   */\n  updateVisibleSources() {\n    if (!this.visibleSourcesStale) {\n      return;\n    }\n    this.visibleSourcesStale = false;\n    // Increase pixel size by a small margin.\n    let pixelSize = this.pixelSize * 1.1;\n    // console.log(\"pixelSize\", pixelSize);\n\n    let visibleChunkLayouts = this.visibleChunkLayouts;\n    const zAxis = this.viewportAxes[2];\n\n    let visibleLayers = this.visibleLayers;\n    visibleChunkLayouts.clear();\n    for (let [renderLayer, visibleSources] of visibleLayers) {\n      visibleSources.length = 0;\n      let transformedSources = getTransformedSources(renderLayer);\n      let numSources = transformedSources.length;\n      let scaleIndex: number;\n\n      // At the smallest scale, all alternative sources must have the same voxel size, which is\n      // considered to be the base voxel size.\n      let smallestVoxelSize = transformedSources[0][0].voxelSize;\n\n      const renderScaleTarget = renderLayer.renderScaleTarget.value;\n\n      /**\n       * Determines whether we should continue to look for a finer-resolution source *after* one\n       * with the specified voxelSize.\n       */\n      const canImproveOnVoxelSize = (voxelSize: vec3) => {\n        const targetSize = pixelSize * renderScaleTarget;\n        for (let i = 0; i < 3; ++i) {\n          const size = voxelSize[i];\n          // If size <= pixelSize, no need for improvement.\n          // If size === smallestVoxelSize, also no need for improvement.\n          if (size > targetSize && size > 1.01 * smallestVoxelSize[i]) {\n            return true;\n          }\n        }\n        return false;\n      };\n\n      const improvesOnPrevVoxelSize = (voxelSize: vec3, prevVoxelSize: vec3) => {\n        const targetSize = pixelSize * renderScaleTarget;\n        for (let i = 0; i < 3; ++i) {\n          const size = voxelSize[i];\n          const prevSize = prevVoxelSize[i];\n          if (Math.abs(targetSize - size) < Math.abs(targetSize - prevSize) &&\n              size < 1.01 * prevSize) {\n            return true;\n          }\n        }\n        return false;\n      };\n\n      /**\n       * Registers a source as being visible.  This should be called with consecutively decreasing\n       * values of scaleIndex.\n       */\n      const addVisibleSource =\n          (transformedSource: TransformedSource<Source>, sourceScaleIndex: number) => {\n            // Add to end of visibleSources list.  We will reverse the list after all sources are\n            // added.\n            const {source, chunkLayout} = transformedSource;\n            visibleSources[visibleSources.length++] = transformedSource;\n            let existingSources = visibleChunkLayouts.get(chunkLayout);\n            if (existingSources === undefined) {\n              existingSources = new Map<Source, number>();\n              visibleChunkLayouts.set(chunkLayout, existingSources);\n            }\n            existingSources.set(source, sourceScaleIndex);\n          };\n\n      scaleIndex = numSources - 1;\n      let prevVoxelSize: vec3|undefined;\n      while (true) {\n        const transformedSource = pickBestAlternativeSource(zAxis, transformedSources[scaleIndex]);\n        if (prevVoxelSize !== undefined &&\n            !improvesOnPrevVoxelSize(transformedSource.voxelSize, prevVoxelSize)) {\n          break;\n        }\n        addVisibleSource(transformedSource, scaleIndex);\n\n        if (scaleIndex === 0 || !canImproveOnVoxelSize(transformedSource.voxelSize)) {\n          break;\n        }\n        prevVoxelSize = transformedSource.voxelSize;\n        --scaleIndex;\n      }\n      // Reverse visibleSources list since we added sources from coarsest to finest resolution, but\n      // we want them ordered from finest to coarsest.\n      visibleSources.reverse();\n    }\n  }\n  computeVisibleChunks<T>(\n      getLayoutObject: (chunkLayout: ChunkLayout) => T,\n      addChunk:\n          (chunkLayout: ChunkLayout, layoutObject: T, lowerBound: vec3,\n           fullyVisibleSources: SliceViewChunkSource[]) => void) {\n    this.updateVisibleSources();\n\n    // Lower and upper bound in global data coordinates.\n    const globalCorners = tempCorners;\n    let {width, height, viewportToData} = this;\n    for (let i = 0; i < 3; ++i) {\n      globalCorners[0][i] = -kAxes[0][i] * width / 2 - kAxes[1][i] * height / 2;\n      globalCorners[1][i] = -kAxes[0][i] * width / 2 + kAxes[1][i] * height / 2;\n      globalCorners[2][i] = kAxes[0][i] * width / 2 - kAxes[1][i] * height / 2;\n      globalCorners[3][i] = kAxes[0][i] * width / 2 + kAxes[1][i] * height / 2;\n    }\n    for (let i = 0; i < 4; ++i) {\n      vec3.transformMat4(globalCorners[i], globalCorners[i], viewportToData);\n    }\n    // console.log(\"data bounds\", dataLowerBound, dataUpperBound);\n\n    // These variables hold the lower and upper bounds on chunk grid positions that intersect the\n    // viewing plane.\n    var lowerChunkBound = vec3.create();\n    var upperChunkBound = vec3.create();\n\n    let sourcesLowerChunkBound = vec3.create();\n    let sourcesUpperChunkBound = vec3.create();\n\n    // Vertex with maximal dot product with the positive viewport plane normal.\n    // Implicitly, negativeVertex = 1 - positiveVertex.\n    var positiveVertex = vec3.create();\n\n    var planeNormal = vec3.create();\n\n    // Sources whose bounds partially contain the current bounding box.\n    let partiallyVisibleSources = new Array<SliceViewChunkSource>();\n\n    // Sources whose bounds fully contain the current bounding box.\n    let fullyVisibleSources = new Array<SliceViewChunkSource>();\n\n    this.visibleChunkLayouts.forEach((visibleSources, chunkLayout) => {\n      let layoutObject = getLayoutObject(chunkLayout);\n      computeSourcesChunkBounds(\n          sourcesLowerChunkBound, sourcesUpperChunkBound, visibleSources.keys());\n      if (DEBUG_CHUNK_INTERSECTIONS) {\n        console.log(\n            `Initial sources chunk bounds: ` +\n            `${vec3.str(sourcesLowerChunkBound)}, ${vec3.str(sourcesUpperChunkBound)}`);\n      }\n\n      vec3.set(\n          lowerChunkBound, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY,\n          Number.POSITIVE_INFINITY);\n      vec3.set(\n          upperChunkBound, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY,\n          Number.NEGATIVE_INFINITY);\n\n      chunkLayout.globalToLocalSpatialVector(planeNormal, this.viewportAxes[2]);\n      for (let i = 0; i < 3; ++i) {\n        positiveVertex[i] = planeNormal[i] > 0 ? 1 : 0;\n      }\n\n      // Center position in chunk grid coordinates.\n      const planeDistanceToOrigin =\n          vec3.dot(chunkLayout.globalToLocalGrid(tempVec3, this.centerDataPosition), planeNormal);\n\n      for (let i = 0; i < 4; ++i) {\n        const localCorner = chunkLayout.globalToLocalGrid(tempVec3, globalCorners[i]);\n        for (let j = 0; j < 3; ++j) {\n          lowerChunkBound[j] = Math.min(lowerChunkBound[j], Math.floor(localCorner[j]));\n          upperChunkBound[j] = Math.max(upperChunkBound[j], Math.floor(localCorner[j]) + 1);\n        }\n      }\n      vec3.max(lowerChunkBound, lowerChunkBound, sourcesLowerChunkBound);\n      vec3.min(upperChunkBound, upperChunkBound, sourcesUpperChunkBound);\n\n      // console.log('chunkBounds', lowerBound, upperBound);\n\n      // Checks whether [lowerBound, upperBound) intersects the viewport plane.\n      //\n      // positiveVertexDistanceToOrigin = dot(planeNormal, lowerBound +\n      // positiveVertex * (upperBound - lowerBound)) - planeDistanceToOrigin;\n      // negativeVertexDistanceToOrigin = dot(planeNormal, lowerBound +\n      // negativeVertex * (upperBound - lowerBound)) - planeDistanceToOrigin;\n      //\n      // positive vertex must have positive distance, and negative vertex must\n      // have negative distance.\n      function intersectsPlane() {\n        var positiveVertexDistanceToOrigin = 0;\n        var negativeVertexDistanceToOrigin = 0;\n        // Check positive vertex.\n        for (let i = 0; i < 3; ++i) {\n          let normalValue = planeNormal[i];\n          let lowerValue = lowerChunkBound[i];\n          let upperValue = upperChunkBound[i];\n          let diff = upperValue - lowerValue;\n          let positiveOffset = positiveVertex[i] * diff;\n          // console.log(\n          //     normalValue, lowerValue, upperValue, diff, positiveOffset,\n          //     positiveVertexDistanceToOrigin, negativeVertexDistanceToOrigin);\n          positiveVertexDistanceToOrigin += normalValue * (lowerValue + positiveOffset);\n          negativeVertexDistanceToOrigin += normalValue * (lowerValue + diff - positiveOffset);\n        }\n        if (DEBUG_CHUNK_INTERSECTIONS) {\n          console.log(`    planeNormal = ${planeNormal}`);\n          console.log(\n              '    {positive,negative}VertexDistanceToOrigin: ', positiveVertexDistanceToOrigin,\n              negativeVertexDistanceToOrigin, planeDistanceToOrigin);\n          console.log(\n              '    intersectsPlane:', negativeVertexDistanceToOrigin, planeDistanceToOrigin,\n              positiveVertexDistanceToOrigin);\n        }\n        if (positiveVertexDistanceToOrigin < planeDistanceToOrigin) {\n          return false;\n        }\n\n        return negativeVertexDistanceToOrigin <= planeDistanceToOrigin;\n      }\n\n      fullyVisibleSources.length = 0;\n      partiallyVisibleSources.length = 0;\n      for (let source of visibleSources.keys()) {\n        let spec = source.spec;\n        let result = compareBounds(\n            lowerChunkBound, upperChunkBound, spec.lowerChunkBound, spec.upperChunkBound);\n        if (DEBUG_CHUNK_INTERSECTIONS) {\n          console.log(\n              `Comparing source bounds lowerBound=${vec3.str(lowerChunkBound)}, ` +\n                  `upperBound=${vec3.str(upperChunkBound)}, ` +\n                  `lowerChunkBound=${vec3.str(spec.lowerChunkBound)}, ` +\n                  `upperChunkBound=${vec3.str(spec.upperChunkBound)}, ` +\n                  `got ${BoundsComparisonResult[result]}`,\n              spec, source);\n        }\n        switch (result) {\n          case BoundsComparisonResult.FULLY_INSIDE:\n            fullyVisibleSources.push(source);\n            break;\n          case BoundsComparisonResult.PARTIALLY_INSIDE:\n            partiallyVisibleSources.push(source);\n            break;\n        }\n      }\n      let partiallyVisibleSourcesLength = partiallyVisibleSources.length;\n\n      // Mutates lowerBound and upperBound while running, but leaves them the\n      // same once finished.\n      function checkBounds(nextSplitDim: number) {\n        if (DEBUG_CHUNK_INTERSECTIONS) {\n          console.log(\n              `chunk bounds: ${lowerChunkBound} ${upperChunkBound} ` +\n              `fullyVisible: ${fullyVisibleSources} partiallyVisible: ` +\n              `${partiallyVisibleSources.slice(0, partiallyVisibleSourcesLength)}`);\n        }\n\n        if (fullyVisibleSources.length === 0 && partiallyVisibleSourcesLength === 0) {\n          if (DEBUG_CHUNK_INTERSECTIONS) {\n            console.log('  no visible sources');\n          }\n          return;\n        }\n\n        if (DEBUG_CHUNK_INTERSECTIONS) {\n          console.log(\n              `Check bounds: [ ${vec3.str(lowerChunkBound)}, ${vec3.str(upperChunkBound)} ]`);\n        }\n        var volume = 1;\n        for (let i = 0; i < 3; ++i) {\n          volume *= Math.max(0, upperChunkBound[i] - lowerChunkBound[i]);\n        }\n\n        if (volume === 0) {\n          if (DEBUG_CHUNK_INTERSECTIONS) {\n            console.log('  volume == 0');\n          }\n          return;\n        }\n\n        if (!intersectsPlane()) {\n          if (DEBUG_CHUNK_INTERSECTIONS) {\n            console.log('  doesn\\'t intersect plane');\n          }\n          return;\n        }\n\n        if (DEBUG_CHUNK_INTERSECTIONS) {\n          console.log(\n              'Within bounds: [' + vec3.str(lowerChunkBound) + ', ' + vec3.str(upperChunkBound) +\n              ']');\n        }\n\n        if (volume === 1) {\n          addChunk(chunkLayout, layoutObject, lowerChunkBound, fullyVisibleSources);\n          return;\n        }\n\n        var dimLower: number, dimUpper: number, diff: number;\n        while (true) {\n          dimLower = lowerChunkBound[nextSplitDim];\n          dimUpper = upperChunkBound[nextSplitDim];\n          diff = dimUpper - dimLower;\n          if (diff === 1) {\n            nextSplitDim = (nextSplitDim + 1) % 3;\n          } else {\n            break;\n          }\n        }\n\n        let splitPoint = dimLower + Math.floor(0.5 * diff);\n        let newNextSplitDim = (nextSplitDim + 1) % 3;\n        let fullyVisibleSourcesLength = fullyVisibleSources.length;\n\n        upperChunkBound[nextSplitDim] = splitPoint;\n\n        let oldPartiallyVisibleSourcesLength = partiallyVisibleSourcesLength;\n        function adjustSources() {\n          partiallyVisibleSourcesLength = partitionArray(\n              partiallyVisibleSources, 0, oldPartiallyVisibleSourcesLength, source => {\n                let spec = source.spec;\n                let result = compareBounds(\n                    lowerChunkBound, upperChunkBound, spec.lowerChunkBound, spec.upperChunkBound);\n                switch (result) {\n                  case BoundsComparisonResult.PARTIALLY_INSIDE:\n                    return true;\n                  case BoundsComparisonResult.FULLY_INSIDE:\n                    fullyVisibleSources.push(source);\n                  default:\n                    return false;\n                }\n              });\n        }\n\n        adjustSources();\n        checkBounds(newNextSplitDim);\n\n        // Truncate list of fully visible sources.\n        fullyVisibleSources.length = fullyVisibleSourcesLength;\n\n        // Restore partiallyVisibleSources.\n        partiallyVisibleSourcesLength = oldPartiallyVisibleSourcesLength;\n\n        upperChunkBound[nextSplitDim] = dimUpper;\n        lowerChunkBound[nextSplitDim] = splitPoint;\n\n        adjustSources();\n        checkBounds(newNextSplitDim);\n\n        lowerChunkBound[nextSplitDim] = dimLower;\n\n        // Truncate list of fully visible sources.\n        fullyVisibleSources.length = fullyVisibleSourcesLength;\n\n        // Restore partiallyVisibleSources.\n        partiallyVisibleSourcesLength = oldPartiallyVisibleSourcesLength;\n      }\n      checkBounds(0);\n    });\n  }\n}\n\n/**\n * By default, choose a chunk size with at most 2^18 = 262144 voxels.\n */\nexport const DEFAULT_MAX_VOXELS_PER_CHUNK_LOG2 = 18;\n\n/**\n * Specifies common options for getNearIsotropicBlockSize and getTwoDimensionalBlockSize.\n */\nexport interface BaseChunkLayoutOptions {\n  /**\n   * Voxel size in nanometers.\n   */\n  voxelSize: vec3;\n\n  /**\n   * This, together with upperVoxelBound, specifies the total volume dimensions, which serves as a\n   * bound on the maximum chunk size.  If not specified, defaults to (0, 0, 0).\n   */\n  lowerVoxelBound?: vec3;\n\n  /**\n   * Upper voxel bound.  If not specified, the total volume dimensions are not used to bound the\n   * chunk size.\n   */\n  upperVoxelBound?: vec3;\n\n  /**\n   * Base 2 logarithm of the maximum number of voxels per chunk.  Defaults to\n   * DEFAULT_MAX_VOXELS_PER_CHUNK_LOG2.\n   */\n  maxVoxelsPerChunkLog2?: number;\n\n  /**\n   * Specifies an optional transform from local spatial coordinates to global coordinates.\n   */\n  transform?: mat4;\n}\n\nexport interface GetNearIsotropicBlockSizeOptions extends BaseChunkLayoutOptions {\n  maxBlockSize?: vec3;\n}\n\n/**\n * Determines a near-isotropic (in global spatial coordinates) block size.  All dimensions will be\n * powers of 2, and will not exceed upperVoxelBound - lowerVoxelBound.  The total number of voxels\n * will not exceed maxVoxelsPerChunkLog2.\n */\nexport function getNearIsotropicBlockSize(options: GetNearIsotropicBlockSizeOptions) {\n  let {\n    voxelSize,\n    lowerVoxelBound = kZeroVec,\n    upperVoxelBound,\n    maxVoxelsPerChunkLog2 = DEFAULT_MAX_VOXELS_PER_CHUNK_LOG2,\n    transform = identityMat4,\n    maxBlockSize = kInfinityVec,\n  } = options;\n\n  // Adjust voxelSize by effective scaling factor.\n  let temp = effectiveScalingFactorFromMat4(vec3.create(), transform);\n  voxelSize = vec3.multiply(temp, temp, voxelSize);\n\n  let chunkDataSize = vec3.fromValues(1, 1, 1);\n  let maxChunkDataSize: vec3;\n  if (upperVoxelBound === undefined) {\n    maxChunkDataSize = maxBlockSize;\n  } else {\n    maxChunkDataSize = vec3.create();\n    for (let i = 0; i < 3; ++i) {\n      maxChunkDataSize[i] =\n          Math.pow(2, Math.floor(Math.log2(upperVoxelBound[i] - lowerVoxelBound[i])));\n    }\n    vec3.min(maxChunkDataSize, maxChunkDataSize, maxBlockSize);\n  }\n\n  // Determine the dimension in which chunkDataSize should be increased.  This is the smallest\n  // dimension (in nanometers) that is < maxChunkDataSize (in voxels).\n  //\n  // Returns -1 if there is no such dimension.\n  function findNextDimension() {\n    let minSize = Infinity;\n    let minDimension = -1;\n    for (let i = 0; i < 3; ++i) {\n      if (chunkDataSize[i] >= maxChunkDataSize[i]) {\n        continue;\n      }\n      let size = chunkDataSize[i] * voxelSize[i];\n      if (size < minSize) {\n        minSize = size;\n        minDimension = i;\n      }\n    }\n    return minDimension;\n  }\n\n  for (let i = 0; i < maxVoxelsPerChunkLog2; ++i) {\n    let nextDim = findNextDimension();\n    if (nextDim === -1) {\n      break;\n    }\n    chunkDataSize[nextDim] *= 2;\n  }\n  return chunkDataSize;\n}\n\n/**\n * Computes a 3-d block size that has depth 1 in flatDimension and is near-isotropic (in nanometers)\n * in the other two dimensions.  The remaining options are the same as for\n * getNearIsotropicBlockSize.\n */\nexport function getTwoDimensionalBlockSize(options: {flatDimension: number}&\n                                           BaseChunkLayoutOptions) {\n  let {\n    lowerVoxelBound = kZeroVec,\n    upperVoxelBound = kInfinityVec,\n    flatDimension,\n    voxelSize,\n    maxVoxelsPerChunkLog2,\n    transform\n  } = options;\n  vec3.subtract(tempVec3, upperVoxelBound, lowerVoxelBound);\n  tempVec3[flatDimension] = 1;\n  return getNearIsotropicBlockSize(\n      {voxelSize, upperVoxelBound: tempVec3, maxVoxelsPerChunkLog2, transform});\n}\n\n/**\n * Returns an array of [xy, xz, yz] 2-dimensional block sizes.\n */\nexport function getTwoDimensionalBlockSizes(options: BaseChunkLayoutOptions) {\n  let chunkDataSizes = new Array<vec3>();\n  for (let i = 0; i < 3; ++i) {\n    chunkDataSizes[i] = getTwoDimensionalBlockSize({\n      flatDimension: i,\n      voxelSize: options.voxelSize,\n      lowerVoxelBound: options.lowerVoxelBound,\n      upperVoxelBound: options.upperVoxelBound,\n      maxVoxelsPerChunkLog2: options.maxVoxelsPerChunkLog2,\n      transform: options.transform,\n    });\n  }\n  return chunkDataSizes;\n}\n\nexport enum ChunkLayoutPreference {\n  /**\n   * Indicates that isotropic chunks are desired.\n   */\n  ISOTROPIC = 0,\n\n  /**\n   * Indicates that 2-D chunks are desired.\n   */\n  FLAT = 1,\n}\n\nexport interface SliceViewSourceOptions {\n  /**\n   * Additional transform applied after the transform specified by the data source for transforming\n   * from local to global coordinates.\n   */\n  transform?: mat4;\n}\n\nexport function getCombinedTransform(transform: mat4|undefined, options: {transform?: mat4}) {\n  let additionalTransform = options.transform;\n  if (additionalTransform === undefined) {\n    if (transform === undefined) {\n      return identityMat4;\n    }\n    return transform;\n  }\n  if (transform === undefined) {\n    return additionalTransform;\n  }\n  return mat4.multiply(mat4.create(), additionalTransform, transform);\n}\n\n/**\n * Specifies parameters for getChunkDataSizes.\n */\nexport interface ChunkLayoutOptions {\n  /**\n   * Chunk sizes in voxels.\n   */\n  chunkDataSizes?: vec3[];\n\n  /**\n   * Preferred chunk layout, which determines chunk sizes to use if chunkDataSizes is not\n   * specified.\n   */\n  chunkLayoutPreference?: ChunkLayoutPreference;\n}\n\nexport function getChunkDataSizes(options: ChunkLayoutOptions&BaseChunkLayoutOptions) {\n  if (options.chunkDataSizes !== undefined) {\n    return options.chunkDataSizes;\n  }\n  const {chunkLayoutPreference = ChunkLayoutPreference.ISOTROPIC} = options;\n  switch (chunkLayoutPreference) {\n    case ChunkLayoutPreference.ISOTROPIC:\n      return [getNearIsotropicBlockSize(options)];\n    case ChunkLayoutPreference.FLAT:\n      let chunkDataSizes = getTwoDimensionalBlockSizes(options);\n      chunkDataSizes.push(getNearIsotropicBlockSize(options));\n      return chunkDataSizes;\n  }\n  throw new Error(`Invalid chunk layout preference: ${chunkLayoutPreference}.`);\n}\n\n/**\n * Generic specification for SliceView chunks specifying a layout and voxel size.\n */\nexport abstract class SliceViewChunkSpecification {\n  chunkLayout: ChunkLayout;\n  voxelSize: vec3;\n\n  // All valid chunks are in the range [lowerChunkBound, upperChunkBound).\n  lowerChunkBound: vec3;\n  upperChunkBound: vec3;\n\n  constructor(options: SliceViewChunkSpecificationOptions) {\n    let {\n      chunkSize,\n      voxelSize,\n      transform,\n      lowerChunkBound = kZeroVec,\n      upperChunkBound,\n    } = options;\n    this.voxelSize = voxelSize;\n    this.chunkLayout = ChunkLayout.get(chunkSize, transform);\n\n    this.lowerChunkBound = lowerChunkBound;\n    this.upperChunkBound = upperChunkBound;\n  }\n\n  toObject(): SliceViewChunkSpecificationOptions {\n    return {\n      transform: this.chunkLayout.transform,\n      chunkSize: this.chunkLayout.size,\n      voxelSize: this.voxelSize,\n      lowerChunkBound: this.lowerChunkBound,\n      upperChunkBound: this.upperChunkBound,\n    };\n  }\n}\n\n/**\n * Common parameters for SliceView Chunks.\n */\nexport interface SliceViewChunkSpecificationBaseOptions {\n  /**\n   * Transform local spatial coordinates to global coordinates.\n   */\n  transform?: mat4;\n\n  /**\n   * Voxel size in local spatial coordinates.\n   */\n  voxelSize: vec3;\n}\n\n\nexport interface SliceViewChunkSpecificationOptions extends SliceViewChunkSpecificationBaseOptions {\n  lowerChunkBound?: vec3;\n  upperChunkBound: vec3;\n\n  chunkSize: vec3;\n}\n\n\nexport interface SliceViewChunkSource {\n  spec: SliceViewChunkSpecification;\n}\n\nexport const SLICEVIEW_RPC_ID = 'SliceView';\nexport const SLICEVIEW_RENDERLAYER_RPC_ID = 'sliceview/RenderLayer';\nexport const SLICEVIEW_ADD_VISIBLE_LAYER_RPC_ID = 'SliceView.addVisibleLayer';\nexport const SLICEVIEW_REMOVE_VISIBLE_LAYER_RPC_ID = 'SliceView.removeVisibleLayer';\nexport const SLICEVIEW_UPDATE_VIEW_RPC_ID = 'SliceView.updateView';\nexport const SLICEVIEW_RENDERLAYER_UPDATE_TRANSFORM_RPC_ID = 'SliceView.updateTransform';\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function approxEqual(a: number, b: number): boolean {\n  if (a === b) {\n    return true;\n  }\n  return (Math.abs(a - b) / Math.min(Math.abs(a), Math.abs(b)) < 1e-6);\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface WritableArrayLike<T> {\n  length: number;\n  [n: number]: T;\n}\n\n/**\n * Partitions array[start:end] such that all elements for which predicate\n * returns true are before the elements for which predicate returns false.\n *\n * predicate will be called exactly once for each element in array[start:end],\n * in order.\n *\n * @returns {number} The index of the first element for which predicate returns\n * false, or end if there is no such element.\n */\nexport function partitionArray<T>(\n    array: T[], start: number, end: number, predicate: (x: T) => boolean): number {\n  while (start < end) {\n    let x = array[start];\n    if (predicate(x)) {\n      ++start;\n      continue;\n    }\n    --end;\n    array[start] = array[end];\n    array[end] = x;\n  }\n  return end;\n}\n\nexport interface TypedArrayConstructor {\n  new(n: number): TypedArray;\n  new(buffer: ArrayBuffer, byteOffset: number, length: number): TypedArray;\n  BYTES_PER_ELEMENT: number;\n}\n\nexport type TypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array |\n    Uint32Array | Float32Array | Float64Array;\n\n/**\n * Returns an array of size newSize that starts with the contents of array.\n * Either returns array if it has the correct size, or a new array with zero\n * padding at the end.\n */\nexport function maybePadArray<T extends TypedArray>(array: T, newSize: number): T {\n  if (array.length === newSize) {\n    return array;\n  }\n  let newArray = new (<any>array.constructor)(newSize);\n  newArray.set(array);\n  return newArray;\n}\n\nexport function getFortranOrderStrides(size: ArrayLike<number>, baseStride = 1) {\n  let length = size.length;\n  let strides = new Array<number>(length);\n  let stride = strides[0] = baseStride;\n  for (let i = 1; i < length; ++i) {\n    stride *= size[i - 1];\n    strides[i] = stride;\n  }\n  return strides;\n}\n\n/**\n * Converts an array of shape [majorSize, minorSize] to\n * [minorSize, majorSize].\n */\nexport function transposeArray2d<T extends TypedArray>(\n    array: T, majorSize: number, minorSize: number): T {\n  let transpose = new (<any>array.constructor)(array.length);\n  for (let i = 0; i < majorSize * minorSize; i += minorSize) {\n    for (let j = 0; j < minorSize; j++) {\n      let index: number = i / minorSize;\n      transpose[j * majorSize + index] = array[i + j];\n    }\n  }\n  return transpose;\n}\n\nexport function tile2dArray<T extends TypedArray>(\n    array: T, majorDimension: number, minorTiles: number, majorTiles: number) {\n  const minorDimension = array.length / majorDimension;\n  const length = array.length * minorTiles * majorTiles;\n  const result: T = new (<any>array.constructor)(length);\n  const minorTileStride = array.length * majorTiles;\n  const majorTileStride = majorDimension;\n  const minorStride = majorDimension * majorTiles;\n  for (let minor = 0; minor < minorDimension; ++minor) {\n    for (let major = 0; major < majorDimension; ++major) {\n      const inputValue = array[minor * majorDimension + major];\n      const baseOffset = minor * minorStride + major;\n      for (let minorTile = 0; minorTile < minorTiles; ++minorTile) {\n        for (let majorTile = 0; majorTile < majorTiles; ++majorTile) {\n          result[minorTile * minorTileStride + majorTile * majorTileStride + baseOffset] =\n              inputValue;\n        }\n      }\n    }\n  }\n  return result;\n}\n\nexport function binarySearch<T>(\n    haystack: ArrayLike<T>, needle: T, compare: (a: T, b: T) => number, low = 0,\n    high = haystack.length) {\n  while (low < high) {\n    const mid = (low + high - 1) >> 1;\n    const compareResult = compare(needle, haystack[mid]);\n    if (compareResult > 0) {\n      low = mid + 1;\n    } else if (compareResult < 0) {\n      high = mid;\n    } else {\n      return mid;\n    }\n  }\n  return ~low;\n}\n\n\n/**\n * Returns the first index in `[begin, end)` for which `predicate` is `true`, or returns `end` if no\n * such index exists.\n *\n * For any index `i` in `(begin, end)`, it must be the case that `predicate(i) >= predicate(i - 1)`.\n */\nexport function binarySearchLowerBound(\n    begin: number, end: number, predicate: (index: number) => boolean): number {\n  let count = end - begin;\n  while (count > 0) {\n    let step = Math.floor(count / 2);\n    let i = begin + step;\n    if (predicate(i)) {\n      count = step;\n    } else {\n      begin = i + 1;\n      count -= step + 1;\n    }\n  }\n  return begin;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {isAABBVisible, mat4, vec3} from 'neuroglancer/util/geom';\nimport {getOctreeChildIndex} from 'neuroglancer/util/zorder';\n\nexport interface MultiscaleMeshManifest {\n  /**\n   * Size of finest-resolution (base) chunk in object coordinates.\n   */\n  chunkShape: vec3;\n\n  /**\n   * Starting corner position of (0, 0, 0) chunk in object coordinates.\n   */\n  chunkGridSpatialOrigin: vec3;\n\n  /**\n   * Axis-aligned bounding box lower bound of object in object coordinates to use for clipping and\n   * level-of-detail calculations.\n   */\n  clipLowerBound: vec3;\n\n  /**\n   * Axis-aligned bounding box upper bound of object in object coordinates to use for clipping and\n   * level-of-detail calculations.\n   */\n  clipUpperBound: vec3;\n\n  /**\n   * Specifies the number of levels of detail (as `lodScales.length`), and the resolution in object\n   * coordinates for each level of detail.  If `lodScales[lod] === 0`, then level-of-detail `lod`\n   * does not exist.\n   *\n   * Level of detail `0` is the finest resolution.\n   *\n   * The non-zero values must be non-decreasing.\n   *\n   * For each chunk, the chosen `lod` is the largest value such that\n   * `lodScales[lod] <= detailCutoff * pixelSize`, where `pixelSize` is the maximum spatial distance\n   * spanned by a single viewport pixel within the projected image of the chunk.\n   */\n  lodScales: Float32Array;\n\n  /**\n   * C order `[numLods, 3]` array specifying the xyz vertex position offset in object coordinates\n   * for each level of detail.\n   */\n  vertexOffsets: Float32Array;\n\n  /**\n   * Row-major `[n, 5]` array where each row is of the form `[x, y, z, start, end_and_empty]`, where\n   * `x`, `y`, and `z` are the chunk grid coordinates of the entry at a particular level of detail.\n   * Row `n-1` corresponds to level of detail `lodScales.length - 1`, the root of the octree.  Given\n   * a row corresponding to an octree node at level of detail `lod`, bits `start` specifies the row\n   * number of the first child octree node at level of detail `lod-1`, and bits `[0,30]` of\n   * `end_and_empty` specify one past the row number of the last child octree node.  Bit `31` of\n   * `end_and_empty` is set to `1` if the mesh for the octree node is empty and should not be\n   * requested/rendered.\n   */\n  octree: Uint32Array;\n}\n\n/**\n * @param detailCutoff Factor by which the spatial resolution of the mesh may be worse than the\n *     spatial resolution of a single viewport pixel.  For example, a value of 10 means that if a\n *     given portion of the object will be rendered such that a pixel corresponds to 50 nm, then a\n *     mesh level of detail down to 500 nm will be requested for that portion of the object.\n */\nexport function getDesiredMultiscaleMeshChunks(\n    manifest: MultiscaleMeshManifest, modelViewProjection: mat4, clippingPlanes: Float32Array,\n    detailCutoff: number, viewportWidth: number, viewportHeight: number,\n    callback: (lod: number, row: number, renderScale: number, empty: number) => void) {\n  const {octree, lodScales, chunkGridSpatialOrigin, chunkShape} = manifest;\n  const maxLod = lodScales.length - 1;\n  const m00 = modelViewProjection[0], m01 = modelViewProjection[4], m02 = modelViewProjection[8],\n        m10 = modelViewProjection[1], m11 = modelViewProjection[5], m12 = modelViewProjection[9],\n        m30 = modelViewProjection[3], m31 = modelViewProjection[7], m32 = modelViewProjection[11],\n        m33 = modelViewProjection[15];\n\n  const minWXcoeff = m30 > 0 ? 0 : 1;\n  const minWYcoeff = m31 > 0 ? 0 : 1;\n  const minWZcoeff = m32 > 0 ? 0 : 1;\n\n\n  const nearA = clippingPlanes[4 * 4], nearB = clippingPlanes[4 * 4 + 1],\n        nearC = clippingPlanes[4 * 4 + 2], nearD = clippingPlanes[4 * 4 + 3];\n\n  function getPointW(x: number, y: number, z: number) {\n    return m30 * x + m31 * y + m32 * z + m33;\n  }\n\n  function getBoxW(\n      xLower: number, yLower: number, zLower: number, xUpper: number, yUpper: number,\n      zUpper: number) {\n    return getPointW(\n        xLower + minWXcoeff * (xUpper - xLower), yLower + minWYcoeff * (yUpper - yLower),\n        zLower + minWZcoeff * (zUpper - zLower));\n  }\n\n  /**\n   * Minimum value of w within clipping frustrum (under the assumption that the minimum value is\n   * occurs occurs on the near clipping plane).\n   */\n  const minWClip = getPointW(-nearD * nearA, -nearD * nearB, -nearD * nearC);\n\n  const objectXLower = manifest.clipLowerBound[0], objectYLower = manifest.clipLowerBound[1],\n        objectZLower = manifest.clipLowerBound[2];\n  const objectXUpper = manifest.clipUpperBound[0], objectYUpper = manifest.clipUpperBound[1],\n        objectZUpper = manifest.clipUpperBound[2];\n\n  const xScale = Math.sqrt((m00 * viewportWidth) ** 2 + (m10 * viewportHeight) ** 2);\n  const yScale = Math.sqrt((m01 * viewportWidth) ** 2 + (m11 * viewportHeight) ** 2);\n  const zScale = Math.sqrt((m02 * viewportWidth) ** 2 + (m12 * viewportHeight) ** 2);\n\n  const scaleFactor = Math.max(xScale, yScale, zScale);\n\n  function handleChunk(lod: number, row: number, priorLodScale: number) {\n    const size = 1 << lod;\n    const rowOffset = row * 5;\n    const gridX = octree[rowOffset], gridY = octree[rowOffset + 1], gridZ = octree[rowOffset + 2],\n          childBegin = octree[rowOffset + 3], childEndAndEmpty = octree[rowOffset + 4];\n    let xLower = gridX * size * chunkShape[0] + chunkGridSpatialOrigin[0],\n        yLower = gridY * size * chunkShape[1] + chunkGridSpatialOrigin[1],\n        zLower = gridZ * size * chunkShape[2] + chunkGridSpatialOrigin[2];\n    let xUpper = xLower + size * chunkShape[0], yUpper = yLower + size * chunkShape[1],\n        zUpper = zLower + size * chunkShape[2];\n    xLower = Math.max(xLower, objectXLower);\n    yLower = Math.max(yLower, objectYLower);\n    zLower = Math.max(zLower, objectZLower);\n    xUpper = Math.min(xUpper, objectXUpper);\n    yUpper = Math.min(yUpper, objectYUpper);\n    zUpper = Math.min(zUpper, objectZUpper);\n\n    if (isAABBVisible(xLower, yLower, zLower, xUpper, yUpper, zUpper, clippingPlanes)) {\n      const minW = Math.max(minWClip, getBoxW(xLower, yLower, zLower, xUpper, yUpper, zUpper));\n      const pixelSize = minW / scaleFactor;\n\n      if (priorLodScale === 0 || pixelSize * detailCutoff < priorLodScale) {\n        const lodScale = lodScales[lod];\n        if (lodScale !== 0) {\n          callback(lod, row, lodScale / pixelSize, (childEndAndEmpty >>> 31));\n        }\n\n        if (lod > 0 && (lodScale === 0 || pixelSize * detailCutoff < lodScale)) {\n          const nextPriorLodScale = lodScale === 0 ? priorLodScale : lodScale;\n          const childEnd = (childEndAndEmpty & 0x7FFFFFFF) >>> 0;\n          for (let childRow = childBegin; childRow < childEnd; ++childRow) {\n            handleChunk(lod - 1, childRow, nextPriorLodScale);\n          }\n        }\n      }\n    }\n  }\n  handleChunk(maxLod, octree.length / 5 - 1, 0);\n}\n\nexport function getMultiscaleChunksToDraw(\n    manifest: MultiscaleMeshManifest, modelViewProjection: mat4, clippingPlanes: Float32Array,\n    detailCutoff: number, viewportWidth: number, viewportHeight: number,\n    hasChunk: (lod: number, row: number, renderScale: number) => boolean,\n    callback: (\n        lod: number, row: number, subChunkBegin: number, subChunkEnd: number,\n        renderScale: number) => void) {\n  const {lodScales} = manifest;\n  let maxLod = 0;\n  while (maxLod + 1 < lodScales.length && lodScales[maxLod + 1] !== 0) {\n    ++maxLod;\n  }\n  const stackEntryStride = 3;\n\n  // [row, parentSubChunkIndex, renderScale]\n  const stack: number[] = [];\n  let stackDepth = 0;\n  let priorSubChunkIndex = 0;\n  function emitChunksUpTo(targetStackIndex: number, subChunkIndex: number) {\n    while (true) {\n      if (stackDepth === 0) return;\n\n      // Finish last chunk of last (finest) lod.\n      const stackIndex = stackDepth - 1;\n      const entryLod = maxLod - stackIndex;\n      const entryRow = stack[stackIndex * stackEntryStride];\n      const numSubChunks = entryLod === 0 ? 1 : 8;\n      const entrySubChunkIndex = stack[stackIndex * stackEntryStride + 1];\n      const entryRenderScale = stack[stackIndex * stackEntryStride + 2];\n      if (targetStackIndex === stackDepth) {\n        const endSubChunk = subChunkIndex & (numSubChunks - 1);\n\n        if (priorSubChunkIndex !== endSubChunk && entryRow !== -1) {\n          callback(entryLod, entryRow, priorSubChunkIndex, endSubChunk, entryRenderScale);\n        }\n        priorSubChunkIndex = endSubChunk + 1;\n        return;\n      }\n      if (priorSubChunkIndex !== numSubChunks && entryRow !== -1) {\n        callback(entryLod, entryRow, priorSubChunkIndex, numSubChunks, entryRenderScale);\n      }\n      priorSubChunkIndex = entrySubChunkIndex + 1;\n      --stackDepth;\n    }\n  }\n\n  let priorMissingLod = 0;\n\n  const {octree} = manifest;\n  getDesiredMultiscaleMeshChunks(\n      manifest, modelViewProjection, clippingPlanes, detailCutoff, viewportWidth, viewportHeight,\n      (lod, row, renderScale, empty) => {\n        if (!empty && !hasChunk(lod, row, renderScale)) {\n          priorMissingLod = Math.max(lod, priorMissingLod);\n          return;\n        }\n        if (lod < priorMissingLod) return;\n        priorMissingLod = 0;\n        const rowOffset = row * 5;\n        const x = octree[rowOffset], y = octree[rowOffset + 1], z = octree[rowOffset + 2];\n        const subChunkIndex = getOctreeChildIndex(x, y, z);\n        const stackIndex = maxLod - lod;\n        emitChunksUpTo(stackIndex, subChunkIndex);\n        const stackOffset = stackIndex * stackEntryStride;\n        stack[stackOffset] = empty ? -1 : row;\n        stack[stackOffset + 1] = subChunkIndex;\n        stack[stackOffset + 2] = renderScale;\n        priorSubChunkIndex = 0;\n        stackDepth = stackIndex + 1;\n      });\n\n  emitChunksUpTo(0, 0);\n}\n\nexport function validateOctree(octree: Uint32Array) {\n  if (octree.length % 5 !== 0) {\n    throw new Error('Invalid length');\n  }\n  const numNodes = octree.length / 5;\n  const seenNodes = new Set<number>();\n  function exploreNode(node: number) {\n    if (seenNodes.has(node)) {\n      throw new Error('Previously seen node');\n    }\n    seenNodes.add(node);\n    if (node < 0 || node >= numNodes) {\n      throw new Error('Invalid node reference');\n    }\n    const x = octree[node * 5], y = octree[node * 5 + 1], z = octree[node * 5 + 2],\n          beginChild = octree[node * 5 + 3], endChild = octree[node * 5 + 4];\n    if (beginChild < 0 || endChild < 0 || endChild < beginChild || endChild > numNodes ||\n        beginChild + 8 < endChild) {\n      throw new Error('Invalid child references');\n    }\n    for (let child = beginChild; child < endChild; ++child) {\n      const childX = octree[child * 5], childY = octree[child * 5 + 1],\n            childZ = octree[child * 5 + 2];\n      if ((childX >>> 1) !== x || (childY >>> 1) !== y || (childZ >>> 1) != z) {\n        throw new Error('invalid child');\n      }\n      exploreNode(child);\n    }\n  }\n  if (numNodes === 0) return;\n  exploreNode(numNodes - 1);\n}\n\nexport function getMultiscaleFragmentKey(objectKey: string, lod: number, chunkIndex: number) {\n  return `${objectKey}/${lod}:${chunkIndex}`;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Conversion from independent triangles to triangle strips.\n *\n * http://www.codercorner.com/Strips.htm\n */\n\nimport {hashCombine} from 'neuroglancer/gpu_hash/hash_function';\nimport {MeshVertexIndices} from 'neuroglancer/mesh/base';\n\nconst DEBUG_TIMING = false;\n\n/**\n * Sorts the vertex indices for each triangle in ascending order.\n *\n * This ensures later edge comparisons can be done more efficiently.  This can reverse face\n * orientations, which would normally be a problem, but since we render all faces as double-sided it\n * isn't an issue.\n */\nfunction normalizeTriangleVertexOrder(indices: MeshVertexIndices) {\n  let maxVertex = 0;\n  for (let i = 0, length = indices.length; i < length; i += 3) {\n    let a = indices[i], b = indices[i + 1], c = indices[i + 2];\n    let t: number;\n    if (a > b) {\n      t = a;\n      a = b;\n      b = t;\n    }\n    if (b > c) {\n      t = b;\n      b = c;\n      c = t;\n    }\n    if (a > b) {\n      t = a;\n      a = b;\n      b = t;\n    }\n    indices[i] = a;\n    indices[i + 1] = b;\n    indices[i + 2] = c;\n    if (c > maxVertex) maxVertex = c;\n  }\n  return maxVertex;\n}\n\nlet collisions = 0;\nfunction hashTableInsert(\n    table: Uint32Array, numBuckets: number, value: number, emptyValue: number, hashCode: number,\n    equals: (x: number) => boolean) {\n  const mask = (numBuckets - 1) >>> 0;\n  let bucket = (hashCode & mask) >>> 0;\n  for (let probe = 0; true; ++probe) {\n    const x = table[bucket];\n    if (x === emptyValue) {\n      table[bucket] = value;\n      return value;\n    }\n    if (equals(x)) {\n      return x;\n    }\n    ++collisions;\n    bucket = ((bucket + probe + 1) & mask) >>> 0;\n  }\n}\n\nfunction hashEdge(a: number, b: number) {\n  return hashCombine(hashCombine(0, a), b);\n}\n\n// edgeIndex: 0, 1, 2\n// vertexA:   0  0  1   <-  bit 1\n// vertexB:   1  2  2   <-  1 + bit 1  of (edgeIndex + 1)\n// vertexC:   2  1  0   <-  2 - edgeIndex\n\n// BC         2  2  1\n// BC flipped 0  1  1\n// AC         1  0  0\n// AC flipped 0  0  1\n\n// Lookup table, where the 3 bits starting at (edgeIndex * 3 + flipped * 12) specify the new value\n// of `edgeIndexAndFlipped`.\nconst nextEdgeTable = 0b1_00_0_00_0_01_000_1_01_1_10_0_10;\n\n/**\n * Computes the edge index and flipped state in a triangle strip for the next edge after the given\n * edge.\n *\n * @param edgeIndexAndFlipped Bits 0,1 specify the `edgeIndex` in the range `[0, 2]` corresponding\n *     to the last edge that was traversed.  Bit 2 specifies the `flipped` state.  If `flipped` is\n *     equal to 0, the last two emitted vertices are B and C relative to `edgeIndex`.  If `flipped`\n *     is equal to 1, the last two emitted vertices are A and C relative to `edgeIndex`.\n * @returns The next `edgeIndexAndFlipped` value specifying `nextEdgeIndex` and `nextFlipped`.  If\n *     `flipped == 0`, `nextEdgeIndex` corresponds to the B-C edge relative to `edgeIndex`; if\n *     `flipped == 1`, `nextEdgeIndex` correspond to the A-C edge relative to `edgeIndex`.  The\n *     `nextFlipped` value is equal to 1 iff `vertexCIndex(edgeIndex) ==\n *     vertexAIndex(nextEdgeIndex)`.\n */\nexport function getNextEdge(edgeIndexAndFlipped: number) {\n  return (nextEdgeTable >>> (edgeIndexAndFlipped * 3)) & 7;\n}\n\nexport function getBaseIndex(entry: number) {\n  return (entry >>> 2) * 3;\n}\n\nexport function getEdgeIndex(entry: number) {\n  return entry & 3;\n}\n\n/**\n * Computes the first vertex offset for the given edge.\n *\n * @returns `[0, 0, 1][edgeIndex]`\n */\nexport function vertexAIndex(edgeIndex: number) {\n  return edgeIndex >>> 1;\n}\n\n/**\n * Computes the second vertex offset for the given edge.\n *\n * @returns `[1, 2, 2][edgeIndex]`\n */\nexport function vertexBIndex(edgeIndex: number) {\n  return 1 + ((edgeIndex + 1) >>> 1);\n}\n\n/**\n * Computes the opposite vertex offset for the given edge.\n *\n * @returns `[2, 1, 0][edgeIndex]`\n */\nexport function vertexCIndex(edgeIndex: number) {\n  return 2 - edgeIndex;\n}\n\nexport function getEdgeMapSize(numIndices: number) {\n  const numEdges = numIndices;\n\n  // Choose quadratic probing hash table size to be the smallest power of 2 greater than `numEdges`.\n  const edgeMapSize = 2 ** Math.ceil(Math.log2(numEdges));\n  return edgeMapSize * 4;\n}\n\nfunction computeTriangleAdjacencies(\n    triangleAdjacencies: Uint32Array, indices: MeshVertexIndices,\n    edgeMap: Uint32Array): Uint32Array {\n  const numTriangles = indices.length / 3;\n  // Row-major array of shape `[numTriangles, 3]` specifying the triangles adjacent to each\n  // triangle.  The triangle index `i` corresponds to elements `[i * 3, (i + 1) * 3)` of the\n  // `indices` array.  For each triangle, columns 0 to 2 are the indices of the triangles adjacent\n  // to edge 0-1, edge 0-2, and edge 1-2, respectively.\n\n  const edgeMapSize = edgeMap.length;\n  const emptyEntry = 0xFFFFFFFF;\n  triangleAdjacencies.fill(emptyEntry);\n  edgeMap.fill(emptyEntry);\n\n  // Insert edges\n  for (let triangle = 0; triangle < numTriangles; ++triangle) {\n    const baseIndex = triangle * 3;\n    for (let edgeIndex = 0; edgeIndex < 3; ++edgeIndex) {\n      const vertexA0 = indices[baseIndex + vertexAIndex(edgeIndex)];\n      const vertexB0 = indices[baseIndex + vertexBIndex(edgeIndex)];\n      const newEntry = (triangle << 2) | edgeIndex;\n      const existingEntry = hashTableInsert(\n          edgeMap, edgeMapSize, newEntry, emptyEntry, hashEdge(vertexA0, vertexB0), x => {\n            const otherBaseIndex = getBaseIndex(x);\n            const otherEdgeIndex = getEdgeIndex(x);\n            const vertexA1 = indices[otherBaseIndex + vertexAIndex(otherEdgeIndex)];\n            const vertexB1 = indices[otherBaseIndex + vertexBIndex(otherEdgeIndex)];\n            // console.log('checking equality', vertexA0, vertexA1, vertexB0, vertexB1);\n            return vertexA0 === vertexA1 && vertexB0 === vertexB1;\n          });\n      if (existingEntry !== newEntry) {\n        const otherBaseIndex = getBaseIndex(existingEntry);\n        const otherEdgeIndex = getEdgeIndex(existingEntry);\n        triangleAdjacencies[otherBaseIndex + otherEdgeIndex] = newEntry;\n        triangleAdjacencies[baseIndex + edgeIndex] = existingEntry;\n      }\n    }\n  }\n\n  return triangleAdjacencies;\n}\n\nfunction emitTriangleStrips(\n    indices: MeshVertexIndices, triangleAdjacencies: Uint32Array, output: MeshVertexIndices,\n    outputIndex: number): number {\n  const invalidVertex = ~0 >>> (32 - 8 * output.BYTES_PER_ELEMENT);\n  const numIndices = indices.length;\n  const numTriangles = numIndices / 3;\n  const emptyEntry = 0xFFFFFFFF;\n\n  // Extract strips\n  startNewStrip: for (let triangle = 0; triangle < numTriangles; ++triangle) {\n    let baseIndex = triangle * 3;\n    if (indices[baseIndex] === invalidVertex) {\n      // Triangle was already emitted.\n      continue;\n    }\n    for (let edgeIndex = 0; edgeIndex < 3; ++edgeIndex) {\n      let entry = triangleAdjacencies[baseIndex + edgeIndex];\n      if (entry === emptyEntry) continue;\n      let otherBaseIndex = getBaseIndex(entry);\n      if (indices[otherBaseIndex] === invalidVertex) continue;\n      let otherEdgeIndex = getEdgeIndex(entry);\n      output[outputIndex++] = indices[baseIndex + vertexCIndex(edgeIndex)];\n      output[outputIndex++] = indices[baseIndex + vertexAIndex(edgeIndex)];\n      output[outputIndex++] = indices[baseIndex + vertexBIndex(edgeIndex)];\n\n      let edgeIndexAndFlipped = otherEdgeIndex;\n\n      while (true) {\n        indices[baseIndex] = invalidVertex;\n        baseIndex = otherBaseIndex;\n        output[outputIndex++] = indices[baseIndex + vertexCIndex(edgeIndexAndFlipped & 3)];\n\n        edgeIndexAndFlipped = getNextEdge(edgeIndexAndFlipped);\n\n        entry = triangleAdjacencies[baseIndex + (edgeIndexAndFlipped & 3)];\n        if (entry === emptyEntry ||\n            indices[(otherBaseIndex = getBaseIndex(entry))] === invalidVertex) {\n          // console.log(stripLength);\n          // End of strip.  Emit restart index.\n          output[outputIndex++] = invalidVertex;\n          indices[baseIndex] = invalidVertex;\n          continue startNewStrip;\n        }\n        edgeIndexAndFlipped = getEdgeIndex(entry) | (edgeIndexAndFlipped & 4);\n      }\n    }\n    // Emit isolated triangle.\n    output[outputIndex++] = indices[baseIndex];\n    output[outputIndex++] = indices[baseIndex + 1];\n    output[outputIndex++] = indices[baseIndex + 2];\n    indices[baseIndex] = invalidVertex;\n    output[outputIndex++] = invalidVertex;\n  }\n  return outputIndex;\n}\n\nexport function computeTriangleStrips<T extends MeshVertexIndices>(\n    indices: T, subChunkOffsets?: Uint32Array): MeshVertexIndices {\n  if (indices.length === 0) return indices;\n  collisions = 0;\n  if (subChunkOffsets === undefined) {\n    subChunkOffsets = Uint32Array.of(0, indices.length);\n  }\n  let adjacenciesElapsed = 0;\n  let emitElapsed = 0;\n  let startTime = 0, midTime = 0, endTime = 0;\n\n  const maxVertexIndex = normalizeTriangleVertexOrder(indices);\n  const outputBufferSize = indices.length / 3 * 4;\n  const output = maxVertexIndex >= 65535 ? new Uint32Array(outputBufferSize) :\n                                           new Uint16Array(outputBufferSize);\n  let outputIndex = 0;\n\n  let maxSubChunkIndices = 0;\n  const numSubChunks = subChunkOffsets.length - 1;\n  for (let subChunk = 0; subChunk < numSubChunks; ++subChunk) {\n    maxSubChunkIndices =\n        Math.max(maxSubChunkIndices, subChunkOffsets[subChunk + 1] - subChunkOffsets[subChunk]);\n  }\n\n  const triangleAdjacencies = new Uint32Array(maxSubChunkIndices);\n  const edgeMap = new Uint32Array(getEdgeMapSize(maxSubChunkIndices));\n\n  let subChunkOffset = subChunkOffsets[0];\n  for (let subChunk = 0; subChunk < numSubChunks; ++subChunk) {\n    subChunkOffsets[subChunk] = outputIndex;\n    const subChunkEnd = subChunkOffsets[subChunk + 1];\n    const subIndices = indices.subarray(subChunkOffset, subChunkEnd);\n    if (DEBUG_TIMING) startTime = Date.now();\n    computeTriangleAdjacencies(triangleAdjacencies, subIndices, edgeMap);\n    if (DEBUG_TIMING) midTime = Date.now();\n    outputIndex = emitTriangleStrips(subIndices, triangleAdjacencies, output, outputIndex);\n    if (DEBUG_TIMING) {\n      endTime = Date.now();\n      adjacenciesElapsed += (midTime - startTime);\n      emitElapsed += (endTime - midTime);\n    }\n    subChunkOffset = subChunkEnd;\n  }\n  --outputIndex;\n  subChunkOffsets[numSubChunks] = outputIndex;\n  const shrunkOutput: T = new (output.constructor as any)(outputIndex);\n  shrunkOutput.set(output.subarray(0, outputIndex));\n  if (DEBUG_TIMING) {\n    console.log(`reduced from ${indices.byteLength}(${indices.BYTES_PER_ELEMENT}) -> ${\n        shrunkOutput.byteLength}(${shrunkOutput.BYTES_PER_ELEMENT}): adj=${\n        adjacenciesElapsed}, emit=${emitElapsed}, ${collisions}/${indices.length} collisions`);\n  }\n  return shrunkOutput;\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Chunk, ChunkSource} from 'neuroglancer/chunk_manager/backend';\nimport {ChunkPriorityTier, ChunkState} from 'neuroglancer/chunk_manager/base';\nimport {EncodedMeshData, EncodedVertexPositions, FRAGMENT_SOURCE_RPC_ID, MESH_LAYER_RPC_ID, MeshVertexIndices, MULTISCALE_FRAGMENT_SOURCE_RPC_ID, MULTISCALE_MESH_LAYER_RPC_ID, MultiscaleFragmentFormat, VertexPositionFormat} from 'neuroglancer/mesh/base';\nimport {getDesiredMultiscaleMeshChunks, MultiscaleMeshManifest} from 'neuroglancer/mesh/multiscale';\nimport {computeTriangleStrips} from 'neuroglancer/mesh/triangle_strips';\nimport {PerspectiveViewRenderLayer, PerspectiveViewState} from 'neuroglancer/perspective_view/backend';\nimport {SegmentationLayerSharedObjectCounterpart} from 'neuroglancer/segmentation_display_state/backend';\nimport {getObjectKey} from 'neuroglancer/segmentation_display_state/base';\nimport {forEachVisibleSegment} from 'neuroglancer/segmentation_display_state/base';\nimport {WatchableSet} from 'neuroglancer/trackable_value';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {convertEndian32, Endianness} from 'neuroglancer/util/endian';\nimport {getFrustrumPlanes, mat4, vec3} from 'neuroglancer/util/geom';\nimport {verifyObject, verifyObjectProperty, verifyStringArray} from 'neuroglancer/util/json';\nimport {Uint64} from 'neuroglancer/util/uint64';\nimport {zorder3LessThan} from 'neuroglancer/util/zorder';\nimport {getBasePriority, getPriorityTier} from 'neuroglancer/visibility_priority/backend';\nimport {registerSharedObject, RPC} from 'neuroglancer/worker_rpc';\n\nconst MESH_OBJECT_MANIFEST_CHUNK_PRIORITY = 100;\nconst MESH_OBJECT_FRAGMENT_CHUNK_PRIORITY = 50;\n\nconst CONVERT_TO_TRIANGLE_STRIPS = false;\n\nexport type FragmentId = string;\n\n// Chunk that contains the list of fragments that make up a single object.\nexport class ManifestChunk extends Chunk {\n  objectId = new Uint64();\n  fragmentIds: FragmentId[]|null;\n\n  constructor() {\n    super();\n  }\n  // We can't save a reference to objectId, because it may be a temporary\n  // object.\n  initializeManifestChunk(key: string, objectId: Uint64) {\n    super.initialize(key);\n    this.objectId.assign(objectId);\n  }\n\n  freeSystemMemory() {\n    this.fragmentIds = null;\n  }\n\n  serialize(msg: any, transfers: any[]) {\n    super.serialize(msg, transfers);\n    msg.fragmentIds = this.fragmentIds;\n  }\n\n  downloadSucceeded() {\n    // We can't easily determine the memory usage of the JSON manifest.  Just use 100 bytes as a\n    // default value.\n    this.systemMemoryBytes = 100;\n    this.gpuMemoryBytes = 0;\n    super.downloadSucceeded();\n    if (this.priorityTier < ChunkPriorityTier.RECENT) {\n      this.source!.chunkManager.scheduleUpdateChunkPriorities();\n    }\n  }\n\n  toString() {\n    return this.objectId.toString();\n  }\n}\n\nexport interface RawMeshData {\n  vertexPositions: Float32Array|Uint32Array;\n  indices: MeshVertexIndices;\n}\n\nexport interface RawPartitionedMeshData extends RawMeshData {\n  subChunkOffsets: Uint32Array;\n}\n\nfunction serializeMeshData(data: EncodedMeshData, msg: any, transfers: any[]) {\n  const {vertexPositions, indices, vertexNormals, strips} = data;\n  msg['vertexPositions'] = vertexPositions;\n  msg['indices'] = indices;\n  msg['strips'] = strips;\n  msg['vertexNormals'] = vertexNormals;\n  let vertexPositionsBuffer = vertexPositions!.buffer;\n  transfers.push(vertexPositionsBuffer);\n  let indicesBuffer = indices!.buffer;\n  if (indicesBuffer !== vertexPositionsBuffer) {\n    transfers.push(indicesBuffer);\n  }\n  transfers.push(vertexNormals!.buffer);\n}\n\nfunction getMeshDataSize(data: EncodedMeshData) {\n  let {vertexPositions, indices, vertexNormals} = data;\n  return vertexPositions!.byteLength + indices!.byteLength + vertexNormals!.byteLength;\n}\n\n/**\n * Chunk that contains the mesh for a single fragment of a single object.\n */\nexport class FragmentChunk extends Chunk {\n  manifestChunk: ManifestChunk|null = null;\n  fragmentId: FragmentId|null = null;\n  meshData: EncodedMeshData|null = null;\n  constructor() {\n    super();\n  }\n  initializeFragmentChunk(key: string, manifestChunk: ManifestChunk, fragmentId: FragmentId) {\n    super.initialize(key);\n    this.manifestChunk = manifestChunk;\n    this.fragmentId = fragmentId;\n  }\n  freeSystemMemory() {\n    this.manifestChunk = null;\n    this.meshData = null;\n    this.fragmentId = null;\n  }\n  serialize(msg: any, transfers: any[]) {\n    super.serialize(msg, transfers);\n    serializeMeshData(this.meshData!, msg, transfers);\n    this.meshData = null;\n  }\n  downloadSucceeded() {\n    this.systemMemoryBytes = this.gpuMemoryBytes = getMeshDataSize(this.meshData!);\n    super.downloadSucceeded();\n  }\n}\n\n/**\n * Assigns chunk.fragmentKeys to response[keysPropertyName].\n *\n * Verifies that response[keysPropertyName] is an array of strings.\n */\nexport function decodeJsonManifestChunk(\n    chunk: ManifestChunk, response: any, keysPropertyName: string) {\n  verifyObject(response);\n  chunk.fragmentIds = verifyObjectProperty(response, keysPropertyName, verifyStringArray);\n}\n\n/**\n * Computes normal vectors for each vertex of a triangular mesh.\n *\n * The normal vector for each triangle with vertices (v0, v1, v2) is computed as the (normalized)\n * cross product of (v1 - v0, v2 - v1).  The normal vector for each vertex is obtained by averaging\n * the normal vector of each of the triangles that contains it.\n *\n * @param positions The vertex positions in [x0, y0, z0, x1, y1, z1, ...] format.\n * @param indices The indices of the triangle vertices.  Each triplet of consecutive values\n *     specifies a triangle.\n */\nexport function computeVertexNormals(\n    positions: Float32Array|Uint8Array|Uint16Array|Uint32Array,\n    indices: Uint8Array|Uint16Array|Uint32Array) {\n  const faceNormal = vec3.create();\n  const v1v0 = vec3.create();\n  const v2v1 = vec3.create();\n  let vertexNormals = new Float32Array(positions.length);\n  let numIndices = indices.length;\n  for (let i = 0; i < numIndices; i += 3) {\n    let i0 = indices[i] * 3, i1 = indices[i + 1] * 3, i2 = indices[i + 2] * 3;\n    for (let j = 0; j < 3; ++j) {\n      v1v0[j] = positions[i1 + j] - positions[i0 + j];\n      v2v1[j] = positions[i2 + j] - positions[i1 + j];\n    }\n    vec3.cross(faceNormal, v1v0, v2v1);\n    vec3.normalize(faceNormal, faceNormal);\n\n    for (let k = 0; k < 3; ++k) {\n      let index = indices[i + k];\n      let offset = index * 3;\n      for (let j = 0; j < 3; ++j) {\n        vertexNormals[offset + j] += faceNormal[j];\n      }\n    }\n  }\n  // Normalize all vertex normals.\n  let numVertices = vertexNormals.length;\n  for (let i = 0; i < numVertices; i += 3) {\n    let vec = <vec3>vertexNormals.subarray(i, i + 3);\n    vec3.normalize(vec, vec);\n  }\n  return vertexNormals;\n}\n\n/**\n * Converts a floating-point number in the range `[-1, 1]` to an integer in the range `[-127, 127]`.\n */\nfunction snorm8(x: number) {\n  return Math.min(Math.max(-127, x * 127 + 0.5), 127) >>> 0;\n}\n\nfunction signNotZero(x: number) {\n  return x < 0 ? -1 : 1;\n}\n\n/**\n * Encodes normal vectors represented as 3x32-bit floating vectors into a 2x8-bit octahedron\n * representation.\n *\n * Zina H. Cigolle, Sam Donow, Daniel Evangelakos, Michael Mara, Morgan McGuire, and Quirin Meyer,\n * Survey of Efficient Representations for Independent Unit Vectors, Journal of Computer Graphics\n * Techniques (JCGT), vol. 3, no. 2, 1-30, 2014\n *\n * Available online http://jcgt.org/published/0003/02/01/\n *\n * @param out[out] Row-major array of shape `[n, 2]` set to octahedron representation.\n * @param normals[in] Row-major array of shape `[n, 3]` specifying unit normal vectors.\n */\nexport function encodeNormals32fx3ToOctahedron8x2(out: Uint8Array, normals: Float32Array) {\n  const length = normals.length;\n  let outIndex = 0;\n  for (let i = 0; i < length; i += 3) {\n    const x = normals[i], y = normals[i + 1], z = normals[i + 2];\n\n    const invL1Norm = 1 / (Math.abs(x) + Math.abs(y) + Math.abs(z));\n\n    if (z < 0) {\n      out[outIndex] = snorm8((1 - Math.abs(y * invL1Norm)) * signNotZero(x));\n      out[outIndex + 1] = snorm8((1 - Math.abs(x * invL1Norm)) * signNotZero(y));\n    } else {\n      out[outIndex] = snorm8(x * invL1Norm);\n      out[outIndex + 1] = snorm8(y * invL1Norm);\n    }\n    outIndex += 2;\n  }\n}\n\n/**\n * Extracts vertex positions and indices of the specified endianness from `data'.\n *\n * The vertexByteOffset specifies the byte offset into `data' of the start of the vertex position\n * data.  The vertex data must consist of verticesPerPrimitive * numVertices 32-bit float values.\n *\n * If indexByteOffset is not specified, it defaults to the end of the vertex position data.  If\n * numPrimitives is not specified, it is assumed that the index data continues until the end of the\n * array.\n */\nexport function decodeVertexPositionsAndIndices(\n    verticesPerPrimitive: number, data: ArrayBuffer, endianness: Endianness,\n    vertexByteOffset: number, numVertices: number, indexByteOffset?: number,\n    numPrimitives?: number): RawMeshData {\n  let vertexPositions = new Float32Array(data, vertexByteOffset, numVertices * 3);\n  convertEndian32(vertexPositions, endianness);\n\n  if (indexByteOffset === undefined) {\n    indexByteOffset = vertexByteOffset + 12 * numVertices;\n  }\n\n  let numIndices: number|undefined;\n  if (numPrimitives !== undefined) {\n    numIndices = numPrimitives * verticesPerPrimitive;\n  }\n\n  // For compatibility with Firefox, length argument must not be undefined.\n  let indices = numIndices === undefined ? new Uint32Array(data, indexByteOffset) :\n                                           new Uint32Array(data, indexByteOffset, numIndices);\n  if (indices.length % verticesPerPrimitive !== 0) {\n    throw new Error(\n        `Number of indices is not a multiple of ${verticesPerPrimitive}: ${indices.length}.`);\n  }\n  convertEndian32(indices, endianness);\n\n  return {vertexPositions, indices};\n}\n\n/**\n * Extracts vertex positions and triangle vertex indices of the specified endianness from `data'.\n *\n * Vertex normals are computed.\n *\n * See decodeVertexPositionsAndIndices above.\n */\nexport function decodeTriangleVertexPositionsAndIndices(\n    data: ArrayBuffer, endianness: Endianness, vertexByteOffset: number, numVertices: number,\n    indexByteOffset?: number, numTriangles?: number) {\n  return decodeVertexPositionsAndIndices(\n      /*verticesPerPrimitive=*/ 3, data, endianness, vertexByteOffset, numVertices, indexByteOffset,\n      numTriangles);\n}\n\nexport interface MeshSource {\n  // TODO(jbms): Move this declaration to class definition below and declare abstract once\n  // TypeScript supports mixins with abstract classes.\n  downloadFragment(chunk: FragmentChunk, cancellationToken: CancellationToken): Promise<void>;\n}\n\nexport class MeshSource extends ChunkSource {\n  fragmentSource: FragmentSource;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    let fragmentSource = this.fragmentSource =\n        this.registerDisposer(rpc.getRef<FragmentSource>(options['fragmentSource']));\n    fragmentSource.meshSource = this;\n  }\n\n  getChunk(objectId: Uint64) {\n    const key = getObjectKey(objectId);\n    let chunk = <ManifestChunk>this.chunks.get(key);\n    if (chunk === undefined) {\n      chunk = this.getNewChunk_(ManifestChunk);\n      chunk.initializeManifestChunk(key, objectId);\n      this.addChunk(chunk);\n    }\n    return chunk;\n  }\n\n  getFragmentChunk(manifestChunk: ManifestChunk, fragmentId: FragmentId) {\n    let key = `${manifestChunk.key}/${fragmentId}`;\n    let fragmentSource = this.fragmentSource;\n    let chunk = <FragmentChunk>fragmentSource.chunks.get(key);\n    if (chunk === undefined) {\n      chunk = fragmentSource.getNewChunk_(FragmentChunk);\n      chunk.initializeFragmentChunk(key, manifestChunk, fragmentId);\n      fragmentSource.addChunk(chunk);\n    }\n    return chunk;\n  }\n}\n\n@registerSharedObject(FRAGMENT_SOURCE_RPC_ID)\nexport class FragmentSource extends ChunkSource {\n  meshSource: MeshSource|null = null;\n  download(chunk: FragmentChunk, cancellationToken: CancellationToken) {\n    return this.meshSource!.downloadFragment(chunk, cancellationToken);\n  }\n}\n\n@registerSharedObject(MESH_LAYER_RPC_ID)\nexport class MeshLayer extends SegmentationLayerSharedObjectCounterpart implements\n    PerspectiveViewRenderLayer {\n  source: MeshSource;\n  viewStates = new WatchableSet<PerspectiveViewState>();\n  private viewStatesDisposers = new Map<PerspectiveViewState, () => void>();\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.source = this.registerDisposer(rpc.getRef<MeshSource>(options['source']));\n    this.registerDisposer(this.chunkManager.recomputeChunkPriorities.add(() => {\n      this.updateChunkPriorities();\n    }));\n    const scheduleUpdateChunkPriorities = () => {\n      this.chunkManager.scheduleUpdateChunkPriorities();\n    };\n    this.registerDisposer(this.viewStates.changed.add(() => {\n      const {viewStatesDisposers} = this;\n      const {viewStates} = this;\n      for (const [viewState, disposer] of viewStatesDisposers) {\n        if (!viewStates.has(viewState)) {\n          disposer();\n        }\n      }\n      for (const viewState of viewStates) {\n        if (!viewStatesDisposers.has(viewState)) {\n          viewState.viewport.changed.add(scheduleUpdateChunkPriorities);\n          viewState.visibility.changed.add(scheduleUpdateChunkPriorities);\n          viewStatesDisposers.set(viewState, () => {\n            viewState.viewport.changed.remove(scheduleUpdateChunkPriorities);\n            viewState.visibility.changed.remove(scheduleUpdateChunkPriorities);\n          });\n        }\n      }\n    }));\n    this.registerDisposer(() => {\n      for (const disposer of this.viewStatesDisposers.values()) {\n        disposer();\n      }\n    });\n  }\n\n  private updateChunkPriorities() {\n    const visibility = this.visibility.value;\n    if (visibility === Number.NEGATIVE_INFINITY) {\n      return;\n    }\n    const priorityTier = getPriorityTier(visibility);\n    const basePriority = getBasePriority(visibility);\n    const {source, chunkManager} = this;\n    forEachVisibleSegment(this, objectId => {\n      let manifestChunk = source.getChunk(objectId);\n      chunkManager.requestChunk(\n          manifestChunk, priorityTier, basePriority + MESH_OBJECT_MANIFEST_CHUNK_PRIORITY);\n      const state = manifestChunk.state;\n      if (state === ChunkState.SYSTEM_MEMORY_WORKER || state === ChunkState.SYSTEM_MEMORY ||\n          state === ChunkState.GPU_MEMORY) {\n        for (let fragmentId of manifestChunk.fragmentIds!) {\n          let fragmentChunk = source.getFragmentChunk(manifestChunk, fragmentId);\n          chunkManager.requestChunk(\n              fragmentChunk, priorityTier, basePriority + MESH_OBJECT_FRAGMENT_CHUNK_PRIORITY);\n        }\n      }\n    });\n  }\n}\n\n\n\n// Chunk that contains the list of fragments that make up a single object.\nexport class MultiscaleManifestChunk extends Chunk {\n  objectId = new Uint64();\n  manifest: MultiscaleMeshManifest|undefined;\n\n  constructor() {\n    super();\n  }\n  // We can't save a reference to objectId, because it may be a temporary\n  // object.\n  initializeManifestChunk(key: string, objectId: Uint64) {\n    super.initialize(key);\n    this.objectId.assign(objectId);\n  }\n\n  freeSystemMemory() {\n    this.manifest = undefined;\n  }\n\n  serialize(msg: any, transfers: any[]) {\n    super.serialize(msg, transfers);\n    msg.manifest = this.manifest;\n  }\n\n  downloadSucceeded() {\n    this.systemMemoryBytes = this.manifest!.octree.byteLength;\n    this.gpuMemoryBytes = 0;\n    super.downloadSucceeded();\n    if (this.priorityTier < ChunkPriorityTier.RECENT) {\n      this.source!.chunkManager.scheduleUpdateChunkPriorities();\n    }\n  }\n\n  toString() {\n    return this.objectId.toString();\n  }\n}\n\n/**\n * Chunk that contains the mesh for a single fragment of a single object.\n */\nexport class MultiscaleFragmentChunk extends Chunk {\n  subChunkOffsets: Uint32Array|null = null;\n  meshData: EncodedMeshData|null = null;\n  lod: number = 0;\n  chunkIndex: number = 0;\n  manifestChunk: MultiscaleManifestChunk|null = null;\n  constructor() {\n    super();\n  }\n  freeSystemMemory() {\n    this.meshData = this.subChunkOffsets = null;\n  }\n  serialize(msg: any, transfers: any[]) {\n    super.serialize(msg, transfers);\n    serializeMeshData(this.meshData!, msg, transfers);\n    const {subChunkOffsets} = this;\n    msg['subChunkOffsets'] = subChunkOffsets;\n    transfers.push(subChunkOffsets!.buffer);\n    this.meshData = this.subChunkOffsets = null;\n  }\n  downloadSucceeded() {\n    const {subChunkOffsets} = this;\n    this.systemMemoryBytes = this.gpuMemoryBytes = getMeshDataSize(this.meshData!);\n    this.systemMemoryBytes += subChunkOffsets!.byteLength;\n    super.downloadSucceeded();\n  }\n}\n\n\n\nexport interface MultiscaleMeshSource {\n  // TODO(jbms): Move this declaration to class definition below and declare abstract once\n  // TypeScript supports mixins with abstract classes.\n  downloadFragment(chunk: MultiscaleFragmentChunk, cancellationToken: CancellationToken):\n      Promise<void>;\n}\n\nexport class MultiscaleMeshSource extends ChunkSource {\n  fragmentSource: MultiscaleFragmentSource;\n  format: MultiscaleFragmentFormat;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    let fragmentSource = this.fragmentSource =\n        this.registerDisposer(rpc.getRef<MultiscaleFragmentSource>(options['fragmentSource']));\n    this.format = options['format'];\n    fragmentSource.meshSource = this;\n  }\n\n  getChunk(objectId: Uint64) {\n    const key = getObjectKey(objectId);\n    let chunk = <MultiscaleManifestChunk>this.chunks.get(key);\n    if (chunk === undefined) {\n      chunk = this.getNewChunk_(MultiscaleManifestChunk);\n      chunk.initializeManifestChunk(key, objectId);\n      this.addChunk(chunk);\n    }\n    return chunk;\n  }\n\n  getFragmentChunk(manifestChunk: MultiscaleManifestChunk, lod: number, chunkIndex: number) {\n    let key = `${manifestChunk.key}/${lod}:${chunkIndex}`;\n    let fragmentSource = this.fragmentSource;\n    let chunk = <MultiscaleFragmentChunk>fragmentSource.chunks.get(key);\n    if (chunk === undefined) {\n      chunk = fragmentSource.getNewChunk_(MultiscaleFragmentChunk);\n      chunk.initialize(key);\n      chunk.lod = lod;\n      chunk.chunkIndex = chunkIndex;\n      chunk.manifestChunk = manifestChunk;\n      fragmentSource.addChunk(chunk);\n    }\n    return chunk;\n  }\n}\n\n@registerSharedObject(MULTISCALE_FRAGMENT_SOURCE_RPC_ID)\nexport class MultiscaleFragmentSource extends ChunkSource {\n  meshSource: MultiscaleMeshSource|null = null;\n  download(chunk: MultiscaleFragmentChunk, cancellationToken: CancellationToken) {\n    return this.meshSource!.downloadFragment(chunk, cancellationToken);\n  }\n}\n\n@registerSharedObject(MULTISCALE_MESH_LAYER_RPC_ID)\nexport class MultiscaleMeshLayer extends SegmentationLayerSharedObjectCounterpart implements\n    PerspectiveViewRenderLayer {\n  source: MultiscaleMeshSource;\n  viewStates = new WatchableSet<PerspectiveViewState>();\n  private viewStatesDisposers = new Map<PerspectiveViewState, () => void>();\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.source = this.registerDisposer(rpc.getRef<MultiscaleMeshSource>(options['source']));\n    this.registerDisposer(this.chunkManager.recomputeChunkPriorities.add(() => {\n      this.updateChunkPriorities();\n    }));\n    const scheduleUpdateChunkPriorities = () => {\n      this.chunkManager.scheduleUpdateChunkPriorities();\n    };\n    this.registerDisposer(this.viewStates.changed.add(() => {\n      const {viewStatesDisposers} = this;\n      const {viewStates} = this;\n      for (const [viewState, disposer] of viewStatesDisposers) {\n        if (!viewStates.has(viewState)) {\n          disposer();\n        }\n      }\n      for (const viewState of viewStates) {\n        if (!viewStatesDisposers.has(viewState)) {\n          viewState.viewport.changed.add(scheduleUpdateChunkPriorities);\n          viewState.visibility.changed.add(scheduleUpdateChunkPriorities);\n          viewStatesDisposers.set(viewState, () => {\n            viewState.viewport.changed.remove(scheduleUpdateChunkPriorities);\n            viewState.visibility.changed.remove(scheduleUpdateChunkPriorities);\n          });\n        }\n      }\n    }));\n    this.registerDisposer(() => {\n      for (const disposer of this.viewStatesDisposers.values()) {\n        disposer();\n      }\n    });\n  }\n\n  private updateChunkPriorities() {\n    const maxVisibility = this.visibility.value;\n    if (maxVisibility === Number.NEGATIVE_INFINITY) {\n      return;\n    }\n    const manifestChunks = new Array<MultiscaleManifestChunk>();\n    {\n      const priorityTier = getPriorityTier(maxVisibility);\n      const basePriority = getBasePriority(maxVisibility);\n      const {source, chunkManager} = this;\n      forEachVisibleSegment(this, objectId => {\n        const manifestChunk = source.getChunk(objectId);\n        chunkManager.requestChunk(\n            manifestChunk, priorityTier, basePriority + MESH_OBJECT_MANIFEST_CHUNK_PRIORITY);\n        const state = manifestChunk.state;\n        if (state === ChunkState.SYSTEM_MEMORY_WORKER || state === ChunkState.SYSTEM_MEMORY ||\n            state === ChunkState.GPU_MEMORY) {\n          manifestChunks.push(manifestChunk);\n        }\n      });\n    }\n    if (manifestChunks.length === 0) return;\n    const {source, chunkManager} = this;\n    for (const viewState of this.viewStates) {\n      const visibility = viewState.visibility.value;\n      if (visibility === Number.NEGATIVE_INFINITY) {\n        continue;\n      }\n      const priorityTier = getPriorityTier(visibility);\n      const basePriority = getBasePriority(visibility);\n      const viewport = viewState.viewport.value;\n      const modelViewProjection = mat4.create();\n      mat4.multiply(\n          modelViewProjection, viewport.viewProjectionMat,\n          mat4.multiply(\n              modelViewProjection, this.objectToDataTransform.value, source.format.transform));\n      const clippingPlanes = getFrustrumPlanes(new Float32Array(24), modelViewProjection);\n      const detailCutoff = this.renderScaleTarget.value;\n      for (const manifestChunk of manifestChunks) {\n        const maxLod = manifestChunk.manifest!.lodScales.length - 1;\n        getDesiredMultiscaleMeshChunks(\n            manifestChunk.manifest!, modelViewProjection, clippingPlanes, detailCutoff,\n            viewport.width, viewport.height, (lod, chunkIndex, _renderScale, empty) => {\n              if (empty) return;\n              let fragmentChunk = source.getFragmentChunk(manifestChunk, lod, chunkIndex);\n              chunkManager.requestChunk(\n                  fragmentChunk, priorityTier,\n                  basePriority + MESH_OBJECT_FRAGMENT_CHUNK_PRIORITY - maxLod + lod);\n            });\n      }\n    }\n  }\n}\n\nfunction convertMeshData(\n    data: RawMeshData&{subChunkOffsets?: Uint32Array},\n    vertexPositionFormat: VertexPositionFormat): EncodedMeshData {\n  const normals = computeVertexNormals(data.vertexPositions, data.indices);\n  const encodedNormals = new Uint8Array(normals.length / 3 * 2);\n  encodeNormals32fx3ToOctahedron8x2(encodedNormals, normals);\n  let encodedIndices: MeshVertexIndices;\n  let strips: boolean;\n  if (CONVERT_TO_TRIANGLE_STRIPS) {\n    encodedIndices = computeTriangleStrips(data.indices, data.subChunkOffsets);\n    strips = true;\n  } else {\n    if (data.indices.BYTES_PER_ELEMENT === 4 && data.vertexPositions.length / 3 < 65535) {\n      encodedIndices = new Uint16Array(data.indices.length);\n      encodedIndices.set(data.indices);\n    } else {\n      encodedIndices = data.indices;\n    }\n    strips = false;\n  }\n  let encodedVertexPositions: EncodedVertexPositions;\n  if (vertexPositionFormat === VertexPositionFormat.uint10) {\n    const vertexPositions = data.vertexPositions;\n    const numVertices = vertexPositions.length / 3;\n    encodedVertexPositions = new Uint32Array(numVertices);\n    for (let inputIndex = 0, outputIndex = 0; outputIndex < numVertices;\n         inputIndex += 3, ++outputIndex) {\n      encodedVertexPositions[outputIndex] =\n          ((vertexPositions[inputIndex] & 1023) | ((vertexPositions[inputIndex + 1] & 1023) << 10) |\n           ((vertexPositions[inputIndex + 2] & 1023) << 20));\n    }\n  } else if (vertexPositionFormat === VertexPositionFormat.uint16) {\n    const vertexPositions = data.vertexPositions;\n    if (vertexPositions.BYTES_PER_ELEMENT === 2) {\n      encodedVertexPositions = vertexPositions;\n    } else {\n      encodedVertexPositions = new Uint16Array(vertexPositions.length);\n      encodedVertexPositions.set(vertexPositions);\n    }\n  } else {\n    encodedVertexPositions = data.vertexPositions as Float32Array;\n  }\n  return {\n    vertexPositions: encodedVertexPositions,\n    vertexNormals: encodedNormals,\n    indices: encodedIndices,\n    strips,\n  };\n}\n\nexport function assignMeshFragmentData(\n    chunk: FragmentChunk, data: RawMeshData,\n    vertexPositionFormat: VertexPositionFormat = VertexPositionFormat.float32) {\n  chunk.meshData = convertMeshData(data, vertexPositionFormat);\n}\n\nexport function assignMultiscaleMeshFragmentData(\n    chunk: MultiscaleFragmentChunk, data: RawPartitionedMeshData,\n    vertexPositionFormat: VertexPositionFormat) {\n  chunk.meshData = convertMeshData(data, vertexPositionFormat);\n  chunk.subChunkOffsets = data.subChunkOffsets;\n}\n\nexport function generateHigherOctreeLevel(\n    octree: Uint32Array, priorStart: number, priorEnd: number): number {\n  let curEnd = priorEnd;\n  for (let i = 0; i < 3; ++i) {\n    octree[curEnd * 5 + i] = octree[priorStart * 5 + i] >>> 1;\n  }\n  octree[curEnd * 5 + 3] = priorStart;\n  for (let i = priorStart + 1; i < priorEnd; ++i) {\n    const x = octree[i * 5] >>> 1, y = octree[i * 5 + 1] >>> 1, z = octree[i * 5 + 2] >>> 1;\n    if (x !== octree[curEnd * 5] || y !== octree[curEnd * 5 + 1] || z !== octree[curEnd * 5 + 2]) {\n      octree[curEnd * 5 + 4] = i;\n      ++curEnd;\n      octree[curEnd * 5] = x;\n      octree[curEnd * 5 + 1] = y;\n      octree[curEnd * 5 + 2] = z;\n      octree[curEnd * 5 + 3] = i;\n    }\n  }\n  octree[curEnd * 5 + 4] = priorEnd;\n  ++curEnd;\n  return curEnd;\n}\n\nexport function computeOctreeChildOffsets(\n    octree: Uint32Array, childStart: number, childEnd: number, parentEnd: number) {\n  let childNode = childStart;\n  for (let parentNode = childEnd; parentNode < parentEnd; ++parentNode) {\n    const parentX = octree[parentNode * 5], parentY = octree[parentNode * 5 + 1],\n          parentZ = octree[parentNode * 5 + 2];\n    while (childNode < childEnd) {\n      const childX = octree[childNode * 5] >>> 1, childY = octree[childNode * 5 + 1] >>> 1,\n            childZ = octree[childNode * 5 + 2] >>> 1;\n      if (!zorder3LessThan(childX, childY, childZ, parentX, parentY, parentZ)) {\n        break;\n      }\n      ++childNode;\n    }\n    octree[parentNode * 5 + 3] = childNode;\n    while (childNode < childEnd) {\n      const childX = octree[childNode * 5] >>> 1, childY = octree[childNode * 5 + 1] >>> 1,\n            childZ = octree[childNode * 5 + 2] >>> 1;\n      if (childX != parentX || childY != parentY || childZ != parentZ) {\n        break;\n      }\n      ++childNode;\n    }\n    octree[parentNode * 5 + 4] += childNode;\n  }\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file\n * Cancellation token system with similarity to the cancellation_token in Microsoft's PPL.\n */\n\n/**\n * Interface used by cancelable operations to monitor whether cancellation has occurred.\n *\n * Note that this interface does not provide any way to trigger cancellation; for that,\n * CancellationTokenSource is used.\n */\nexport interface CancellationToken {\n  /**\n   * Indicates whether cancellation has occurred.\n   */\n  readonly isCanceled: boolean;\n\n  /**\n   * Add a cancellation handler function.  The handler will be invoked synchronously if\n   * this.isCanceled === true.  Otherwise, it will be invoked synchronously upon cancellation,\n   * unless it is removed prior to cancellation.\n   *\n   * The handler function must not throw any exceptions when called.\n   *\n   * @precondition The handler function must not already be registered.\n   *\n   * @param handler The handler function to add.\n   *\n   * @return A function that unregisters the handler.\n   */\n  add(handler: () => void): () => void;\n\n  /**\n   * Unregister a cancellation handler function.  If this.isCanceled, or the specified handler\n   * function has not been registered, then this function has no effect.\n   */\n  remove(handler: () => void): void;\n}\n\nclass CancellationError {\n  name = 'CancellationError';\n  message = 'CANCELED';\n  toString() {\n    return 'CANCELED';\n  }\n}\n\n/**\n * Singleton instance of CancellationError thrown to indicate cancellation.\n */\nexport const CANCELED = new CancellationError();\n\n/**\n * Throws CANCELED if token.isCanceled === true.\n */\nexport function throwIfCanceled(token: CancellationToken) {\n  if (token.isCanceled === true) {\n    throw CANCELED;\n  }\n}\n\nconst noopFunction = () => {};\n\n/**\n * CancellationToken that cannot be canceled.  This can be passed to operations that require a\n * CancellationToken but will not need to be canceled.\n */\nexport const uncancelableToken: CancellationToken = {\n  isCanceled: false,\n  add: () => noopFunction,\n  remove: noopFunction\n};\n\n/**\n * Class that can be used to trigger cancellation.\n */\nexport class CancellationTokenSource implements CancellationToken {\n  /**\n   * Trigger cancellation.\n   *\n   * If this.isCanceled === false, then each registered cancellation handler is invoked\n   * synchronously.\n   */\n  cancel() {\n    const {handlers} = this;\n    if (handlers !== null) {\n      this.handlers = null;\n      if (handlers !== undefined) {\n        for (let handler of handlers) {\n          handler();\n        }\n      }\n    }\n  }\n\n  get isCanceled() {\n    return this.handlers === null;\n  }\n\n  private handlers: Set<() => void>|undefined|null;\n\n  add(handler: () => void) {\n    let {handlers} = this;\n    if (handlers === null) {\n      handler();\n      return noopFunction;\n    }\n    if (handlers === undefined) {\n      handlers = this.handlers = new Set<() => void>();\n    }\n    handlers.add(handler);\n    return () => {\n      this.remove(handler);\n    };\n  }\n\n  remove(handler: () => void) {\n    const {handlers} = this;\n    if (handlers != null) {\n      handlers.delete(handler);\n    }\n  }\n}\n\n/**\n * Creates a CancellationToken corresponding to an asynchronous process with multiple consumers.  It\n * is cancelled only when the cancellation tokens corresponding to all of the consumers have been\n * cancelled.\n */\nexport class MultipleConsumerCancellationTokenSource extends CancellationTokenSource {\n  private consumers = new Set<CancellationToken>();\n\n  addConsumer(cancellationToken: CancellationToken = uncancelableToken) {\n    const {consumers} = this;\n    if (consumers.has(cancellationToken) || cancellationToken.isCanceled) {\n      return;\n    }\n    consumers.add(cancellationToken);\n    cancellationToken.add(() => {\n      consumers.delete(cancellationToken);\n      if (consumers.size === 0) {\n        this.cancel();\n      }\n    });\n  }\n}\n\n\n/**\n * Creates a promise and a dependent cancellation token.\n *\n * The dependent cancellation token will be canceled if the specified `cancellationToken` is\n * canceled while the promise is pending.\n *\n * @param cancellationToken The token that provides notification of cancellation.\n * @param executor The executor passed the resolve and reject functions for the promise, as well as\n * the dependent cancellation token.  If cancellation occurs after either resolve or reject is\n * called, then the dependent token is not cancelled.\n *\n * @returns A new Promise.\n */\nexport function makeCancelablePromise<T>(\n    cancellationToken: CancellationToken,\n    executor: (\n        resolve: (value: T|Promise<T>) => void, reject: (error: any) => void,\n        token: CancellationToken) => void) {\n  return new Promise<T>((resolve, reject) => {\n    if (cancellationToken === uncancelableToken) {\n      executor(resolve, reject, uncancelableToken);\n      return;\n    }\n    const scopedToken = new CancellationTokenSource();\n    const unregister = cancellationToken.add(() => {\n      scopedToken.cancel();\n    });\n    executor(\n        value => {\n          unregister();\n          resolve(value);\n        },\n        error => {\n          unregister();\n          reject(error);\n        },\n        scopedToken);\n  });\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Facility for sharing arbitrary values that support structural cloning between threads.\n */\n\nimport {WatchableValue, WatchableValueInterface} from 'neuroglancer/trackable_value';\nimport {registerRPC, registerSharedObject, RPC, SharedObjectCounterpart} from 'neuroglancer/worker_rpc';\n\nconst CHANGED_RPC_METHOD_ID = 'SharedWatchableValue.changed';\n\n@registerSharedObject('SharedWatchableValue')\nexport class SharedWatchableValue<T> extends SharedObjectCounterpart implements\n    WatchableValueInterface<T> {\n  base: WatchableValueInterface<T>;\n\n  /**\n   * The value is being updated to reflect a remote change.\n   * @internal\n   */\n  updatingValue_ = false;\n\n  constructor(rpc?: RPC, options: any = {}) {\n    super(rpc, options);\n    if (rpc !== undefined) {\n      this.base = new WatchableValue<T>(options['value']);\n      this.setupChangedHandler();\n    }\n  }\n\n  initializeCounterpart(rpc: RPC, options: any = {}) {\n    options['value'] = this.value;\n    super.initializeCounterpart(rpc, options);\n  }\n\n  private setupChangedHandler() {\n    this.registerDisposer(this.base.changed.add(() => {\n      if (this.updatingValue_) {\n        this.updatingValue_ = false;\n      } else {\n        const {rpc} = this;\n        if (rpc !== null) {\n          rpc.invoke(CHANGED_RPC_METHOD_ID, {'id': this.rpcId, 'value': this.value});\n        }\n      }\n    }));\n  }\n\n  static makeFromExisting<T>(rpc: RPC, base: WatchableValueInterface<T>) {\n    let obj = new SharedWatchableValue<T>();\n    obj.base = base;\n    obj.setupChangedHandler();\n    obj.initializeCounterpart(rpc);\n    return obj;\n  }\n\n  static make<T>(rpc: RPC, value: T) {\n    return SharedWatchableValue.makeFromExisting(rpc, new WatchableValue<T>(value));\n  }\n\n  get value() {\n    return this.base.value;\n  }\n\n  set value(value: T) {\n    this.base.value = value;\n  }\n\n  get changed() {\n    return this.base.changed;\n  }\n}\n\nregisterRPC(CHANGED_RPC_METHOD_ID, function(x) {\n  const obj = <SharedWatchableValue<any>>this.get(x['id']);\n  obj.updatingValue_ = true;\n  obj.base.value = x['value'];\n  obj.updatingValue_ = false;\n});\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport 'neuroglancer/shared_watchable_value';\n\nimport {ChunkRequester} from 'neuroglancer/chunk_manager/backend';\nimport {ChunkPriorityTier, PREFETCH_PRIORITY_MULTIPLIER} from 'neuroglancer/chunk_manager/base';\nimport {SharedWatchableValue} from 'neuroglancer/shared_watchable_value';\nimport {RPC} from 'neuroglancer/worker_rpc';\n\n/**\n * Mixin for adding a visibility shared property to a ChunkRequester.  Calls\n * `this.chunkManager.scheduleUpdateChunkPriorities()` when visibility changes.\n */\nexport function withSharedVisibility<T extends{new (...args: any[]): ChunkRequester}>(Base: T) {\n  return class extends Base {\n    visibility: SharedWatchableValue<number>;\n\n    constructor(...args: any[]) {\n      super(...args);\n      const rpc: RPC = args[0];\n      const options: any = args[1];\n      this.visibility = rpc.get(options['visibility']);\n      this.registerDisposer(\n          this.visibility.changed.add(() => this.chunkManager.scheduleUpdateChunkPriorities()));\n    }\n  };\n}\n\n/**\n * Computes the ChunkPriorityTier for the given `visibility` value.\n *\n * A value of `Number.POSITIVE_INFINITY` means `VISIBLE`.  Any other value means `PREFETCH`.\n */\nexport function getPriorityTier(visibility: number): ChunkPriorityTier {\n  return visibility === Number.POSITIVE_INFINITY ? ChunkPriorityTier.VISIBLE :\n                                                   ChunkPriorityTier.PREFETCH;\n}\n\n/**\n * Computes the base priority for the given `visibility` value.  If the value is\n * `Number.POSTIVE_INFINITY`, corresponding to actual visibility, the base priority is 0.\n * Otherwise, the value is interpreted as the prefetch priority (higher means higher priority), and\n * the base priority is equal to the product of this value and `PREFETCH_PRIORITY_MULTIPLIER`.\n */\nexport function getBasePriority(visibility: number): number {\n  return (visibility === Number.POSITIVE_INFINITY ? 0 : visibility * PREFETCH_PRIORITY_MULTIPLIER);\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Simple signal dispatch mechanism.\n */\n\n/**\n * This class provides a simple signal dispatch mechanism.  Handlers can be added, and then the\n * `dispatch` method calls all of them.\n *\n * If specified, Callable should be an interface containing only a callable signature returning\n * void.  Due to limitations in TypeScript, any interface containing a callable signature will be\n * accepted by the compiler, but the resultant signature of `dispatch` will not be correct.\n */\nexport class Signal<Callable extends Function> {\n  private handlers = new Set<Callable>();\n\n  /**\n   * Count of number of times this signal has been dispatched.  This is incremented each time\n   * `dispatch` is called prior to invoking the handlers.\n   */\n  count = 0;\n\n  constructor() {\n    const obj = this;\n    this.dispatch = <Callable><Function>function(this: any) {\n      ++obj.count;\n      obj.handlers.forEach(handler => {\n        handler.apply(this, arguments);\n      });\n    };\n  }\n\n  /**\n   * Add a handler function.  If `dispatch` is currently be called, then the new handler will be\n   * called before `dispatch` returns.\n   *\n   * @param handler The handler function to add.\n   *\n   * @return A function that unregisters the handler.\n   */\n  add(handler: Callable): () => boolean {\n    this.handlers.add(handler);\n    return () => {\n      return this.remove(handler);\n    };\n  }\n\n  /**\n   * Remove a handler function.  If `dispatch` is currently be called and the new handler has not\n   * yet been called, then it will not be called.\n   *\n   * @param handler Handler to remove.\n   * @return `true` if the handler was present, `false` otherwise.\n   */\n  remove(handler: Callable): boolean {\n    return this.handlers.delete(handler);\n  }\n\n  /**\n   * Invokes each handler function with the same parameters (including `this`) with which it is\n   * called.  Handlers are invoked in the order in which they were added.\n   */\n  dispatch: Callable;\n\n  /**\n   * Disposes of resources.  No methods, including `dispatch`, may be invoked afterwards.\n   */\n  dispose() {\n    this.handlers = <any>undefined;\n  }\n}\n\n/**\n * Simple specialization of Signal for the common case of a nullary handler signature.\n */\nexport class NullarySignal extends Signal<() => void> {}\n\n/**\n * Interface for a signal excluding the dispatch method.\n *\n * Unlike Signal, this interface is covariant in the type of Callable.\n */\nexport interface ReadonlySignal<Callable extends Function> {\n  readonly count: number;\n  add(handler: Callable): () => void;\n  remove(handler: Callable): boolean;\n}\n\nexport type NullaryReadonlySignal = ReadonlySignal<() => void>;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ChunkLayoutOptions, getChunkDataSizes, getCombinedTransform, getNearIsotropicBlockSize, SliceViewChunkSource, SliceViewChunkSpecification, SliceViewChunkSpecificationBaseOptions, SliceViewChunkSpecificationOptions, SliceViewSourceOptions} from 'neuroglancer/sliceview/base';\nimport {DATA_TYPE_BYTES, DataType} from 'neuroglancer/util/data_type';\nimport {kInfinityVec, kZeroVec, prod3, vec3} from 'neuroglancer/util/geom';\n\nexport {DATA_TYPE_BYTES, DataType};\n\nexport interface RenderLayer {\n  sources: VolumeChunkSource[][]|null;\n}\n\n/**\n * Specifies the interpretation of volumetric data.\n */\nexport enum VolumeType {\n  UNKNOWN,\n  IMAGE,\n  SEGMENTATION,\n}\n\n/**\n * By default, choose a chunk size with at most 2^18 = 262144 voxels.\n */\nexport const DEFAULT_MAX_VOXELS_PER_CHUNK_LOG2 = 18;\n\nexport interface VolumeSourceOptions extends SliceViewSourceOptions {}\n\n/**\n * Common parameters for the VolumeChunkSpecification constructor and\n * VolumeChunkSpecification.getDefaults.\n */\n/**\n * Specifies constructor parameters for VolumeChunkSpecification.\n */\nexport interface VolumeChunkSpecificationBaseOptions extends\n    SliceViewChunkSpecificationBaseOptions {\n  /**\n   * Lower clipping bound (in nanometers), relative to chunkLayout coordinates.  If not specified,\n   * defaults to lowerVoxelBound * voxelSize.\n   *\n   * Both lowerClipBound and upperClipBound are applied during rendering but do not affect which\n   * chunks/voxels are actually retrieved.  That is determined by lowerVoxelBound and\n   * upperVoxelBound.\n   */\n  lowerClipBound?: vec3;\n\n  /**\n   * Upper clipping bound (in nanometers), relative to chunkLayout coordinates.  If not specified,\n   * defaults to upperVoxelBound * voxelSize.\n   */\n  upperClipBound?: vec3;\n\n  /**\n   * If not specified, defaults to (0, 0, 0).  This determines lowerChunkBound.  If this is not a\n   * multiple of chunkDataSize, then voxels at lower positions may still be requested.\n   */\n  lowerVoxelBound?: vec3;\n\n  /**\n   * Upper voxel bound, relative to chunkLayout coordinates.  This determines upperChunkBound.\n   */\n  upperVoxelBound: vec3;\n\n  /**\n   * Specifies offset for use by backend.ts:GenericVolumeChunkSource.computeChunkBounds in\n   * calculating chunk voxel coordinates.  The calculated chunk coordinates will be equal to the\n   * voxel position (in chunkLayout coordinates) plus this value.\n   *\n   * Defaults to kZeroVec if not specified.\n   */\n  baseVoxelOffset?: vec3;\n  numChannels: number;\n  dataType: DataType;\n\n  /**\n   * If set, indicates that the chunk is in compressed segmentation format with the specified block\n   * size.\n   */\n  compressedSegmentationBlockSize?: vec3;\n}\n\nexport interface VolumeChunkSpecificationOptions extends VolumeChunkSpecificationBaseOptions {\n  /**\n   * Chunk size in voxels.\n   */\n  chunkDataSize: vec3;\n}\n\n\nexport interface VolumeChunkSpecificationVolumeSourceOptions {\n  volumeSourceOptions: VolumeSourceOptions;\n}\n\n/**\n * Specifies additional parameters for VolumeChunkSpecification.withDefaultCompression.\n */\nexport interface VolumeChunkSpecificationDefaultCompressionOptions {\n  /**\n   * Volume type.\n   */\n  volumeType: VolumeType;\n  maxCompressedSegmentationBlockSize?: vec3;\n}\n\n/**\n * Specifies parameters for VolumeChunkSpecification.getDefaults.\n */\nexport interface VolumeChunkSpecificationGetDefaultsOptions extends\n    VolumeChunkSpecificationBaseOptions, VolumeChunkSpecificationDefaultCompressionOptions,\n    ChunkLayoutOptions, VolumeChunkSpecificationVolumeSourceOptions {}\n\n/**\n * Specifies a chunk layout and voxel size.\n */\nexport class VolumeChunkSpecification extends SliceViewChunkSpecification {\n  lowerClipBound: vec3;\n  upperClipBound: vec3;\n\n  lowerVoxelBound: vec3;\n  upperVoxelBound: vec3;\n\n  baseVoxelOffset: vec3;\n  chunkDataSize: vec3;\n  numChannels: number;\n  dataType: DataType;\n\n  chunkBytes: number;\n\n  compressedSegmentationBlockSize: vec3|undefined;\n\n  constructor(options: VolumeChunkSpecificationOptions) {\n    let {\n      lowerVoxelBound = kZeroVec,\n      upperVoxelBound,\n      chunkDataSize,\n      voxelSize,\n      transform,\n      baseVoxelOffset = kZeroVec\n    } = options;\n    let {\n      lowerClipBound = vec3.multiply(vec3.create(), voxelSize, lowerVoxelBound),\n      upperClipBound = vec3.multiply(vec3.create(), voxelSize, upperVoxelBound)\n    } = options;\n    const chunkSize = vec3.multiply(vec3.create(), chunkDataSize, voxelSize);\n    let lowerChunkBound = vec3.create();\n    let upperChunkBound = vec3.create();\n    for (let i = 0; i < 3; ++i) {\n      lowerChunkBound[i] = Math.floor(lowerVoxelBound[i] / chunkDataSize[i]);\n      upperChunkBound[i] = Math.floor((upperVoxelBound[i] - 1) / chunkDataSize[i] + 1);\n    }\n    super({voxelSize, transform, lowerChunkBound, upperChunkBound, chunkSize});\n    this.baseVoxelOffset = baseVoxelOffset;\n    this.lowerClipBound = lowerClipBound;\n    this.upperClipBound = upperClipBound;\n    this.lowerVoxelBound = lowerVoxelBound;\n    this.upperVoxelBound = upperVoxelBound;\n    this.chunkDataSize = chunkDataSize;\n\n    let dataType = this.dataType = options.dataType;\n    let numChannels = this.numChannels = options.numChannels;\n\n    this.chunkBytes = prod3(chunkDataSize) * DATA_TYPE_BYTES[dataType] * numChannels;\n\n    this.compressedSegmentationBlockSize = options.compressedSegmentationBlockSize;\n  }\n\n  static make(options: VolumeChunkSpecificationOptions&\n              {volumeSourceOptions: SliceViewSourceOptions}) {\n    return new VolumeChunkSpecification(Object.assign(\n        {}, options,\n        {transform: getCombinedTransform(options.transform, options.volumeSourceOptions)}));\n  }\n\n  static fromObject(msg: any) {\n    return new VolumeChunkSpecification(msg);\n  }\n  toObject(): VolumeChunkSpecificationOptions&SliceViewChunkSpecificationOptions {\n    return {\n      ...super.toObject(),\n      numChannels: this.numChannels,\n      chunkDataSize: this.chunkDataSize,\n      dataType: this.dataType,\n      lowerVoxelBound: this.lowerVoxelBound,\n      upperVoxelBound: this.upperVoxelBound,\n      lowerClipBound: this.lowerClipBound,\n      upperClipBound: this.upperClipBound,\n      baseVoxelOffset: this.baseVoxelOffset,\n      compressedSegmentationBlockSize: this.compressedSegmentationBlockSize,\n    };\n  }\n\n  /**\n   * Returns a VolumeChunkSpecification with default compression specified if suitable for the\n   * volumeType.\n   */\n  static withDefaultCompression(options: VolumeChunkSpecificationDefaultCompressionOptions&\n                                VolumeChunkSpecificationOptions&\n                                VolumeChunkSpecificationVolumeSourceOptions) {\n    let {\n      compressedSegmentationBlockSize,\n      dataType,\n      voxelSize,\n      transform,\n      lowerVoxelBound,\n      upperVoxelBound\n    } = options;\n    transform = getCombinedTransform(transform, options.volumeSourceOptions);\n    if (compressedSegmentationBlockSize === undefined &&\n        options.volumeType === VolumeType.SEGMENTATION &&\n        (dataType === DataType.UINT32 || dataType === DataType.UINT64)) {\n      compressedSegmentationBlockSize = getNearIsotropicBlockSize({\n        voxelSize,\n        transform,\n        lowerVoxelBound,\n        upperVoxelBound,\n        maxVoxelsPerChunkLog2: 9,\n        maxBlockSize: vec3.min(\n            vec3.create(), options.chunkDataSize,\n            options.maxCompressedSegmentationBlockSize || kInfinityVec),\n      });\n    }\n    return new VolumeChunkSpecification(\n        Object.assign({}, options, {compressedSegmentationBlockSize, transform}));\n  }\n\n  static getDefaults(options: VolumeChunkSpecificationGetDefaultsOptions) {\n    const adjustedOptions = Object.assign(\n        {}, options,\n        {transform: getCombinedTransform(options.transform, options.volumeSourceOptions)});\n\n    let {chunkDataSizes = getChunkDataSizes(adjustedOptions)} = options;\n    return chunkDataSizes.map(\n        chunkDataSize => VolumeChunkSpecification.withDefaultCompression(\n            Object.assign({}, options, {chunkDataSize})));\n  }\n}\n\nexport interface VolumeChunkSource extends SliceViewChunkSource {\n  spec: VolumeChunkSpecification;\n}\n\nexport const VOLUME_RPC_ID = 'volume';\n","/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AsyncComputationSpec} from 'neuroglancer/async_computation';\nimport {CANCELED, CancellationToken} from 'neuroglancer/util/cancellation';\n\nconst freeWorkers: Worker[] = [];\nconst pendingTasks = new Map<number, {msg: any, transfer: Transferable[] | undefined}>();\nconst tasks = new Map<\n    number, {resolve: (value: any) => void, reject: (error: any) => void, cleanup: () => void}>();\nconst maxWorkers = Math.min(12, navigator.hardwareConcurrency);\nlet nextTaskId = 0;\n\nfunction returnWorker(worker: Worker) {\n  for (const [id, task] of pendingTasks) {\n    pendingTasks.delete(id);\n    worker.postMessage(task.msg, task.transfer);\n    return;\n  }\n  freeWorkers.push(worker);\n}\n\nfunction getNewWorker(): Worker {\n  const worker = new Worker('async_computation.bundle.js');\n  worker.onmessage = msg => {\n    const {id, value, error} = msg.data as {id: number, value?: any, error?: string};\n    returnWorker(worker);\n    const callbacks = tasks.get(id)!;\n    tasks.delete(id);\n    if (callbacks === undefined) return;\n    callbacks.cleanup();\n    if (error !== undefined) {\n      callbacks.reject(new Error(error));\n    } else {\n      callbacks.resolve(value);\n    }\n  };\n  return worker;\n}\n\nexport function requestAsyncComputation<Signature extends(...args: any) => any>(\n    request: AsyncComputationSpec<Signature>, cancellationToken: CancellationToken,\n    transfer: Transferable[]|undefined,\n    ...args: Parameters<Signature>): Promise<ReturnType<Signature>> {\n  if (cancellationToken.isCanceled) return Promise.reject(CANCELED);\n  const id = nextTaskId++;\n  const msg = {t: request.id, id, args: args};\n  const cleanup = cancellationToken.add(() => {\n    pendingTasks.delete(id);\n    tasks.delete(id);\n  });\n  const promise = new Promise<ReturnType<Signature>>((resolve, reject) => {\n    tasks.set(id, {resolve, reject, cleanup});\n  });\n  if (freeWorkers.length !== 0) {\n    freeWorkers.pop()!.postMessage(msg, transfer);\n  } else if (tasks.size < maxWorkers) {\n    getNewWorker().postMessage(msg, transfer);\n  } else {\n    pendingTasks.set(id, {msg, transfer});\n  }\n  return promise;\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {SliceViewChunk, SliceViewChunkSource} from 'neuroglancer/sliceview/backend';\nimport {VolumeChunkSource as VolumeChunkSourceInterface, VolumeChunkSpecification} from 'neuroglancer/sliceview/volume/base';\nimport {vec3} from 'neuroglancer/util/geom';\nimport {RPC} from 'neuroglancer/worker_rpc';\n\nconst tempChunkDataSize = vec3.create();\nconst tempChunkPosition = vec3.create();\n\nexport class VolumeChunk extends SliceViewChunk {\n  source: VolumeChunkSource|null = null;\n  data: ArrayBufferView|null;\n  chunkDataSize: vec3|null;\n  constructor() {\n    super();\n  }\n\n  initializeVolumeChunk(key: string, chunkGridPosition: vec3) {\n    super.initializeVolumeChunk(key, chunkGridPosition);\n    this.chunkDataSize = null;\n\n    let source = this.source;\n\n    /**\n     * Grid position within chunk layout (coordinates are in units of chunks).\n     */\n    this.systemMemoryBytes = source!.spec.chunkBytes;\n    this.gpuMemoryBytes = source!.spec.chunkBytes;\n\n    this.data = null;\n  }\n\n  serialize(msg: any, transfers: any[]) {\n    super.serialize(msg, transfers);\n    let chunkDataSize = this.chunkDataSize;\n    if (chunkDataSize !== this.source!.spec.chunkDataSize) {\n      msg['chunkDataSize'] = chunkDataSize;\n    }\n    let data = msg['data'] = this.data!;\n    transfers.push(data.buffer);\n    this.data = null;\n  }\n\n  downloadSucceeded() {\n    this.systemMemoryBytes = this.gpuMemoryBytes = this.data!.byteLength;\n    super.downloadSucceeded();\n  }\n\n  freeSystemMemory() {\n    this.data = null;\n  }\n}\n\nexport class VolumeChunkSource extends SliceViewChunkSource implements VolumeChunkSourceInterface {\n  spec: VolumeChunkSpecification;\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.spec = VolumeChunkSpecification.fromObject(options['spec']);\n  }\n\n  /**\n   * Helper function for computing the voxel bounds of a chunk based on its chunkGridPosition.\n   *\n   * This assumes that the grid of chunk positions starts at this.baseVoxelOffset.  Chunks are\n   * clipped to lie within upperVoxelBound, but are not clipped to lie within lowerVoxelBound.  (The\n   * frontend code currently cannot handle chunks clipped at their lower corner, and the chunk\n   * layout can generally be chosen so that lowerVoxelBound lies on a chunk boundary.)\n   *\n   * This sets chunk.chunkDataSize to a copy of the returned chunkDataSize if it differs from\n   * this.spec.chunkDataSize; otherwise, it is set to this.spec.chunkDataSize.\n   *\n   * @returns A globally-allocated Vec3 containing the chunk corner position in voxel coordinates.\n   * The returned Vec3 will be invalidated by any subsequent call to this method, even on a\n   * different VolumeChunkSource instance.\n   */\n  computeChunkBounds(chunk: VolumeChunk) {\n    let {spec} = this;\n    let {upperVoxelBound} = spec;\n\n    let origChunkDataSize = spec.chunkDataSize;\n    let newChunkDataSize = tempChunkDataSize;\n\n    // Chunk start position in voxel coordinates.\n    let chunkPosition =\n        vec3.multiply(tempChunkPosition, chunk.chunkGridPosition, origChunkDataSize);\n\n    // Specifies whether the chunk only partially fits within the data bounds.\n    let partial = false;\n    for (let i = 0; i < 3; ++i) {\n      let upper = Math.min(upperVoxelBound[i], chunkPosition[i] + origChunkDataSize[i]);\n      let size = newChunkDataSize[i] = upper - chunkPosition[i];\n      if (size !== origChunkDataSize[i]) {\n        partial = true;\n      }\n    }\n\n    vec3.add(chunkPosition, chunkPosition, this.spec.baseVoxelOffset);\n\n    if (partial) {\n      chunk.chunkDataSize = vec3.clone(newChunkDataSize);\n    } else {\n      chunk.chunkDataSize = origChunkDataSize;\n    }\n\n    return chunkPosition;\n  }\n}\nVolumeChunkSource.prototype.chunkConstructor = VolumeChunk;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Disposable { dispose: () => void; }\n\nexport type Disposer = Disposable | (() => void);\n\nexport function invokeDisposer(disposer: Disposer) {\n  if (typeof disposer === 'object') {\n    disposer.dispose();\n  } else {\n    disposer();\n  }\n}\n\nexport function invokeDisposers(disposers: Disposer[]) {\n  for (let i = disposers.length; i > 0; --i) {\n    invokeDisposer(disposers[i - 1]);\n  }\n}\n\nexport function registerEventListener(\n    target: EventTarget, type: string, listener: EventListenerOrEventListenerObject,\n    options?: boolean|AddEventListenerOptions) {\n  target.addEventListener(type, listener, options);\n  return () => target.removeEventListener(type, listener, options);\n}\n\nexport class RefCounted implements Disposable {\n  public refCount = 1;\n  wasDisposed: boolean|undefined;\n  private disposers: Disposer[];\n  addRef() {\n    ++this.refCount;\n    return this;\n  }\n  dispose() {\n    if (--this.refCount !== 0) {\n      return;\n    }\n    this.refCountReachedZero();\n  }\n\n  protected refCountReachedZero() {\n    this.disposed();\n    let {disposers} = this;\n    if (disposers !== undefined) {\n      invokeDisposers(disposers);\n      this.disposers = <any>undefined;\n    }\n    this.wasDisposed = true;\n  }\n  disposed() {}\n  registerDisposer<T extends Disposer>(f: T): T {\n    let {disposers} = this;\n    if (disposers == null) {\n      this.disposers = [f];\n    } else {\n      disposers.push(f);\n    }\n    return f;\n  }\n  unregisterDisposer<T extends Disposer>(f: T): T {\n    let {disposers} = this;\n    if (disposers != null) {\n      let index = disposers.indexOf(f);\n      if (index !== -1) {\n        disposers.splice(index, 1);\n      }\n    }\n    return f;\n  }\n  registerEventListener(\n      target: EventTarget, type: string, listener: EventListenerOrEventListenerObject,\n      options?: boolean|AddEventListenerOptions) {\n    this.registerDisposer(registerEventListener(target, type, listener, options));\n  }\n  registerCancellable<T extends{cancel: () => void}>(cancellable: T) {\n    this.registerDisposer(() => {\n      cancellable.cancel();\n    });\n    return cancellable;\n  }\n}\n\nexport class RefCountedValue<T> extends RefCounted {\n  constructor(public value: T) {\n    super();\n  }\n}\n\n/**\n * A variable of this type is associated with an increment of the reference count.  If a function\n * parameter is declared with this type, then callers must donate a reference count.\n */\nexport type Owned<T extends Disposable> = T;\n\n/**\n * A variable of this type is not associated with an increment of the reference count.\n */\nexport type Borrowed<T extends Disposable> = T;\n","/**\n * @license\n * Copyright 2018 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {VolumeType} from 'neuroglancer/sliceview/volume/base';\nimport {DataType} from 'neuroglancer/util/data_type';\nimport {vec3} from 'neuroglancer/util/geom';\n\nexport class ComputedVolumeChunkSourceParameters {\n  computationRef: any;\n  sourceRef: any;\n  inputSize: vec3;\n  scaleFactor: vec3;\n\n  static RPC_ID = 'computed/ComputedVolumeChunkSourceParameters';\n}\n\n\nexport interface ComputationBufferSpecification {\n  size: vec3;\n  dataType: DataType;\n  volumeType: VolumeType;\n  numChannels: number;\n}\n\n// Parameters that specify data type, volume type, and size for the input and\n// output buffers relative to a computation. This information will ultimately\n// pass to the VolumeComputationBackend that executes the computation. Extend\n// this interface to add parameters - any additional parameters should be\n// optional to allow direct assignment to work between types.\nexport class ComputationParameters {\n  // Specification for the buffer that is provided to a computation as an\n  // input. The DataType, VolumeType and channel count will match that of the\n  // origin volume chunk provider. Size is specified per-computation,\n  // independently of the origin volume.\n  inputSpec: ComputationBufferSpecification;\n\n  // Same, for the output. Size matches the native size for the\n  // ComputedVolumeChunkSource.\n  outputSpec: ComputationBufferSpecification;\n}\n\nexport function getArrayView(buffer: ArrayBuffer, type: DataType) {\n  switch (type) {\n    case DataType.UINT8:\n      return new Uint8Array(buffer);\n    case DataType.UINT16:\n      return new Uint16Array(buffer);\n    case DataType.UINT32:\n    case DataType.UINT64:\n      return new Uint32Array(buffer);\n    case DataType.FLOAT32:\n      return new Float32Array(buffer);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Basic annotation data structures.\n */\n\nimport {Borrowed, RefCounted} from 'neuroglancer/util/disposable';\nimport {mat4, vec3} from 'neuroglancer/util/geom';\nimport {parseArray, verify3dScale, verify3dVec, verifyEnumString, verifyObject, verifyObjectProperty, verifyOptionalString, verifyString} from 'neuroglancer/util/json';\nimport {getRandomHexString} from 'neuroglancer/util/random';\nimport {Signal, NullarySignal} from 'neuroglancer/util/signal';\nimport {Uint64} from 'neuroglancer/util/uint64';\nexport type AnnotationId = string;\n\nexport class AnnotationReference extends RefCounted {\n  changed = new NullarySignal();\n\n  /**\n   * If `undefined`, we are still waiting to look up the result.  If `null`, annotation has been\n   * deleted.\n   */\n  value: Annotation|null|undefined;\n\n  constructor(public id: AnnotationId) {\n    super();\n  }\n}\n\nexport enum AnnotationType {\n  POINT,\n  LINE,\n  AXIS_ALIGNED_BOUNDING_BOX,\n  ELLIPSOID,\n}\n\nexport const annotationTypes = [\n  AnnotationType.POINT,\n  AnnotationType.LINE,\n  AnnotationType.AXIS_ALIGNED_BOUNDING_BOX,\n  AnnotationType.ELLIPSOID,\n];\n\nexport interface AnnotationBase {\n  /**\n   * If equal to `undefined`, then the description is unknown (possibly still being loaded).  If\n   * equal to `null`, then there is no description.\n   */\n  description?: string|undefined|null;\n\n  id: AnnotationId;\n  type: AnnotationType;\n\n  segments?: Uint64[];\n}\n\nexport interface Line extends AnnotationBase {\n  pointA: vec3;\n  pointB: vec3;\n  type: AnnotationType.LINE;\n}\n\nexport interface Point extends AnnotationBase {\n  point: vec3;\n  type: AnnotationType.POINT;\n}\n\nexport interface AxisAlignedBoundingBox extends AnnotationBase {\n  pointA: vec3;\n  pointB: vec3;\n  type: AnnotationType.AXIS_ALIGNED_BOUNDING_BOX;\n}\n\nexport interface Ellipsoid extends AnnotationBase {\n  center: vec3;\n  radii: vec3;\n  type: AnnotationType.ELLIPSOID;\n}\n\nexport type Annotation = Line|Point|AxisAlignedBoundingBox|Ellipsoid;\n\nexport interface AnnotationTypeHandler<T extends Annotation> {\n  icon: string;\n  description: string;\n  toJSON: (annotation: T) => any;\n  restoreState: (annotation: T, obj: any) => void;\n  serializedBytes: number;\n  serializer:\n      (buffer: ArrayBuffer, offset: number,\n       numAnnotations: number) => ((annotation: T, index: number) => void);\n}\n\nconst typeHandlers = new Map<AnnotationType, AnnotationTypeHandler<Annotation>>();\nexport function getAnnotationTypeHandler(type: AnnotationType) {\n  return typeHandlers.get(type)!;\n}\n\ntypeHandlers.set(AnnotationType.LINE, {\n  icon: 'ꕹ',\n  description: 'Line',\n  toJSON: (annotation: Line) => {\n    return {\n      pointA: Array.from(annotation.pointA),\n      pointB: Array.from(annotation.pointB),\n    };\n  },\n  restoreState: (annotation: Line, obj: any) => {\n    annotation.pointA = verifyObjectProperty(obj, 'pointA', verify3dVec);\n    annotation.pointB = verifyObjectProperty(obj, 'pointB', verify3dVec);\n  },\n  serializedBytes: 6 * 4,\n  serializer: (buffer: ArrayBuffer, offset: number, numAnnotations: number) => {\n    const coordinates = new Float32Array(buffer, offset, numAnnotations * 6);\n    return (annotation: Line, index: number) => {\n      const {pointA, pointB} = annotation;\n      const coordinateOffset = index * 6;\n      coordinates[coordinateOffset] = pointA[0];\n      coordinates[coordinateOffset + 1] = pointA[1];\n      coordinates[coordinateOffset + 2] = pointA[2];\n      coordinates[coordinateOffset + 3] = pointB[0];\n      coordinates[coordinateOffset + 4] = pointB[1];\n      coordinates[coordinateOffset + 5] = pointB[2];\n    };\n  },\n});\n\ntypeHandlers.set(AnnotationType.POINT, {\n  icon: '⚬',\n  description: 'Point',\n  toJSON: (annotation: Point) => {\n    return {\n      point: Array.from(annotation.point),\n    };\n  },\n  restoreState: (annotation: Point, obj: any) => {\n    annotation.point = verifyObjectProperty(obj, 'point', verify3dVec);\n  },\n  serializedBytes: 3 * 4,\n  serializer: (buffer: ArrayBuffer, offset: number, numAnnotations: number) => {\n    const coordinates = new Float32Array(buffer, offset, numAnnotations * 3);\n    return (annotation: Point, index: number) => {\n      const {point} = annotation;\n      const coordinateOffset = index * 3;\n      coordinates[coordinateOffset] = point[0];\n      coordinates[coordinateOffset + 1] = point[1];\n      coordinates[coordinateOffset + 2] = point[2];\n    };\n  },\n});\n\ntypeHandlers.set(AnnotationType.AXIS_ALIGNED_BOUNDING_BOX, {\n  icon: '❑',\n  description: 'Bounding Box',\n  toJSON: (annotation: AxisAlignedBoundingBox) => {\n    return {\n      pointA: Array.from(annotation.pointA),\n      pointB: Array.from(annotation.pointB),\n    };\n  },\n  restoreState: (annotation: AxisAlignedBoundingBox, obj: any) => {\n    annotation.pointA = verifyObjectProperty(obj, 'pointA', verify3dVec);\n    annotation.pointB = verifyObjectProperty(obj, 'pointB', verify3dVec);\n  },\n  serializedBytes: 6 * 4,\n  serializer: (buffer: ArrayBuffer, offset: number, numAnnotations: number) => {\n    const coordinates = new Float32Array(buffer, offset, numAnnotations * 6);\n    return (annotation: AxisAlignedBoundingBox, index: number) => {\n      const {pointA, pointB} = annotation;\n      const coordinateOffset = index * 6;\n      coordinates[coordinateOffset] = Math.min(pointA[0], pointB[0]);\n      coordinates[coordinateOffset + 1] = Math.min(pointA[1], pointB[1]);\n      coordinates[coordinateOffset + 2] = Math.min(pointA[2], pointB[2]);\n      coordinates[coordinateOffset + 3] = Math.max(pointA[0], pointB[0]);\n      coordinates[coordinateOffset + 4] = Math.max(pointA[1], pointB[1]);\n      coordinates[coordinateOffset + 5] = Math.max(pointA[2], pointB[2]);\n    };\n  },\n});\n\ntypeHandlers.set(AnnotationType.ELLIPSOID, {\n  icon: '◎',\n  description: 'Ellipsoid',\n  toJSON: (annotation: Ellipsoid) => {\n    return {\n      center: Array.from(annotation.center),\n      radii: Array.from(annotation.radii),\n    };\n  },\n  restoreState: (annotation: Ellipsoid, obj: any) => {\n    annotation.center = verifyObjectProperty(obj, 'center', verify3dVec);\n    annotation.radii = verifyObjectProperty(obj, 'radii', verify3dScale);\n  },\n  serializedBytes: 6 * 4,\n  serializer: (buffer: ArrayBuffer, offset: number, numAnnotations: number) => {\n    const coordinates = new Float32Array(buffer, offset, numAnnotations * 6);\n    return (annotation: Ellipsoid, index: number) => {\n      const {center, radii} = annotation;\n      const coordinateOffset = index * 6;\n      coordinates.set(center, coordinateOffset);\n      coordinates.set(radii, coordinateOffset + 3);\n    };\n  },\n});\n\nexport function annotationToJson(annotation: Annotation) {\n  const result = getAnnotationTypeHandler(annotation.type).toJSON(annotation);\n  result.type = AnnotationType[annotation.type].toLowerCase();\n  result.id = annotation.id;\n  result.description = annotation.description || undefined;\n  const {segments} = annotation;\n  if (segments !== undefined && segments.length > 0) {\n    result.segments = segments.map(x => x.toString());\n  }\n  return result;\n}\n\nexport function restoreAnnotation(obj: any, allowMissingId = false): Annotation {\n  verifyObject(obj);\n  const type = verifyObjectProperty(obj, 'type', x => verifyEnumString(x, AnnotationType));\n  const id =\n      verifyObjectProperty(obj, 'id', allowMissingId ? verifyOptionalString : verifyString) ||\n      makeAnnotationId();\n  const result: Annotation = <any>{\n    id,\n    description: verifyObjectProperty(obj, 'description', verifyOptionalString),\n    segments: verifyObjectProperty(\n        obj, 'segments',\n        x => x === undefined ? undefined : parseArray(x, y => Uint64.parseString(y))),\n    type,\n  };\n  getAnnotationTypeHandler(type).restoreState(result, obj);\n  return result;\n}\n\nexport interface AnnotationSourceSignals {\n  changed:NullarySignal;\n  childAdded:Signal<(annotation: Annotation) => void>;\n  childUpdated:Signal<(annotation: Annotation) => void>;\n  childDeleted:Signal<(annotationId: string) => void>;\n}\n\nexport class AnnotationSource extends RefCounted implements AnnotationSourceSignals {\n  private annotationMap = new Map<AnnotationId, Annotation>();\n  changed = new NullarySignal();\n  readonly = false;\n  childAdded = new Signal<(annotation: Annotation) => void>();\n  childUpdated = new Signal<(annotation: Annotation) => void>();\n  childDeleted = new Signal<(annotationId: string) => void>();\n\n  private pending = new Set<AnnotationId>();\n\n  constructor(public objectToLocal = mat4.create()) {\n    super();\n  }\n\n  add(annotation: Annotation, commit: boolean = true): AnnotationReference {\n    if (!annotation.id) {\n      annotation.id = makeAnnotationId();\n    } else if (this.annotationMap.has(annotation.id)) {\n      throw new Error(`Annotation id already exists: ${JSON.stringify(annotation.id)}.`);\n    }\n    this.annotationMap.set(annotation.id, annotation);\n    this.changed.dispatch();\n    this.childAdded.dispatch(annotation);\n    if (!commit) {\n      this.pending.add(annotation.id);\n    }\n    return this.getReference(annotation.id);\n  }\n\n  commit(reference: AnnotationReference): void {\n    const id = reference.id;\n    this.pending.delete(id);\n  }\n\n  update(reference: AnnotationReference, annotation: Annotation) {\n    if (reference.value === null) {\n      throw new Error(`Annotation already deleted.`);\n    }\n    reference.value = annotation;\n    this.annotationMap.set(annotation.id, annotation);\n    reference.changed.dispatch();\n    this.changed.dispatch();\n    this.childUpdated.dispatch(annotation);\n  }\n\n  [Symbol.iterator]() {\n    return this.annotationMap.values();\n  }\n\n  get(id: AnnotationId) {\n    return this.annotationMap.get(id);\n  }\n\n  delete(reference: AnnotationReference) {\n    if (reference.value === null) {\n      return;\n    }\n    reference.value = null;\n    this.annotationMap.delete(reference.id);\n    this.pending.delete(reference.id);\n    reference.changed.dispatch();\n    this.changed.dispatch();\n    this.childDeleted.dispatch(reference.id);\n  }\n\n  getReference(id: AnnotationId): AnnotationReference {\n    let existing = this.references.get(id);\n    if (existing !== undefined) {\n      return existing.addRef();\n    }\n    existing = new AnnotationReference(id);\n    existing.value = this.annotationMap.get(id) || null;\n    this.references.set(id, existing);\n    existing.registerDisposer(() => {\n      this.references.delete(id);\n    });\n    return existing;\n  }\n\n  references = new Map<AnnotationId, Borrowed<AnnotationReference>>();\n\n  toJSON() {\n    const result: any[] = [];\n    const {pending} = this;\n    for (const annotation of this) {\n      if (pending.has(annotation.id)) {\n        // Don't serialize uncommitted annotations.\n        continue;\n      }\n      result.push(annotationToJson(annotation));\n    }\n    return result;\n  }\n\n  clear() {\n    this.annotationMap.clear();\n    this.pending.clear();\n    this.changed.dispatch();\n  }\n\n  restoreState(obj: any) {\n    const {annotationMap} = this;\n    annotationMap.clear();\n    this.pending.clear();\n    if (obj !== undefined) {\n      parseArray(obj, x => {\n        const annotation = restoreAnnotation(x);\n        annotationMap.set(annotation.id, annotation);\n      });\n    }\n    for (const reference of this.references.values()) {\n      const {id} = reference;\n      const value = annotationMap.get(id);\n      reference.value = value || null;\n      reference.changed.dispatch();\n    }\n    this.changed.dispatch();\n  }\n\n  reset() {\n    this.clear();\n  }\n}\n\nexport class LocalAnnotationSource extends AnnotationSource {}\n\nexport const DATA_BOUNDS_DESCRIPTION = 'Data Bounds';\n\nexport function makeAnnotationId() {\n  return getRandomHexString(160);\n}\n\nexport function makeDataBoundsBoundingBox(\n    lowerVoxelBound: vec3, upperVoxelBound: vec3): AxisAlignedBoundingBox {\n  return {\n    type: AnnotationType.AXIS_ALIGNED_BOUNDING_BOX,\n    id: 'data-bounds',\n    description: DATA_BOUNDS_DESCRIPTION,\n    pointA: lowerVoxelBound,\n    pointB: upperVoxelBound\n  };\n}\n\nfunction compare3WayById(a: Annotation, b: Annotation) {\n  return a.id < b.id ? -1 : a.id === b.id ? 0 : 1;\n}\n\nexport interface SerializedAnnotations {\n  data: Uint8Array;\n  typeToIds: string[][];\n  typeToOffset: number[];\n  segmentListIndex: Uint32Array;\n  segmentList: Uint32Array;\n}\n\nexport function serializeAnnotations(allAnnotations: Annotation[][]): SerializedAnnotations {\n  let totalBytes = 0;\n  const typeToOffset: number[] = [];\n  const typeToSegmentListIndexOffset: number[] = [];\n  let totalNumSegments = 0;\n  let totalNumAnnotations = 0;\n  for (const annotationType of annotationTypes) {\n    typeToOffset[annotationType] = totalBytes;\n    typeToSegmentListIndexOffset[annotationType] = totalNumAnnotations;\n    const annotations: Annotation[] = allAnnotations[annotationType];\n    let numSegments = 0;\n    for (const annotation of annotations) {\n      const {segments} = annotation;\n      if (segments !== undefined) {\n        numSegments += segments.length;\n      }\n    }\n    totalNumAnnotations += annotations.length;\n    totalNumSegments += numSegments;\n    annotations.sort(compare3WayById);\n    const count = annotations.length;\n    const handler = getAnnotationTypeHandler(annotationType);\n    totalBytes += handler.serializedBytes * count;\n  }\n  const segmentListIndex = new Uint32Array(totalNumAnnotations + 1);\n  const segmentList = new Uint32Array(totalNumSegments * 2);\n  const typeToIds: string[][] = [];\n  const data = new ArrayBuffer(totalBytes);\n  let segmentListOffset = 0;\n  let segmentListIndexOffset = 0;\n  for (const annotationType of annotationTypes) {\n    const annotations: Annotation[] = allAnnotations[annotationType];\n    typeToIds[annotationType] = annotations.map(x => x.id);\n    const count = annotations.length;\n    const handler = getAnnotationTypeHandler(annotationType);\n    const serializer = handler.serializer(data, typeToOffset[annotationType], count);\n    annotations.forEach((annotation, index) => {\n      serializer(annotation, index);\n      segmentListIndex[segmentListIndexOffset++] = segmentListOffset;\n      const {segments} = annotation;\n      if (segments !== undefined) {\n        for (const segment of segments) {\n          segmentList[segmentListOffset * 2] = segment.low;\n          segmentList[segmentListOffset * 2 + 1] = segment.high;\n          ++segmentListOffset;\n        }\n      }\n    });\n  }\n  return {data: new Uint8Array(data), typeToIds, typeToOffset, segmentListIndex, segmentList};\n}\n\nexport class AnnotationSerializer {\n  annotations: [Point[], Line[], AxisAlignedBoundingBox[], Ellipsoid[]] = [[], [], [], []];\n  add(annotation: Annotation) {\n    (<Annotation[]>this.annotations[annotation.type]).push(annotation);\n  }\n  serialize() {\n    return serializeAnnotations(this.annotations);\n  }\n}\n\nexport function deserializeAnnotation(obj: any) {\n  if (obj == null) {\n    return obj;\n  }\n  const segments = obj.segments;\n  if (segments !== undefined) {\n    obj.segments = segments.map((x: {low: number, high: number}) => new Uint64(x.low, x.high));\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport debounce from 'lodash/debounce';\nimport {Borrowed, Disposer, Owned, RefCounted} from 'neuroglancer/util/disposable';\nimport {NullaryReadonlySignal, NullarySignal} from 'neuroglancer/util/signal';\nimport {Trackable} from 'neuroglancer/util/trackable';\n\nexport interface WatchableValueInterface<T> {\n  value: T;\n  changed: NullaryReadonlySignal;\n}\n\nexport class WatchableValue<T> implements WatchableValueInterface<T> {\n  get value() {\n    return this.value_;\n  }\n  set value(newValue: T) {\n    if (newValue !== this.value_) {\n      this.value_ = newValue;\n      this.changed.dispatch();\n    }\n  }\n  changed = new NullarySignal();\n  constructor(protected value_: T) {}\n}\n\nexport class TrackableValue<T> extends WatchableValue<T> implements Trackable {\n  constructor(value: T, public validator: (value: any) => T, public defaultValue = value) {\n    super(value);\n  }\n  toJSON() {\n    let {value_} = this;\n    if (value_ === this.defaultValue) {\n      return undefined;\n    }\n    return this.value_;\n  }\n  reset() {\n    this.value = this.defaultValue;\n  }\n  restoreState(x: any) {\n    if (x !== undefined) {\n      let {validator} = this;\n      try {\n        this.value = validator(x);\n        return;\n      } catch (ignoredError) {\n      }\n    }\n    this.value = this.defaultValue;\n  }\n}\n\nclass DerivedWatchableValue<U> extends RefCounted implements WatchableValueInterface<U> {\n  changed = new NullarySignal();\n  get value() {\n    return this.f(...this.ws.map(w => w.value));\n  }\n  private f: (...v: any[]) => U;\n  private ws: WatchableValueInterface<any>[];\n\n  constructor(f: (...v: any[]) => U, ws: WatchableValueInterface<any>[]) {\n    super();\n    this.f = f;\n    this.ws = ws;\n    for (const w of ws) {\n      this.registerDisposer(w.changed.add(this.changed.dispatch));\n    }\n  }\n}\n\nexport function makeDerivedWatchableValue<U, T0>(\n    f: (v0: T0) => U, w0: WatchableValueInterface<T0>): DerivedWatchableValue<U>;\nexport function makeDerivedWatchableValue<U, T0, T1>(\n    f: (v0: T0, v1: T1) => U, w0: WatchableValueInterface<T0>,\n    w1: WatchableValueInterface<T1>): DerivedWatchableValue<U>;\nexport function makeDerivedWatchableValue<U, T0, T1, T2>(\n    f: (v0: T0, v1: T1, v2: T2) => U, w0: WatchableValueInterface<T0>,\n    w1: WatchableValueInterface<T1>, w2: WatchableValueInterface<T2>): DerivedWatchableValue<U>;\nexport function makeDerivedWatchableValue<U, T0, T1, T2, T3>(\n    f: (v0: T0, v1: T1, v2: T2, v3: T3) => U, w0: WatchableValueInterface<T0>,\n    w1: WatchableValueInterface<T1>, w2: WatchableValueInterface<T2>,\n    w3: WatchableValueInterface<T3>): DerivedWatchableValue<U>;\nexport function makeDerivedWatchableValue<U, T>(\n    f: (...values: T[]) => U, ...ws: WatchableValueInterface<T>[]): DerivedWatchableValue<U>;\nexport function makeDerivedWatchableValue<U>(\n    f: (...v: any[]) => U, ...ws: WatchableValueInterface<any>[]) {\n  return new DerivedWatchableValue(f, ws);\n}\n\nexport class ComputedWatchableValue<U> extends RefCounted implements WatchableValueInterface<U> {\n  get value() {\n    return this.f();\n  }\n  changed = new NullarySignal();\n  constructor(public f: () => U, ...signals: NullarySignal[]) {\n    super();\n    for (const signal of signals) {\n      this.registerDisposer(signal.add(this.changed.dispatch));\n    }\n  }\n}\n\nexport class WatchableRefCounted<T extends RefCounted> extends RefCounted implements\n    WatchableValueInterface<T|undefined> {\n  changed = new NullarySignal();\n\n  private value_: Owned<T>|undefined;\n  private valueHandler: (() => void)|undefined;\n\n  get value(): Borrowed<T>|undefined {\n    return this.value_;\n  }\n\n  set value(value: Owned<T>|undefined) {\n    const {value_} = this;\n    this.value_ = value;\n    if (value_ !== undefined) {\n      value_.dispose();\n      value_.unregisterDisposer(this.valueHandler!);\n      this.valueHandler = undefined;\n    }\n    if (value !== undefined) {\n      const valueHandler = this.valueHandler = () => {\n        if (this.value_ === value) {\n          this.value_ = undefined;\n          this.changed.dispatch();\n        }\n      };\n      value.registerDisposer(valueHandler);\n    }\n\n    if (value !== value_) {\n      this.changed.dispatch();\n    }\n  }\n\n  reset() {\n    this.value = undefined;\n  }\n\n  disposed() {\n    if (this.value_ !== undefined) {\n      this.value_.unregisterDisposer(this.valueHandler!);\n      this.value_.dispose();\n    }\n    this.value_ = undefined;\n    super.disposed();\n  }\n}\n\n\nexport interface TrackableValueInterface<T> extends WatchableValueInterface<T>, Trackable {}\n\nexport class TrackableRefCounted<T extends RefCounted> extends WatchableRefCounted<T> implements\n    TrackableValueInterface<T|undefined> {\n  constructor(\n      public validator: (value: any) => T | undefined, public jsonConverter: (value: T) => any) {\n    super();\n  }\n  toJSON() {\n    const {value} = this;\n    return value && this.jsonConverter(value);\n  }\n\n  restoreState(x: any) {\n    this.value = this.validator(x);\n  }\n}\n\nexport class WatchableSet<T> {\n  changed = new NullarySignal();\n  values: Set<T>;\n  constructor(values?: Iterable<T>) {\n    if (values === undefined) {\n      this.values = new Set();\n    } else {\n      this.values = new Set(values);\n    }\n  }\n  add(x: T) {\n    const {values} = this;\n    if (!values.has(x)) {\n      values.add(x);\n      this.changed.dispatch();\n    }\n    return this;\n  }\n  delete(x: T) {\n    const {values} = this;\n    if (values.delete(x)) {\n      this.changed.dispatch();\n      return true;\n    }\n    return false;\n  }\n  has(x: T) {\n    return this.values.has(x);\n  }\n  get size() {\n    return this.values.size;\n  }\n  [Symbol.iterator]() {\n    return this.values[Symbol.iterator]();\n  }\n  clear() {\n    const {values} = this;\n    if (values.size > 0) {\n      values.clear();\n      this.changed.dispatch();\n    }\n  }\n}\n\nexport function registerNested<T>(\n    baseState: WatchableValueInterface<T>, f: (context: RefCounted, value: T) => void): Disposer {\n  let value: T;\n  let context: RefCounted;\n\n  function updateValue() {\n    value = baseState.value;\n    context = new RefCounted();\n    f(context, value);\n  }\n\n  const handleChange = debounce(() => {\n    if (baseState.value !== value) {\n      context.dispose();\n      updateValue();\n    }\n  }, 0);\n\n  const signalDisposer = baseState.changed.add(handleChange);\n\n  updateValue();\n\n  return () => {\n    handleChange.cancel();\n    signalDisposer();\n    context.dispose();\n  };\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {SharedDisjointUint64Sets} from 'neuroglancer/shared_disjoint_sets';\nimport {Uint64Set} from 'neuroglancer/uint64_set';\nimport {Uint64} from 'neuroglancer/util/uint64';\n\nexport interface VisibleSegmentsState {\n  visibleSegments: Uint64Set;\n  segmentEquivalences: SharedDisjointUint64Sets;\n}\n\n/**\n * Returns a string key for identifying a uint64 object id.  This is faster than\n * Uint64.prototype.toString().\n */\nexport function getObjectKey(objectId: Uint64): string {\n  return `${objectId.low},${objectId.high}`;\n}\n\nexport function forEachVisibleSegment(\n    state: VisibleSegmentsState, callback: (objectId: Uint64, rootObjectId: Uint64) => void) {\n  let {visibleSegments, segmentEquivalences} = state;\n  for (let rootObjectId of visibleSegments) {\n    // TODO(jbms): Remove this check if logic is added to ensure that it always holds.\n    if (!segmentEquivalences.disjointSets.isMinElement(rootObjectId)) {\n      continue;\n    }\n    for (let objectId of segmentEquivalences.setElements(rootObjectId)) {\n      callback(objectId, rootObjectId);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Interface for defining transcode operations.\n */\n\nexport interface AsyncComputationSpec<Signature extends (...args: any) => any> {\n  id: string;\n  t?: Signature;\n}\n\n/**\n * Declares an asynchronous operation.\n */\nexport function asyncComputation<Signature extends(...args: any) => any>(id: string):\n    AsyncComputationSpec<Signature> {\n  return {id};\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {postProcessRawData} from 'neuroglancer/sliceview/backend_chunk_decoders/postprocess';\nimport {VolumeChunk} from 'neuroglancer/sliceview/volume/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {DATA_TYPE_BYTES, DataType} from 'neuroglancer/util/data_type';\nimport {convertEndian16, convertEndian32, Endianness, ENDIANNESS} from 'neuroglancer/util/endian';\nimport {prod3} from 'neuroglancer/util/geom';\n\nexport async function decodeRawChunk(\n    chunk: VolumeChunk, cancellationToken: CancellationToken, response: ArrayBuffer,\n    endianness: Endianness = ENDIANNESS, byteOffset: number = 0,\n    byteLength: number = response.byteLength) {\n  cancellationToken;\n  let {spec} = chunk.source!;\n  let {dataType} = spec;\n  let numElements = prod3(chunk.chunkDataSize!);\n  let bytesPerElement = DATA_TYPE_BYTES[dataType];\n  let expectedBytes = numElements * bytesPerElement * spec.numChannels;\n  if (expectedBytes !== byteLength) {\n    throw new Error(\n        `Raw-format chunk is ${byteLength} bytes, ` +\n        `but ${numElements} * ${bytesPerElement} = ${expectedBytes} bytes are expected.`);\n  }\n  let data: ArrayBufferView;\n  switch (dataType) {\n    case DataType.UINT8:\n      data = new Uint8Array(response, byteOffset, byteLength);\n      break;\n    case DataType.UINT16:\n      data = new Uint16Array(response, byteOffset, byteLength / 2);\n      convertEndian16(data, endianness);\n      break;\n    case DataType.UINT32:\n    case DataType.UINT64:\n      data = new Uint32Array(response, byteOffset, byteLength / 4);\n      convertEndian32(data, endianness);\n      break;\n    case DataType.FLOAT32:\n      data = new Float32Array(response, byteOffset, byteLength / 4);\n      convertEndian32(data, endianness);\n      break;\n    default:\n      throw new Error(`Unexpected data type: ${dataType}.`);\n  }\n  await postProcessRawData(chunk, cancellationToken, data);\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Uint64} from './uint64';\n\nexport function getOctreeChildIndex(x: number, y: number, z: number) {\n  return (x & 1) | ((y << 1) & 2) | ((z << 2) & 4);\n}\n\n/**\n * Decodes a \"compressed\" 3-d morton index.\n *\n * Decoded bit `i` of `x`, `y`, and `z` is at bit `i + min(i, yBits) + min(i, zBits)`, `i + min(i +\n * 1, xBits) + min(i, zBits)`, and `i + min(i + 1, xBits) + min(i + 1, zBits)` of `zindex`,\n * respectively, for `i` in `[0, xBits)`, `[0, yBits)`, `[0, zBits)`, respectively.\n */\nexport function decodeZIndexCompressed(\n    zindex: Uint64, xBits: number, yBits: number, zBits: number): Uint32Array {\n  const maxCoordBits = Math.max(xBits, yBits, zBits);\n  let inputBit = 0;\n  let inputValue = zindex.low;\n  let x = 0, y = 0, z = 0;\n  for (let coordBit = 0; coordBit < maxCoordBits; ++coordBit) {\n    if (coordBit < xBits) {\n      const bit = (inputValue >>> inputBit) & 1;\n      x |= (bit << coordBit);\n      if (inputBit === 31) {\n        inputBit = 0;\n        inputValue = zindex.high;\n      } else {\n        ++inputBit;\n      }\n    }\n    if (coordBit < yBits) {\n      const bit = (inputValue >>> inputBit) & 1;\n      y |= (bit << coordBit);\n      if (inputBit === 31) {\n        inputBit = 0;\n        inputValue = zindex.high;\n      } else {\n        ++inputBit;\n      }\n    }\n    if (coordBit < zBits) {\n      const bit = (inputValue >>> inputBit) & 1;\n      z |= (bit << coordBit);\n      if (inputBit === 31) {\n        inputBit = 0;\n        inputValue = zindex.high;\n      } else {\n        ++inputBit;\n      }\n    }\n  }\n  return Uint32Array.of(x, y, z);\n}\n\nexport function encodeZIndexCompressed(\n    zindex: Uint64, xBits: number, yBits: number, zBits: number, x: number, y: number,\n    z: number): Uint64 {\n  const maxBits = Math.max(xBits, yBits, zBits);\n  let outputBit = 0;\n  let outputNum = 0;\n  let isHigh = false;\n  function writeBit(b: number): void {\n    outputNum |= (b & 1) << outputBit;\n    if (++outputBit === 32) {\n      zindex.low = outputNum;\n      outputNum = 0;\n      outputBit = 0;\n      isHigh = true;\n    }\n  }\n  for (let bit = 0; bit < maxBits; ++bit) {\n    if (bit < xBits) {\n      writeBit((x >> bit) & 1);\n    }\n    if (bit < yBits) {\n      writeBit((y >> bit) & 1);\n    }\n    if (bit < zBits) {\n      writeBit((z >> bit) & 1);\n    }\n  }\n  if (isHigh) {\n    zindex.high = outputNum;\n  } else {\n    zindex.high = 0;\n    zindex.low = outputNum;\n  }\n  return zindex;\n}\n\nfunction lessMsb(a: number, b: number) {\n  return a < b && a < (a ^ b);\n}\n\n/**\n * Returns `true` if `(x0, y0, z0)` occurs before `(x1, y1, z1)` in Z-curve order.\n */\nexport function zorder3LessThan(\n    x0: number, y0: number, z0: number, x1: number, y1: number, z1: number): boolean {\n  let mostSignificant0 = z0, mostSignificant1 = z1;\n\n  if (lessMsb(mostSignificant0 ^ mostSignificant1, y0 ^ y1)) {\n    mostSignificant0 = y0;\n    mostSignificant1 = y1;\n  }\n\n  if (lessMsb(mostSignificant0 ^ mostSignificant1, x0 ^ x1)) {\n    mostSignificant0 = x0;\n    mostSignificant1 = x1;\n  }\n\n  return mostSignificant0 < mostSignificant1;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {asyncComputation} from 'neuroglancer/async_computation';\n\nexport const decodeJpeg = asyncComputation<\n    (data: Uint8Array, width: number, height: number, numComponents: number) => Uint8Array>(\n    'decodeJpeg');\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {postProcessRawData} from 'neuroglancer/sliceview/backend_chunk_decoders/postprocess';\nimport {VolumeChunk} from 'neuroglancer/sliceview/volume/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {decodeJpeg} from 'neuroglancer/async_computation/decode_jpeg_request';\nimport {requestAsyncComputation} from 'neuroglancer/async_computation/request';\n\nexport async function decodeJpegChunk(\n    chunk: VolumeChunk, cancellationToken: CancellationToken, response: ArrayBuffer) {\n  const chunkDataSize = chunk.chunkDataSize!;\n  const decoded = await requestAsyncComputation(\n      decodeJpeg, cancellationToken, [response], new Uint8Array(response), chunkDataSize[0],\n      chunkDataSize[1] * chunkDataSize[2], chunk.source!.spec.numChannels);\n  await postProcessRawData(chunk, cancellationToken, decoded);\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {WatchableValueInterface} from 'neuroglancer/trackable_value';\nimport {identityMat4, kOneVec, kZeroVec, mat4, quat, vec3} from 'neuroglancer/util/geom';\nimport {parseFiniteVec} from 'neuroglancer/util/json';\nimport {NullarySignal} from 'neuroglancer/util/signal';\n\nexport interface RotationTranslationScale {\n  rotation: quat;\n  translation: vec3;\n  scale: vec3;\n}\n\n/**\n * Class for representing a coordinate transform specified by a user.\n *\n * Typically it represents a transform from a local coordinate space to a global coordinate space.\n */\nexport class CoordinateTransform implements WatchableValueInterface<mat4> {\n  changed = new NullarySignal();\n\n  get value() {\n    return this.transform;\n  }\n\n  constructor(public transform = mat4.create()) {}\n\n  /**\n   * Resets to the identity transform.\n   */\n  reset() {\n    mat4.copy(this.transform, identityMat4);\n    this.changed.dispatch();\n  }\n\n  toJSON() {\n    if (mat4.equals(identityMat4, this.transform)) {\n      return undefined;\n    }\n    const m = this.transform;\n    return [\n      [m[0], m[4], m[8], m[12]],   //\n      [m[1], m[5], m[9], m[13]],   //\n      [m[2], m[6], m[10], m[14]],  //\n      [m[3], m[7], m[11], m[15]],  //\n    ];\n  }\n\n  restoreState(obj: any) {\n    if (obj == null) {\n      this.reset();\n      return;\n    }\n    if (Array.isArray(obj)) {\n      if (obj.length === 4) {\n        try {\n          for (let i = 0; i < 4; ++i) {\n            parseFiniteVec(this.transform.subarray(i * 4, (i + 1) * 4), obj[i]);\n          }\n          mat4.transpose(this.transform, this.transform);\n        } catch (ignoredError) {\n          this.reset();\n        }\n        return;\n      }\n      if (obj.length === 16) {\n        try {\n          parseFiniteVec(this.transform, obj);\n          mat4.transpose(this.transform, this.transform);\n        } catch (ignoredError) {\n          this.reset();\n        }\n        return;\n      }\n      // Invalid size.\n      this.reset();\n      return;\n    }\n\n    if (typeof obj === 'object') {\n      const rotation = quat.create();\n      const translation = vec3.create();\n      const scale = vec3.fromValues(1, 1, 1);\n      try {\n        parseFiniteVec(rotation, obj['rotation']);\n        quat.normalize(rotation, rotation);\n      } catch (ignoredError) {\n        quat.identity(rotation);\n      }\n\n      try {\n        parseFiniteVec(translation, obj['translation']);\n      } catch (ignoredError) {\n        vec3.copy(translation, kZeroVec);\n      }\n\n      try {\n        parseFiniteVec(scale, obj['scale']);\n      } catch (ignoredError) {\n        vec3.copy(scale, kOneVec);\n      }\n      mat4.fromRotationTranslationScale(this.transform, rotation, translation, scale);\n      this.changed.dispatch();\n    } else {\n      this.reset();\n    }\n  }\n\n  clone() {\n    return new CoordinateTransform(mat4.clone(this.transform));\n  }\n}\n\nexport function makeDerivedCoordinateTransform(\n    derivedTransform: CoordinateTransform, baseTransform: CoordinateTransform,\n    update: (output: mat4, input: mat4) => void): () => void {\n  update(derivedTransform.transform, baseTransform.transform);\n  return baseTransform.changed.add(() => {\n    update(derivedTransform.transform, baseTransform.transform);\n    derivedTransform.changed.dispatch();\n  });\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Chunk, ChunkConstructor, ChunkSource, withChunkManager} from 'neuroglancer/chunk_manager/backend';\nimport {CoordinateTransform} from 'neuroglancer/coordinate_transform';\nimport {SharedWatchableValue} from 'neuroglancer/shared_watchable_value';\nimport {RenderLayer as RenderLayerInterface, SLICEVIEW_ADD_VISIBLE_LAYER_RPC_ID, SLICEVIEW_REMOVE_VISIBLE_LAYER_RPC_ID, SLICEVIEW_RENDERLAYER_RPC_ID, SLICEVIEW_RENDERLAYER_UPDATE_TRANSFORM_RPC_ID, SLICEVIEW_RPC_ID, SLICEVIEW_UPDATE_VIEW_RPC_ID, SliceViewBase, SliceViewChunkSource as SliceViewChunkSourceInterface, SliceViewChunkSpecification, TransformedSource} from 'neuroglancer/sliceview/base';\nimport {ChunkLayout} from 'neuroglancer/sliceview/chunk_layout';\nimport {mat4, vec3, vec3Key} from 'neuroglancer/util/geom';\nimport {NullarySignal} from 'neuroglancer/util/signal';\nimport {getBasePriority, getPriorityTier, withSharedVisibility} from 'neuroglancer/visibility_priority/backend';\nimport {registerRPC, registerSharedObject, RPC, SharedObjectCounterpart} from 'neuroglancer/worker_rpc';\n\nconst BASE_PRIORITY = -1e12;\nconst SCALE_PRIORITY_MULTIPLIER = 1e9;\n\n// Temporary values used by SliceView.updateVisibleChunk\nconst tempChunkPosition = vec3.create();\nconst tempCenter = vec3.create();\n\nclass SliceViewCounterpartBase extends SliceViewBase<SliceViewChunkSource, RenderLayer> {\n  constructor(rpc: RPC, options: any) {\n    super();\n    this.initializeSharedObject(rpc, options['id']);\n  }\n}\n\nconst SliceViewIntermediateBase = withSharedVisibility(withChunkManager(SliceViewCounterpartBase));\n@registerSharedObject(SLICEVIEW_RPC_ID)\nexport class SliceView extends SliceViewIntermediateBase {\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.registerDisposer(this.chunkManager.recomputeChunkPriorities.add(() => {\n      this.updateVisibleChunks();\n    }));\n  }\n\n  onViewportChanged() {\n    this.chunkManager.scheduleUpdateChunkPriorities();\n  }\n\n  handleLayerChanged = (() => {\n    if (this.hasValidViewport) {\n      this.chunkManager.scheduleUpdateChunkPriorities();\n    }\n  });\n\n  updateVisibleChunks() {\n    const globalCenter = this.centerDataPosition;\n    let chunkManager = this.chunkManager;\n    const visibility = this.visibility.value;\n    if (visibility === Number.NEGATIVE_INFINITY) {\n      return;\n    }\n\n    const priorityTier = getPriorityTier(visibility);\n    let basePriority = getBasePriority(visibility);\n    basePriority += BASE_PRIORITY;\n\n    const localCenter = tempCenter;\n\n    let getLayoutObject = (chunkLayout: ChunkLayout) => {\n      chunkLayout.globalToLocalSpatial(localCenter, globalCenter);\n      return this.visibleChunkLayouts.get(chunkLayout);\n    };\n\n    function addChunk(\n        chunkLayout: ChunkLayout, sources: Map<SliceViewChunkSource, number>,\n        positionInChunks: vec3, visibleSources: SliceViewChunkSource[]) {\n      vec3.multiply(tempChunkPosition, positionInChunks, chunkLayout.size);\n      let priority = -vec3.distance(localCenter, tempChunkPosition);\n      for (let source of visibleSources) {\n        let priorityIndex = sources.get(source)!;\n        let chunk = source.getChunk(positionInChunks);\n        chunkManager.requestChunk(\n            chunk, priorityTier,\n            basePriority + priority + SCALE_PRIORITY_MULTIPLIER * priorityIndex);\n      }\n    }\n    this.computeVisibleChunks(getLayoutObject, addChunk);\n  }\n\n  removeVisibleLayer(layer: RenderLayer) {\n    this.visibleLayers.delete(layer);\n    layer.layerChanged.remove(this.handleLayerChanged);\n    layer.transform.changed.remove(this.invalidateVisibleSources);\n    layer.renderScaleTarget.changed.remove(this.invalidateVisibleSources);\n    this.invalidateVisibleSources();\n  }\n\n  addVisibleLayer(layer: RenderLayer) {\n    this.visibleLayers.set(layer, []);\n    layer.layerChanged.add(this.handleLayerChanged);\n    layer.transform.changed.add(this.invalidateVisibleSources);\n    layer.renderScaleTarget.changed.add(this.invalidateVisibleSources);\n    this.invalidateVisibleSources();\n  }\n\n  disposed() {\n    for (let layer of this.visibleLayers.keys()) {\n      this.removeVisibleLayer(layer);\n    }\n    super.disposed();\n  }\n\n  private invalidateVisibleSources = (() => {\n    this.visibleSourcesStale = true;\n    if (this.hasValidViewport) {\n      this.chunkManager.scheduleUpdateChunkPriorities();\n    }\n  });\n}\n\nregisterRPC(SLICEVIEW_UPDATE_VIEW_RPC_ID, function(x) {\n  let obj = this.get(x.id);\n  if (x.width) {\n    obj.setViewportSize(x.width, x.height);\n  }\n  if (x.viewportToData) {\n    obj.setViewportToDataMatrix(x.viewportToData);\n  }\n});\nregisterRPC(SLICEVIEW_ADD_VISIBLE_LAYER_RPC_ID, function(x) {\n  let obj = <SliceView>this.get(x['id']);\n  let layer = <RenderLayer>this.get(x['layerId']);\n  obj.addVisibleLayer(layer);\n});\nregisterRPC(SLICEVIEW_REMOVE_VISIBLE_LAYER_RPC_ID, function(x) {\n  let obj = <SliceView>this.get(x['id']);\n  let layer = <RenderLayer>this.get(x['layerId']);\n  obj.removeVisibleLayer(layer);\n});\n\nexport class SliceViewChunk extends Chunk {\n  chunkGridPosition: vec3;\n  source: SliceViewChunkSource|null = null;\n\n  constructor() {\n    super();\n    this.chunkGridPosition = vec3.create();\n  }\n\n  initializeVolumeChunk(key: string, chunkGridPosition: vec3) {\n    super.initialize(key);\n    vec3.copy(this.chunkGridPosition, chunkGridPosition);\n  }\n\n  serialize(msg: any, transfers: any[]) {\n    super.serialize(msg, transfers);\n    msg['chunkGridPosition'] = this.chunkGridPosition;\n  }\n\n  downloadSucceeded() {\n    super.downloadSucceeded();\n  }\n\n  freeSystemMemory() {}\n\n  toString() {\n    return this.source!.toString() + ':' + vec3Key(this.chunkGridPosition);\n  }\n}\n\nexport interface SliceViewChunkSource {\n  // TODO(jbms): Move this declaration to the class definition below and declare abstract once\n  // TypeScript supports mixins with abstact classes.\n  getChunk(chunkGridPosition: vec3): SliceViewChunk;\n\n  chunkConstructor: ChunkConstructor<SliceViewChunk>;\n}\n\nexport class SliceViewChunkSource extends ChunkSource implements SliceViewChunkSourceInterface {\n  spec: SliceViewChunkSpecification;\n  chunks: Map<string, SliceViewChunk>;\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n  }\n\n  getChunk(chunkGridPosition: vec3) {\n    let key = vec3Key(chunkGridPosition);\n    let chunk = this.chunks.get(key);\n    if (chunk === undefined) {\n      chunk = this.getNewChunk_(this.chunkConstructor);\n      chunk.initializeVolumeChunk(key, chunkGridPosition);\n      this.addChunk(chunk);\n    }\n    return chunk;\n  }\n}\n\n@registerSharedObject(SLICEVIEW_RENDERLAYER_RPC_ID)\nexport class RenderLayer extends SharedObjectCounterpart implements\n    RenderLayerInterface<SliceViewChunkSource> {\n  rpcId: number;\n  sources: SliceViewChunkSource[][];\n  layerChanged = new NullarySignal();\n  transform = new CoordinateTransform();\n  transformedSources: TransformedSource<SliceViewChunkSource>[][];\n  transformedSourcesGeneration = -1;\n  renderScaleTarget: SharedWatchableValue<number>;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.renderScaleTarget = rpc.get(options.renderScaleTarget);\n    let sources = this.sources = new Array<SliceViewChunkSource[]>();\n    for (let alternativeIds of options['sources']) {\n      let alternatives = new Array<SliceViewChunkSource>();\n      sources.push(alternatives);\n      for (let sourceId of alternativeIds) {\n        let source: SliceViewChunkSource = rpc.get(sourceId);\n        this.registerDisposer(source.addRef());\n        alternatives.push(source);\n      }\n    }\n    mat4.copy(this.transform.transform, options['transform']);\n    this.transform.changed.add(this.layerChanged.dispatch);\n  }\n}\nregisterRPC(SLICEVIEW_RENDERLAYER_UPDATE_TRANSFORM_RPC_ID, function(x) {\n  const layer = <RenderLayer>this.get(x['id']);\n  const newValue: mat4 = x['value'];\n  const oldValue = layer.transform.transform;\n  if (!mat4.equals(newValue, oldValue)) {\n    mat4.copy(oldValue, newValue);\n    layer.transform.changed.dispatch();\n  }\n});\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {mat4} from 'neuroglancer/util/geom';\n\nexport const MESH_LAYER_RPC_ID = 'mesh/MeshLayer';\nexport const MULTISCALE_MESH_LAYER_RPC_ID = 'mesh/MultiscaleMeshLayer';\nexport const FRAGMENT_SOURCE_RPC_ID = 'mesh/FragmentSource';\n\nexport const MULTISCALE_FRAGMENT_SOURCE_RPC_ID = 'mesh/MultiscaleFragmentSource';\n\nexport type EncodedVertexPositions = Float32Array|Uint32Array|Uint16Array;\nexport type MeshVertexIndices = Uint16Array|Uint32Array;\nexport type OctahedronVertexNormals = Uint8Array;\n\nexport interface EncodedMeshData {\n  vertexPositions: EncodedVertexPositions;\n  vertexNormals: OctahedronVertexNormals;\n  indices: MeshVertexIndices;\n  strips: boolean;\n}\n\nexport interface MultiscaleFragmentFormat {\n  /**\n   * If `true`, vertex positions are specified relative to the fragment bounds, meaning (0, 0, 0) is\n   * the start corner of the fragment and (1, 1, 1) is the end corner.\n   *\n   * If `false`, vertex positions are in \"model\" coordinates.\n   */\n  fragmentRelativeVertices: boolean;\n\n  transform: mat4;\n  vertexPositionFormat: VertexPositionFormat;\n}\n\nexport enum VertexPositionFormat {\n  float32,\n  uint10,\n  uint16,\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {asyncComputation} from 'neuroglancer/async_computation';\n\nexport const decodeGzip = asyncComputation<(data: Uint8Array) => Uint8Array>('decodeGzip');\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Chunk, ChunkSource} from 'neuroglancer/chunk_manager/backend';\nimport {decodeVertexPositionsAndIndices} from 'neuroglancer/mesh/backend';\nimport {SegmentationLayerSharedObjectCounterpart} from 'neuroglancer/segmentation_display_state/backend';\nimport {forEachVisibleSegment, getObjectKey} from 'neuroglancer/segmentation_display_state/base';\nimport {SKELETON_LAYER_RPC_ID} from 'neuroglancer/skeleton/base';\nimport {TypedArray} from 'neuroglancer/util/array';\nimport {Endianness} from 'neuroglancer/util/endian';\nimport {Uint64} from 'neuroglancer/util/uint64';\nimport {getBasePriority, getPriorityTier} from 'neuroglancer/visibility_priority/backend';\nimport {registerSharedObject, RPC} from 'neuroglancer/worker_rpc';\n\nconst SKELETON_CHUNK_PRIORITY = 60;\n\n// Chunk that contains the skeleton of a single object.\nexport class SkeletonChunk extends Chunk {\n  objectId = new Uint64();\n  vertexPositions: Float32Array|null = null;\n  vertexAttributes: TypedArray[]|null = null;\n  indices: Uint32Array|null = null;\n  constructor() {\n    super();\n  }\n\n  initializeSkeletonChunk(key: string, objectId: Uint64) {\n    super.initialize(key);\n    this.objectId.assign(objectId);\n  }\n  freeSystemMemory() {\n    this.vertexPositions = this.indices = null;\n  }\n\n  private getVertexAttributeBytes() {\n    let total = this.vertexPositions!.byteLength;\n    const {vertexAttributes} = this;\n    if (vertexAttributes != null) {\n      vertexAttributes.forEach(a => {\n        total += a.byteLength;\n      });\n    }\n    return total;\n  }\n\n  serialize(msg: any, transfers: any[]) {\n    super.serialize(msg, transfers);\n    const vertexPositions = this.vertexPositions!;\n    const indices = this.indices!;\n    msg['numVertices'] = vertexPositions.length / 3;\n    msg['indices'] = indices;\n    transfers.push(indices.buffer);\n\n    const {vertexAttributes} = this;\n    if (vertexAttributes != null && vertexAttributes.length > 0) {\n      const vertexData = new Uint8Array(this.getVertexAttributeBytes());\n      vertexData.set(new Uint8Array(\n          vertexPositions.buffer, vertexPositions.byteOffset, vertexPositions.byteLength));\n      let vertexAttributeOffsets = msg['vertexAttributeOffsets'] =\n          new Uint32Array(vertexAttributes.length + 1);\n      vertexAttributeOffsets[0] = 0;\n      let offset = vertexPositions.byteLength;\n      vertexAttributes.forEach((a, i) => {\n        vertexAttributeOffsets[i + 1] = offset;\n        vertexData.set(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), offset);\n        offset += a.byteLength;\n      });\n      transfers.push(vertexData.buffer);\n      msg['vertexAttributes'] = vertexData;\n    } else {\n      msg['vertexAttributes'] = new Uint8Array(\n          vertexPositions.buffer, vertexPositions.byteOffset, vertexPositions.byteLength);\n      msg['vertexAttributeOffsets'] = Uint32Array.of(0);\n      if (vertexPositions.buffer !== transfers[0]) {\n        transfers.push(vertexPositions.buffer);\n      }\n    }\n    this.vertexPositions = this.indices = this.vertexAttributes = null;\n  }\n  downloadSucceeded() {\n    this.systemMemoryBytes = this.gpuMemoryBytes =\n        this.indices!.byteLength + this.getVertexAttributeBytes();\n    super.downloadSucceeded();\n  }\n}\n\nexport class SkeletonSource extends ChunkSource {\n  chunks: Map<string, SkeletonChunk>;\n  getChunk(objectId: Uint64) {\n    const key = getObjectKey(objectId);\n    let chunk = this.chunks.get(key);\n    if (chunk === undefined) {\n      chunk = this.getNewChunk_(SkeletonChunk);\n      chunk.initializeSkeletonChunk(key, objectId);\n      this.addChunk(chunk);\n    }\n    return chunk;\n  }\n}\n\n@registerSharedObject(SKELETON_LAYER_RPC_ID)\nexport class SkeletonLayer extends SegmentationLayerSharedObjectCounterpart {\n  source: SkeletonSource;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.source = this.registerDisposer(rpc.getRef<SkeletonSource>(options['source']));\n    this.registerDisposer(this.chunkManager.recomputeChunkPriorities.add(() => {\n      this.updateChunkPriorities();\n    }));\n  }\n\n  private updateChunkPriorities() {\n    const visibility = this.visibility.value;\n    if (visibility === Number.NEGATIVE_INFINITY) {\n      return;\n    }\n    const priorityTier = getPriorityTier(visibility);\n    const basePriority = getBasePriority(visibility);\n    const {source, chunkManager} = this;\n    forEachVisibleSegment(this, objectId => {\n      const chunk = source.getChunk(objectId);\n      chunkManager.requestChunk(chunk, priorityTier, basePriority + SKELETON_CHUNK_PRIORITY);\n    });\n  }\n}\n\n/**\n * Extracts vertex positions and edge vertex indices of the specified endianness from `data'.\n *\n * See documentation of decodeVertexPositionsAndIndices.\n */\nexport function decodeSkeletonVertexPositionsAndIndices(\n    chunk: SkeletonChunk, data: ArrayBuffer, endianness: Endianness, vertexByteOffset: number,\n    numVertices: number, indexByteOffset?: number, numEdges?: number) {\n  const meshData = decodeVertexPositionsAndIndices(\n      /*verticesPerPrimitive=*/2, data, endianness, vertexByteOffset, numVertices,\n    indexByteOffset, numEdges);\n  chunk.vertexPositions = meshData.vertexPositions as Float32Array;\n  chunk.indices = meshData.indices as Uint32Array;\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DataType} from 'neuroglancer/util/data_type';\n\nexport const SKELETON_LAYER_RPC_ID = 'skeleton/SkeletonLayer';\n\nexport interface VertexAttributeInfo {\n  dataType: DataType;\n  numComponents: number;\n}\n","'use strict';\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\nfunction _has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst OBJECT_ID_SYMBOL = Symbol('objectId');\nlet nextObjectId = 0;\n\n/**\n * Returns a string that uniquely identifies a particular primitive value or object instance.\n */\nexport function getObjectId(x: any) {\n  if (x instanceof Object) {\n    let id = x[OBJECT_ID_SYMBOL];\n    if (id === undefined) {\n      id = x[OBJECT_ID_SYMBOL] = nextObjectId++;\n    }\n    return `o${id}`;\n  } else {\n    return '' + JSON.stringify(x);\n  }\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file\n * Provides a simple way to request a file on the backend with priority integration.\n */\n\nimport {Chunk, ChunkManager, ChunkSourceBase} from 'neuroglancer/chunk_manager/backend';\nimport {ChunkPriorityTier, ChunkState} from 'neuroglancer/chunk_manager/base';\nimport {CANCELED, CancellationToken, makeCancelablePromise} from 'neuroglancer/util/cancellation';\nimport {Borrowed, Owned} from 'neuroglancer/util/disposable';\nimport {cancellableFetchOk, responseArrayBuffer} from 'neuroglancer/util/http_request';\nimport {stableStringify} from 'neuroglancer/util/json';\nimport {getObjectId} from 'neuroglancer/util/object_id';\n\nexport type PriorityGetter = () => {\n  priorityTier: ChunkPriorityTier, priority: number\n};\n\ninterface FileDataRequester<Data> {\n  resolve: (data: Data) => void;\n  reject: (error: any) => void;\n  getPriority: PriorityGetter;\n}\n\nclass GenericSharedDataChunk<Key, Data> extends Chunk {\n  decodedKey?: Key;\n  data?: Data;\n  requesters?: Set<FileDataRequester<Data>>;\n  backendOnly = true;\n\n  initialize(key: string) {\n    super.initialize(key);\n    this.requesters = new Set<FileDataRequester<Data>>();\n  }\n\n  downloadSucceeded() {\n    super.downloadSucceeded();\n    let {requesters, data} = this;\n    this.requesters = undefined;\n    for (let requester of requesters!) {\n      requester.resolve(data!);\n    }\n  }\n\n  downloadFailed(error: any) {\n    super.downloadFailed(error);\n    let {requesters} = this;\n    this.requesters = undefined;\n    for (let requester of requesters!) {\n      requester.reject(error);\n    }\n  }\n\n  freeSystemMemory() {\n    this.data = undefined;\n  }\n}\n\nexport interface GenericSharedDataSourceOptions<Key, Data> {\n  encodeKey?: (key: Key) => string;\n  download: (key: Key, cancellationToken: CancellationToken) => Promise<{size: number, data: Data}>;\n  sourceQueueLevel?: number;\n}\n\nexport class GenericSharedDataSource<Key, Data> extends ChunkSourceBase {\n  chunks: Map<string, GenericSharedDataChunk<Key, Data>>;\n\n  private encodeKeyFunction: (key: Key) => string;\n\n  private downloadFunction:\n      (key: Key, cancellationToken: CancellationToken) => Promise<{size: number, data: Data}>;\n\n  constructor(\n      chunkManager: Owned<ChunkManager>, options: GenericSharedDataSourceOptions<Key, Data>) {\n    super(chunkManager);\n    this.registerDisposer(chunkManager);\n    const {encodeKey = stableStringify} = options;\n    this.downloadFunction = options.download;\n    this.encodeKeyFunction = encodeKey;\n    const {sourceQueueLevel = 0} = options;\n    this.sourceQueueLevel = sourceQueueLevel;\n\n    // This source is unusual in that it updates its own chunk priorities.\n    this.registerDisposer(this.chunkManager.recomputeChunkPrioritiesLate.add(() => {\n      this.updateChunkPriorities();\n    }));\n  }\n\n  updateChunkPriorities() {\n    let {chunkManager} = this;\n    for (let chunk of this.chunks.values()) {\n      let {requesters} = chunk;\n      if (requesters !== undefined) {\n        for (let requester of requesters) {\n          const {priorityTier, priority} = requester.getPriority();\n          if (priorityTier === ChunkPriorityTier.RECENT) continue;\n          chunkManager.requestChunk(chunk, priorityTier, priority);\n        }\n      }\n    }\n  }\n\n  async download(chunk: GenericSharedDataChunk<Key, Data>, cancellationToken: CancellationToken) {\n    const {size, data} = await this.downloadFunction(chunk.decodedKey!, cancellationToken);\n    chunk.systemMemoryBytes = size;\n    chunk.data = data;\n  }\n\n  /**\n   * Precondition: priorityTier <= ChunkPriorityTier.LAST_ORDERED_TIER\n   */\n  getData(key: Key, getPriority: PriorityGetter, cancellationToken: CancellationToken) {\n    const encodedKey = this.encodeKeyFunction(key);\n    let chunk = this.chunks.get(encodedKey);\n    if (chunk === undefined) {\n      chunk = this.getNewChunk_<GenericSharedDataChunk<Key, Data>>(GenericSharedDataChunk);\n      chunk.decodedKey = key;\n      chunk.initialize(encodedKey);\n      this.addChunk(chunk);\n    }\n    return makeCancelablePromise<Data>(cancellationToken, (resolve, reject, token) => {\n      // If the data is already available or the request has already failed, resolve/reject the\n      // promise immediately.\n      switch (chunk!.state) {\n        case ChunkState.FAILED:\n          reject(chunk!.error);\n          return;\n\n        case ChunkState.SYSTEM_MEMORY_WORKER:\n          resolve(chunk!.data!);\n          return;\n      }\n      const requester: FileDataRequester<Data> = {resolve, reject, getPriority};\n      chunk!.requesters!.add(requester);\n      token.add(() => {\n        let {requesters} = chunk!;\n        if (requesters !== undefined) {\n          requesters.delete(requester);\n          this.chunkManager.scheduleUpdateChunkPriorities();\n        }\n        reject(CANCELED);\n      });\n      this.chunkManager.scheduleUpdateChunkPriorities();\n    });\n  }\n\n  static get<Key, Data>(\n      chunkManager: Borrowed<ChunkManager>, memoizeKey: string,\n      options: GenericSharedDataSourceOptions<Key, Data>) {\n    return chunkManager.memoize.get(\n        `getFileSource:${memoizeKey}`,\n        () => new GenericSharedDataSource(chunkManager.addRef(), options));\n  }\n\n  static getData<Key, Data>(\n      chunkManager: Borrowed<ChunkManager>, memoizeKey: string,\n      options: GenericSharedDataSourceOptions<Key, Data>, key: Key, getPriority: PriorityGetter,\n      cancellationToken: CancellationToken) {\n    const source = GenericSharedDataSource.get(chunkManager, memoizeKey, options);\n    const result = source.getData(key, getPriority, cancellationToken);\n    source.dispose();\n    return result;\n  }\n\n  static getUrl<Data>(\n      chunkManager: Borrowed<ChunkManager>,\n      decodeFunction: (buffer: ArrayBuffer, cancellationToken: CancellationToken) =>\n          Promise<{size: number, data: Data}>,\n      url: string, getPriority: PriorityGetter, cancellationToken: CancellationToken) {\n    return GenericSharedDataSource.getData<string, Data>(\n        chunkManager, `${getObjectId(decodeFunction)}`, {\n          download: (url: string, cancellationToken: CancellationToken) =>\n              cancellableFetchOk(url, {}, responseArrayBuffer, cancellationToken)\n                  .then(response => decodeFunction(response, cancellationToken))\n        },\n        url, getPriority, cancellationToken);\n  }\n}\n","\n/*jslint browser: true, node: true */\n/*global require, module */\n\n\"use strict\";\n\n/*** Imports ***/\n\n/**\n * nifti\n * @type {*|{}}\n */\nvar nifti = nifti || {};\nnifti.NIFTI1 = nifti.NIFTI1 || ((typeof require !== 'undefined') ? require('./nifti1.js') : null);\nnifti.NIFTI2 = nifti.NIFTI2 || ((typeof require !== 'undefined') ? require('./nifti2.js') : null);\nnifti.Utils = nifti.Utils || ((typeof require !== 'undefined') ? require('./utilities.js') : null);\n\nvar pako = pako || ((typeof require !== 'undefined') ? require('pako') : null);\n\n\n\n/*** Static Methods ***/\n\n/**\n * Returns true if this data represents a NIFTI-1 header.\n * @param {ArrayBuffer} data\n * @returns {boolean}\n */\nnifti.isNIFTI1 = function (data) {\n    var buf, mag1, mag2, mag3;\n\n    if (data.byteLength < nifti.NIFTI1.STANDARD_HEADER_SIZE) {\n        return false;\n    }\n\n    buf = new DataView(data);\n\n    if (buf)\n\n    mag1 = buf.getUint8(nifti.NIFTI1.MAGIC_NUMBER_LOCATION);\n    mag2 = buf.getUint8(nifti.NIFTI1.MAGIC_NUMBER_LOCATION + 1);\n    mag3 = buf.getUint8(nifti.NIFTI1.MAGIC_NUMBER_LOCATION + 2);\n\n    return !!((mag1 === nifti.NIFTI1.MAGIC_NUMBER[0]) && (mag2 === nifti.NIFTI1.MAGIC_NUMBER[1]) &&\n        (mag3 === nifti.NIFTI1.MAGIC_NUMBER[2]));\n};\n\n\n/**\n * Returns true if this data represents a NIFTI-2 header.\n * @param {ArrayBuffer} data\n * @returns {boolean}\n */\nnifti.isNIFTI2 = function (data) {\n    var buf, mag1, mag2, mag3;\n\n    if (data.byteLength < nifti.NIFTI1.STANDARD_HEADER_SIZE) {\n        return false;\n    }\n\n    buf = new DataView(data);\n    mag1 = buf.getUint8(nifti.NIFTI2.MAGIC_NUMBER_LOCATION);\n    mag2 = buf.getUint8(nifti.NIFTI2.MAGIC_NUMBER_LOCATION + 1);\n    mag3 = buf.getUint8(nifti.NIFTI2.MAGIC_NUMBER_LOCATION + 2);\n\n    return !!((mag1 === nifti.NIFTI2.MAGIC_NUMBER[0]) && (mag2 === nifti.NIFTI2.MAGIC_NUMBER[1]) &&\n    (mag3 === nifti.NIFTI2.MAGIC_NUMBER[2]));\n};\n\n\n\n/**\n * Returns true if this data represents a NIFTI header.\n * @param {ArrayBuffer} data\n * @returns {boolean}\n */\nnifti.isNIFTI = function (data) {\n    return (nifti.isNIFTI1(data) || nifti.isNIFTI2(data));\n};\n\n\n\n/**\n * Returns true if this data is GZIP compressed.\n * @param {ArrayBuffer} data\n * @returns {boolean}\n */\nnifti.isCompressed = function (data) {\n    var buf, magicCookie1, magicCookie2;\n\n    if (data) {\n        buf = new DataView(data);\n\n        magicCookie1 = buf.getUint8(0);\n        magicCookie2 = buf.getUint8(1);\n\n        if (magicCookie1 === nifti.Utils.GUNZIP_MAGIC_COOKIE1) {\n            return true;\n        }\n\n        if (magicCookie2 === nifti.Utils.GUNZIP_MAGIC_COOKIE2) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n\n\n/**\n * Returns decompressed data.\n * @param {ArrayBuffer} data\n * @returns {ArrayBuffer}\n */\nnifti.decompress = function (data) {\n    return pako.inflate(data).buffer;\n};\n\n\n\n/**\n * Reads and returns the header object.\n * @param {ArrayBuffer} data\n * @returns {nifti.NIFTI1|nifti.NIFTI2|null}\n */\nnifti.readHeader = function (data) {\n    var header = null;\n\n    if (nifti.isCompressed(data)) {\n        data = nifti.decompress(data);\n    }\n\n    if (nifti.isNIFTI1(data)) {\n        header = new nifti.NIFTI1();\n    } else if (nifti.isNIFTI2(data)) {\n        header = new nifti.NIFTI2();\n    }\n\n    if (header) {\n        header.readHeader(data);\n    } else {\n        console.error(\"That file does not appear to be NIFTI!\");\n    }\n\n    return header;\n};\n\n\n\n/**\n * Returns true if this header contains an extension.\n * @param {nifti.NIFTI1|nifti.NIFTI2} header\n * @returns {boolean}\n */\nnifti.hasExtension = function (header) {\n    return (header.extensionFlag[0] != 0);\n};\n\n\n\n/**\n * Returns the image data.\n * @param {nifti.NIFTI1|nifti.NIFTI2} header\n * @param {ArrayBuffer} data\n * @returns {ArrayBuffer}\n */\nnifti.readImage = function (header, data) {\n    var imageOffset = header.vox_offset,\n        timeDim = 1,\n        statDim = 1;\n\n    if (header.dims[4]) {\n        timeDim = header.dims[4];\n    }\n\n    if (header.dims[5]) {\n        statDim = header.dims[5];\n    }\n\n    var imageSize = header.dims[1] * header.dims[2] * header.dims[3] * timeDim * statDim * (header.numBitsPerVoxel / 8);\n    return data.slice(imageOffset, imageOffset + imageSize);\n};\n\n\n\n/**\n * Returns the extension data (including extension header).\n * @param {nifti.NIFTI1|nifti.NIFTI2} header\n * @param {ArrayBuffer} data\n * @returns {ArrayBuffer}\n */\nnifti.readExtension = function (header, data) {\n    var loc = header.getExtensionLocation(),\n        size = header.extensionSize;\n\n    return data.slice(loc, loc + size);\n};\n\n\n\n/**\n * Returns the extension data.\n * @param {nifti.NIFTI1|nifti.NIFTI2} header\n * @param {ArrayBuffer} data\n * @returns {ArrayBuffer}\n */\nnifti.readExtensionData = function (header, data) {\n    var loc = header.getExtensionLocation(),\n        size = header.extensionSize;\n\n    return data.slice(loc + 8, loc + size - 8);\n};\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = nifti;\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {VolumeChunk} from 'neuroglancer/sliceview/volume/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\n\nexport async function decodeCompressedSegmentationChunk(\n    chunk: VolumeChunk, cancellationToken: CancellationToken, response: ArrayBuffer) {\n  cancellationToken;\n  chunk.data = new Uint32Array(response);\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file\n * Support for decompressing uint32 and uint64 segment label chunks.\n */\n\n/**\n * Determines the offset of the value at the specified dataPosition in a single-channel compressed\n * segmentation.\n *\n * @param baseOffset The base offset into `data' at which the compressed data for this channel\n * starts.\n * @param chunkDataSize A 3-element array specifying the size of the volume,\n * @param blockSize A 3-element array specifying the block size ued for compression.\n * @param dataPosition A 3-element array specifying the position within the volume from which to\n * read.\n * @returns The offset into `data', relative to baseOffset, at which the value is located.\n */\nexport function decodeValueOffset(\n    data: Uint32Array, baseOffset: number, chunkDataSize: ArrayLike<number>,\n    blockSize: ArrayLike<number>, dataPosition: ArrayLike<number>, uint32sPerElement: number) {\n  let gridOffset = 0, subchunkOffset = 0, gridStride = 1, subchunkStride = 1;\n  for (let i = 0; i < 3; ++i) {\n    let posValue = dataPosition[i];\n    let subchunkSizeValue = blockSize[i];\n    let gridSubscript = Math.floor(posValue / subchunkSizeValue);\n    let subchunkSubscript = posValue % subchunkSizeValue;\n    gridOffset += gridSubscript * gridStride;\n    gridStride *= Math.ceil(chunkDataSize[i] / subchunkSizeValue);\n    subchunkOffset += subchunkSubscript * subchunkStride;\n    subchunkStride *= subchunkSizeValue;\n  }\n  let subchunkHeaderOffset = baseOffset + gridOffset * 2;\n  let subchunkHeader0 = data[subchunkHeaderOffset];\n  let subchunkHeader1 = data[subchunkHeaderOffset + 1];\n  let outputValueOffset = subchunkHeader0 & 0xFFFFFF;\n  let encodingBits = (subchunkHeader0 >> 24) & 0xFF;\n  if (encodingBits > 0) {\n    let encodedValueBaseOffset = baseOffset + subchunkHeader1 & 0xFFFFFF;\n    let encodedValueOffset =\n        encodedValueBaseOffset + Math.floor(subchunkOffset * encodingBits / 32.0);\n    let encodedValue = data[encodedValueOffset];\n    let wordOffset = (subchunkOffset * encodingBits) % 32;\n\n    let decodedValue = (encodedValue >> wordOffset) & ((1 << encodingBits) - 1);\n    outputValueOffset += uint32sPerElement * decodedValue;\n  }\n  return outputValueOffset;\n}\n","// DO NOT EDIT.  Generated from\n// templates/neuroglancer/sliceview/compressed_segmentation/decode.template.ts.\n/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file\n * Support for decompressing uint64 segment label chunks.\n */\n\nimport {decodeValueOffset} from 'neuroglancer/sliceview/compressed_segmentation/decode_common';\n\n\n\n/**\n * Reads the single value at the specified dataPosition in a single-channel compressed segmentation.\n *\n * @param baseOffset The base offset into `data' at which the compressed data for this channel\n * starts.\n * @param chunkDataSize A 3-element array specifying the size of the volume.\n * @param blockSize A 3-element array specifying the block size ued for compression.\n * @param dataPosition A 3-element array specifying the position within the volume from which to\n * read.\n *\n * Stores the result in `out'.\n */\nexport function readSingleChannelValue(\n\n    data: Uint32Array, baseOffset: number, chunkDataSize: ArrayLike<number>,\n    blockSize: ArrayLike<number>, dataPosition: ArrayLike<number>) {\n  let outputValueOffset =\n      decodeValueOffset(data, baseOffset, chunkDataSize, blockSize, dataPosition, 1) + baseOffset;\n\n  return data[outputValueOffset];\n}\n\n/**\n * Reads the single value (of a single channel) at the specified dataPosition in a multi-channel\n * compressed segmentation.\n *\n * @param dataPosition A 4-element [x, y, z, channel] array specifying the position to read.\n */\nexport function readValue(\n\n    data: Uint32Array, baseOffset: number, chunkDataSize: ArrayLike<number>,\n    blockSize: ArrayLike<number>, dataPosition: ArrayLike<number>) {\n  return readSingleChannelValue(\n\n      data, baseOffset + data[dataPosition[3]], chunkDataSize, blockSize, dataPosition);\n}\n\n/**\n * Decodes a single channel of a compressed segmentation.\n *\n * This is not particularly efficient, because it is intended for testing purposes only.\n */\nexport function decodeChannel(\n    out: Uint32Array, data: Uint32Array, baseOffset: number, chunkDataSize: ArrayLike<number>,\n    blockSize: ArrayLike<number>) {\n  const expectedLength = chunkDataSize[0] * chunkDataSize[1] * chunkDataSize[2] * 1;\n  if (expectedLength !== out.length) {\n    throw new Error(\n        `Output length ${out.length} is not equal to expected length ${expectedLength}.`);\n  }\n  let vx = chunkDataSize[0];\n  let vy = chunkDataSize[1];\n  let vz = chunkDataSize[2];\n  let dataPosition = [0, 0, 0];\n  let outputOffset = 0;\n  for (let z = 0; z < vz; ++z) {\n    dataPosition[2] = z;\n    for (let y = 0; y < vy; ++y) {\n      dataPosition[1] = y;\n      for (let x = 0; x < vx; ++x) {\n        dataPosition[0] = x;\n        let outputValueOffset =\n            decodeValueOffset(data, baseOffset, chunkDataSize, blockSize, dataPosition, 1) +\n            baseOffset;\n        out[outputOffset++] = data[outputValueOffset];\n      }\n    }\n  }\n  return out;\n}\n\n/**\n * Decodes a multi-channel compressed segmentation.\n *\n * This is not particularly efficient, because it is intended for testing purposes only.\n */\nexport function decodeChannels(\n    out: Uint32Array, data: Uint32Array, baseOffset: number, chunkDataSize: ArrayLike<number>,\n    blockSize: ArrayLike<number>) {\n  const channelOutputLength = chunkDataSize[0] * chunkDataSize[1] * chunkDataSize[2] * 1;\n  const expectedLength = channelOutputLength * chunkDataSize[3];\n  if (expectedLength !== out.length) {\n    throw new Error(\n        `Output length ${out.length} is not equal to expected length ${expectedLength}.`);\n  }\n  const numChannels = chunkDataSize[3];\n  for (let channel = 0; channel < numChannels; ++channel) {\n    decodeChannel(\n        out.subarray(channelOutputLength * channel, channelOutputLength * (channel + 1)), data,\n        baseOffset + data[channel], chunkDataSize, blockSize);\n  }\n  return out;\n}\n","// DO NOT EDIT.  Generated from\n// templates/neuroglancer/sliceview/compressed_segmentation/decode.template.ts.\n/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file\n * Support for decompressing uint64 segment label chunks.\n */\n\nimport {decodeValueOffset} from 'neuroglancer/sliceview/compressed_segmentation/decode_common';\n\n\nimport {Uint64} from 'neuroglancer/util/uint64';\n\n\n/**\n * Reads the single value at the specified dataPosition in a single-channel compressed segmentation.\n *\n * @param baseOffset The base offset into `data' at which the compressed data for this channel\n * starts.\n * @param chunkDataSize A 3-element array specifying the size of the volume.\n * @param blockSize A 3-element array specifying the block size ued for compression.\n * @param dataPosition A 3-element array specifying the position within the volume from which to\n * read.\n *\n * Stores the result in `out'.\n */\nexport function readSingleChannelValue(\n\n    out: Uint64,\n\n    data: Uint32Array, baseOffset: number, chunkDataSize: ArrayLike<number>,\n    blockSize: ArrayLike<number>, dataPosition: ArrayLike<number>) {\n  let outputValueOffset =\n      decodeValueOffset(data, baseOffset, chunkDataSize, blockSize, dataPosition, 2) + baseOffset;\n\n  out.low = data[outputValueOffset];\n  out.high = data[outputValueOffset + 1];\n  return out;\n}\n\n/**\n * Reads the single value (of a single channel) at the specified dataPosition in a multi-channel\n * compressed segmentation.\n *\n * @param dataPosition A 4-element [x, y, z, channel] array specifying the position to read.\n */\nexport function readValue(\n\n    out: Uint64,\n\n    data: Uint32Array, baseOffset: number, chunkDataSize: ArrayLike<number>,\n    blockSize: ArrayLike<number>, dataPosition: ArrayLike<number>) {\n  return readSingleChannelValue(\n\n      out,\n\n      data, baseOffset + data[dataPosition[3]], chunkDataSize, blockSize, dataPosition);\n}\n\n/**\n * Decodes a single channel of a compressed segmentation.\n *\n * This is not particularly efficient, because it is intended for testing purposes only.\n */\nexport function decodeChannel(\n    out: Uint32Array, data: Uint32Array, baseOffset: number, chunkDataSize: ArrayLike<number>,\n    blockSize: ArrayLike<number>) {\n  const expectedLength = chunkDataSize[0] * chunkDataSize[1] * chunkDataSize[2] * 2;\n  if (expectedLength !== out.length) {\n    throw new Error(\n        `Output length ${out.length} is not equal to expected length ${expectedLength}.`);\n  }\n  let vx = chunkDataSize[0];\n  let vy = chunkDataSize[1];\n  let vz = chunkDataSize[2];\n  let dataPosition = [0, 0, 0];\n  let outputOffset = 0;\n  for (let z = 0; z < vz; ++z) {\n    dataPosition[2] = z;\n    for (let y = 0; y < vy; ++y) {\n      dataPosition[1] = y;\n      for (let x = 0; x < vx; ++x) {\n        dataPosition[0] = x;\n        let outputValueOffset =\n            decodeValueOffset(data, baseOffset, chunkDataSize, blockSize, dataPosition, 2) +\n            baseOffset;\n        out[outputOffset++] = data[outputValueOffset];\n\n        out[outputOffset++] = data[outputValueOffset + 1];\n      }\n    }\n  }\n  return out;\n}\n\n/**\n * Decodes a multi-channel compressed segmentation.\n *\n * This is not particularly efficient, because it is intended for testing purposes only.\n */\nexport function decodeChannels(\n    out: Uint32Array, data: Uint32Array, baseOffset: number, chunkDataSize: ArrayLike<number>,\n    blockSize: ArrayLike<number>) {\n  const channelOutputLength = chunkDataSize[0] * chunkDataSize[1] * chunkDataSize[2] * 2;\n  const expectedLength = channelOutputLength * chunkDataSize[3];\n  if (expectedLength !== out.length) {\n    throw new Error(\n        `Output length ${out.length} is not equal to expected length ${expectedLength}.`);\n  }\n  const numChannels = chunkDataSize[3];\n  for (let channel = 0; channel < numChannels; ++channel) {\n    decodeChannel(\n        out.subarray(channelOutputLength * channel, channelOutputLength * (channel + 1)), data,\n        baseOffset + data[channel], chunkDataSize, blockSize);\n  }\n  return out;\n}\n","/**\n * @license\n * Copyright 2018 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ChunkStateListener, WithParameters} from 'neuroglancer/chunk_manager/backend';\nimport {Chunk} from 'neuroglancer/chunk_manager/backend';\nimport {ChunkPriorityTier, ChunkState} from 'neuroglancer/chunk_manager/base';\nimport {ComputationParameters, getArrayView} from 'neuroglancer/datasource/computed/base';\nimport {ComputedVolumeChunkSourceParameters} from 'neuroglancer/datasource/computed/base';\nimport {decodeRawChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/raw';\nimport {decodeChannels as decodeChannels32} from 'neuroglancer/sliceview/compressed_segmentation/decode_uint32';\nimport {decodeChannels as decodeChannels64} from 'neuroglancer/sliceview/compressed_segmentation/decode_uint64';\nimport {VolumeChunk, VolumeChunkSource} from 'neuroglancer/sliceview/volume/backend';\nimport {TypedArray} from 'neuroglancer/util/array';\nimport {CANCELED, CancellationToken} from 'neuroglancer/util/cancellation';\nimport {DATA_TYPE_BYTES, DataType} from 'neuroglancer/util/data_type';\nimport {prod3 as prod, vec3} from 'neuroglancer/util/geom';\nimport {registerSharedObject, RPC, SharedObjectCounterpart} from 'neuroglancer/worker_rpc';\n\nexport abstract class VolumeComputationBackend extends SharedObjectCounterpart {\n  constructor(rpc: RPC, public params: ComputationParameters) {\n    super(rpc, params);\n  }\n\n  createOutputBuffer() {\n    const {outputSpec} = this.params;\n    return new ArrayBuffer(\n        prod(outputSpec.size) * outputSpec.numChannels * DATA_TYPE_BYTES[outputSpec.dataType]);\n  }\n\n  /**\n   * Performs a computation on the given buffer, returning the result via a\n   * Promise.\n   * @param inputBuffer the input buffer\n   * @param cancellationToken cancellation token\n   */\n  abstract compute(\n      inputBuffer: ArrayBuffer, cancellationToken: CancellationToken,\n      chunk: ComputedVolumeChunk): Promise<ArrayBuffer>;\n}\n\n/**\n * Computes the index relative to the origin of a larger 4d volume given the\n * index relative to a fully contained sub volume. In particular this allows\n * for iteration along a subregion of a volume using linear indices.\n * @param idx the linear index into a subregion\n * @param offset the subregion's offset relative to the overall volume\n * @param cropSize the subregion's size\n * @param size the overal volume's size\n */\nfunction subBoxIndex(idx: number, offset: vec3, cropSize: vec3, size: vec3) {\n  return idx % cropSize[0] + offset[0] +\n      (Math.floor(idx / cropSize[0]) % cropSize[1] + offset[1]) * size[0] +\n      (Math.floor(idx / (cropSize[0] * cropSize[1])) % cropSize[2] + offset[2]) * size[0] *\n      size[1] +\n      (Math.floor(idx / (cropSize[0] * cropSize[1] * cropSize[2]))) * size[0] * size[1] * size[2];\n}\n\n/**\n * Copies the overlapping region of the source array into the destination\n * array.\n * @param sourceCorner the corner (lower-bound) corresponding to the source\n *   array, in global coordinates.\n * @param sourceSize the source array's size\n * @param sourceView the source array\n * @param destCorner the corner corresponding to the destination array\n * @param destSize the destination array's size\n * @param destView the destination array\n * @param dataType the data type of both source and destintation arrays.\n */\nexport function copyBufferOverlap(\n    sourceCorner: vec3, sourceSize: vec3, sourceView: TypedArray, destCorner: vec3, destSize: vec3,\n    destView: TypedArray, dataType: DataType) {\n  // UINT64 data is packed two-at-a-time into a UINT32 array, so we handle it as a special case.\n  let copyFunction = dataType === DataType.UINT64 ? (j: number, k: number) => {\n    destView[2 * k] = sourceView[2 * j];\n    destView[2 * k + 1] = sourceView[2 * j + 1];\n  } : (j: number, k: number) => {\n    destView[k] = sourceView[j];\n  };\n\n  // Global Coordinates\n  const commonLower = vec3.max(vec3.create(), sourceCorner, destCorner);\n  const sourceUpper = vec3.add(vec3.create(), sourceCorner, sourceSize);\n  const destUpper = vec3.add(vec3.create(), destCorner, destSize);\n  const commonUpper = vec3.min(vec3.create(), sourceUpper, destUpper);\n  const commonSize = vec3.subtract(vec3.create(), commonUpper, commonLower);\n\n  const sourceLower = vec3.subtract(vec3.create(), commonLower, sourceCorner);\n  const destLower = vec3.subtract(vec3.create(), commonLower, destCorner);\n\n\n  for (let i = 0; i < prod(commonSize); ++i) {\n    const j = subBoxIndex(i, /*offset=*/sourceLower, /*cropSize=*/commonSize, /*size=*/sourceSize);\n    const k = subBoxIndex(i, /*offset=*/destLower, /*cropSize=*/commonSize, /*size=*/destSize);\n    copyFunction(j, k);\n  }\n}\n\n\n\n/**\n * Computes a consistent key string from a chunk grid position.\n *\n * It's tempting to use chunk.key, in particular because these values will\n * often be the same, but we won't always have access to a fully-specified\n * chunk, and there's no contractual guarantee that its key will be equal to\n * the value returned here.\n * @param gridPosition chunk grid position\n */\nfunction gridPositionKey(gridPosition: vec3) {\n  return gridPosition.toLocaleString();\n}\n\n// In addition to acting as a VolumeChunk for the purposes of a ChunkManager\n// object, also performs the book-keeping necessary to prepare the data buffer\n// used as input by the computation that provides its data. This includes\n// fetching chunk data from other datasources.\nexport class ComputedVolumeChunk extends VolumeChunk implements ChunkStateListener {\n  // Defines the input and output geometry and datatypes.\n  private computationParams_?: ComputationParameters;\n\n  // Inidicates a cancellation of this chunk's computation.\n  private cancellationToken_?: CancellationToken;\n\n  // Resolve and reject functions correspond to a Promise, returned by getPromise().\n  private resolve_?: () => void;\n  private reject_?: (reason: Error) => void;\n\n  // True iff this chunk is actively computing.\n  private computing_ = false;\n\n  // True iff this chunk has been initialized for computation.\n  private initialized_ = false;\n\n  // A map from grid position string keys, as returned by gridPositionKey to\n  // vec3 grid positions. This is used as an indirection to avoid storing\n  // explicit references to VolumeChunks belonging to the origin source.\n  private originGridPositions_ = new Map<String, vec3>();\n\n  // The lower bound of the input patch.\n  private inputLower_?: vec3;\n\n  // Represents the input patch.\n  private inputBuffer_?: ArrayBuffer;\n\n  // Indicate to the ChunkManager that this is a computational Chunk.\n  isComputational = true;\n\n  // Our source is a ComputedVolumeChunkSource.\n  source: ComputedVolumeChunkSource;\n\n  /**\n   * Sets up computation parameters, computes overlapping origin chunks and\n   * initializes the input buffer. Returns a Promise that will resolve when\n   * computation completes, or reject if computation fails or is cancelled.\n   * @param computationParams computation parameters\n   * @param cancellationToken cancellation token\n   */\n  initializeComputation(\n      computationParams: ComputationParameters, cancellationToken: CancellationToken) {\n    if (!this.source) {\n      throw new Error('initializeComputation must be called after source is valid.');\n    }\n    if (!this.chunkDataSize) {\n      throw new Error('initializeComputation must be called after computeChunkBounds.');\n    }\n    this.computationParams_ = computationParams;\n    this.cancellationToken_ = cancellationToken;\n    this.computing_ = false;\n    this.inputBuffer_ = undefined;\n\n    this.cancellationToken_.add(() => {\n      this.fail_(CANCELED);\n    });\n    // Compute the input bounding box for this manager\n    // These computations happen without regard for edge effects, which are\n    // handled post-computation by cropping to this VolumeChunk's geometry.\n    const {inputSpec, outputSpec} = this.computationParams_;\n    const twos = [2.0, 2.0, 2.0];\n    const outBoxLower = vec3.multiply(vec3.create(), this.chunkGridPosition, outputSpec.size);\n    const outputCenter =\n        vec3.add(vec3.create(), outBoxLower, vec3.divide(vec3.create(), outputSpec.size, twos));\n    const scaleFactor = this.source.parameters.scaleFactor;\n    const inputCenter = vec3.divide(vec3.create(), outputCenter, scaleFactor);\n    const inputSize = inputSpec.size;\n    this.inputLower_ =\n        vec3.subtract(vec3.create(), inputCenter, vec3.divide(vec3.create(), inputSize, twos));\n    this.inputBuffer_ = new ArrayBuffer(this.systemMemoryBytes);\n\n    this.setupSourceChunks_();\n    this.initialized_ = true;\n\n    return new Promise<void>((resolve, reject) => {\n      this.resolve_ = resolve;\n      this.reject_ = reject;\n    });\n  }\n\n  initializeVolumeChunk(key: string, chunkGridPosition: vec3) {\n    super.initializeVolumeChunk(key, chunkGridPosition);\n    const {inputSpec} = this.source.computation.params;\n    const inputSize = inputSpec.size;\n    const bufferLength = prod(inputSize) * inputSpec.numChannels;\n    const originDataType = inputSpec.dataType;\n\n    // Signal that we're about to take up memory. This value will be overwritten\n    // post-computation by a call to decodeRawChunk.\n    this.systemMemoryBytes = bufferLength * DATA_TYPE_BYTES[originDataType];\n  }\n\n  /**\n   * Listens to state changes on origin Chunks.\n   * @param chunk an origin Chunk.\n   */\n  stateChanged(chunk: Chunk) {\n    const volumeChunk = <VolumeChunk>chunk;\n    switch (volumeChunk.state) {\n      case ChunkState.SYSTEM_MEMORY_WORKER: {\n        this.copyOriginChunk_(volumeChunk);\n        break;\n      }\n      case ChunkState.FAILED:\n      case ChunkState.EXPIRED: {\n        this.fail_(new Error('Data source chunk has expired.'));\n        break;\n      }\n      case ChunkState.SYSTEM_MEMORY:\n      case ChunkState.GPU_MEMORY: {\n        // The data was moved to the frontend before we could intercept it, so\n        // request it to be sent back.\n        const gridKey = gridPositionKey(volumeChunk.chunkGridPosition);\n        const chunkSize = volumeChunk.chunkDataSize!;\n        const originSource = this.source.originSource;\n        const chunkCorner = vec3.multiply(\n            vec3.create(), volumeChunk.chunkGridPosition, originSource.spec.chunkDataSize);\n\n        this.source.requestChunkData(this, volumeChunk)\n            .then((data: TypedArray) => {\n              const originGridPosition = this.originGridPositions_.get(gridKey)!;\n              const originChunk = <VolumeChunk>originSource.getChunk(originGridPosition);\n              originChunk.unregisterListener(this);\n              this.originGridPositions_.delete(gridKey);\n\n              const inputSpec = this.computationParams_!.inputSpec;\n              const destination = getArrayView(this.inputBuffer_!, inputSpec.dataType);\n              const numChannels = originSource.spec.numChannels;\n              const rawSource = this.maybeDecodeBuffer_(\n                  data, inputSpec.dataType, originChunk.chunkDataSize!, numChannels);\n              copyBufferOverlap(\n                  chunkCorner, chunkSize, rawSource, this.inputLower_!, inputSpec.size, destination,\n                  inputSpec.dataType);\n              setTimeout(() => this.checkDone_(), 0);\n            })\n            .catch((error: Error) => {\n              console.log(this.key!, 'unable to retrieve frontend data for', volumeChunk.key!);\n              this.fail_(error);\n            });\n        break;\n      }\n    }\n  }\n\n  /**\n   * Returns a list of the grid positions corresponding to chunks on the origin\n   * source that this chunk overlaps.\n   */\n  getOverlappingOriginGridPositions() {\n    return this.originGridPositions_.values();\n  }\n\n  dispose() {\n    super.dispose();\n    this.cleanup_();\n  }\n\n  /**\n   * Unregisters listeners and so forth that were originally registered by this\n   * chunk.\n   */\n  private cleanup_() {\n    if (!this.initialized_ || !this.source) {\n      return;\n    }\n    for (const chunkGridPosition of this.originGridPositions_.values()) {\n      this.source.originSource.getChunk(chunkGridPosition).unregisterListener(this);\n      this.source.cancelChunkDataRequest(gridPositionKey(chunkGridPosition), this.key!);\n    }\n    this.originGridPositions_.clear();\n    this.source.unregisterChunk(this);\n  }\n\n  /**\n   * Handles failure conditions encountered while fetching data from the origin\n   * source.\n   * @param reason reason for failure\n   */\n  private fail_(reason: Error) {\n    this.cleanup_();\n    this.reject_!(reason);\n  }\n\n  /**\n   * Decompresses a compressed segmentation buffer, or simply passes it back if\n   * raw.\n   * @param buffer the possibly-compressed data buffer\n   * @param dataType the buffer's datatype\n   * @param size the buffer's size\n   * @param numChannels the number of channels in the buffer\n   */\n  private maybeDecodeBuffer_(\n      buffer: TypedArray, dataType: DataType, size: vec3, numChannels: number) {\n    const originSource = this.source.originSource;\n    if (!originSource.spec.compressedSegmentationBlockSize) {\n      return buffer;\n    }\n\n    const compressedBlockSize = originSource.spec.compressedSegmentationBlockSize!;\n    const size4 = [size[0], size[1], size[2], numChannels];\n\n    if (dataType === DataType.UINT32) {\n      const decoded = new Uint32Array(prod(size) * numChannels);\n      decodeChannels32(decoded, <Uint32Array>buffer, 0, size4, compressedBlockSize);\n      return decoded;\n    }\n\n    if (dataType === DataType.UINT64) {\n      const decoded = new Uint32Array(prod(size) * numChannels * 2);\n      decodeChannels64(decoded, <Uint32Array>buffer, 0, size4, compressedBlockSize);\n      return decoded;\n    }\n\n    throw new Error(`Compression is unsupported for datatypes other than UINT32 and UINT64`);\n  }\n\n  /**\n   * Copies an origin chunk's data into the appropriate location in the input\n   * buffer.\n   * @param originChunk origin Chunk\n   */\n  private copyOriginChunk_(originChunk: VolumeChunk) {\n    const inputSpec = this.computationParams_!.inputSpec;\n    const gridKey = gridPositionKey(originChunk.chunkGridPosition);\n    this.originGridPositions_.delete(gridKey);\n\n    const chunkSize = originChunk.chunkDataSize!;\n    const numChannels = inputSpec.numChannels;\n    const chunkCorner = vec3.multiply(\n        vec3.create(), originChunk.chunkGridPosition, this.source.originSource.spec.chunkDataSize);\n\n    let destination = getArrayView(this.inputBuffer_!, inputSpec.dataType);\n\n    const source = this.maybeDecodeBuffer_(\n        <TypedArray>(originChunk.data!), inputSpec.dataType, chunkSize, numChannels);\n\n    copyBufferOverlap(\n        chunkCorner, chunkSize, source, this.inputLower_!, inputSpec.size, destination,\n        inputSpec.dataType);\n    originChunk.unregisterListener(this);\n    setTimeout(() => this.checkDone_(), 0);\n  }\n\n  /**\n   * Peforms the computation over the input buffer, ensuring validity of the\n   * eventual output data that will be set for this chunk. This includes\n   * handling volume-boundary effects.\n   */\n  private performComputation_() {\n    if (this.cancellationToken_!.isCanceled) {\n      return Promise.reject(CANCELED);\n    }\n    const computation = this.source.computation;\n    const {outputSpec} = this.computationParams_!;\n    const outputSize = outputSpec.size;\n    const outputDataType = outputSpec.dataType;\n\n    // Most of the time, the chunk data size corresponds to the output buffer\n    // size, but a chunk at the upper bound of a volume will be clipped to the\n    // volume bounds. Computations are guaranteed the same buffer sizes each\n    // time, so we check for this situation and perform a crop-and-copy when\n    // necessary.\n    return computation.compute(this.inputBuffer_!, this.cancellationToken_!, this)\n        .then((outputBuffer) => {\n          this.inputBuffer_ = undefined;\n          if (vec3.equals(outputSize, this.chunkDataSize!)) {\n            return decodeRawChunk(this, this.cancellationToken_!, outputBuffer);\n          }\n          const outputBufferView = getArrayView(outputBuffer, outputDataType);\n          const chunkBuffer = new ArrayBuffer(\n              prod(this.chunkDataSize!) * outputSpec.numChannels * DATA_TYPE_BYTES[outputDataType]);\n          const chunkBufferView = getArrayView(chunkBuffer, outputDataType);\n          const outputCorner = vec3.multiply(vec3.create(), this.chunkGridPosition, outputSize);\n          copyBufferOverlap(\n              outputCorner, outputSize, outputBufferView, outputCorner, this.chunkDataSize!,\n              chunkBufferView, outputDataType);\n          return decodeRawChunk(this, this.cancellationToken_!, chunkBuffer);\n        });\n  }\n\n  /**\n   * Idempotently performs the computation, if the input buffer is ready. This\n   * function should be called after a timeout in most cases, because it may\n   * take a long time to return.\n   */\n  private checkDone_() {\n    if (this.computing_) {\n      return;\n    }\n    if (this.originGridPositions_.size === 0) {\n      this.computing_ = true;\n      this.cleanup_();\n      this.performComputation_()\n          .then(() => {\n            if (this.resolve_) {\n              this.resolve_();\n            }\n          })\n          .catch((error: Error) => {\n            this.reject_!(error);\n          });\n    }\n  }\n\n  /**\n   * Computes the chunkGridPosition for each valid origin chunk that the input\n   * field of this computational chunk overlaps, populating the origin grid\n   * positions map. Also registers this chunk as a listener on the state\n   * changes of the origin chunks.\n   */\n  private setupSourceChunks_() {\n    const originSource = this.source.originSource;\n    const originChunkSize = originSource.spec.chunkDataSize;\n    const inputSpec = this.computationParams_!.inputSpec;\n    const inputLower = this.inputLower_!;\n    const gridLower =\n        vec3.floor(vec3.create(), vec3.divide(vec3.create(), inputLower, originChunkSize));\n    const inputSizeMinusOne = vec3.subtract(vec3.create(), inputSpec.size, [1, 1, 1]);\n    const inBoxUpper = vec3.add(vec3.create(), inputLower, inputSizeMinusOne);\n    vec3.max(gridLower, gridLower, [0, 0, 0]);\n    vec3.min(inBoxUpper, inBoxUpper, originSource.spec.upperVoxelBound);\n    const gridUpper =\n        vec3.floor(vec3.create(), vec3.divide(vec3.create(), inBoxUpper, originChunkSize));\n\n    const gridPosition = vec3.create();\n    for (let z = gridLower[2]; z <= gridUpper[2]; ++z) {\n      for (let y = gridLower[1]; y <= gridUpper[1]; ++y) {\n        for (let x = gridLower[0]; x <= gridUpper[0]; ++x) {\n          gridPosition.set([x, y, z]);\n          const key = gridPositionKey(gridPosition);\n          this.originGridPositions_.set(key, vec3.copy(vec3.create(), gridPosition));\n        }\n      }\n    }\n\n    for (const chunkGridPosition of this.originGridPositions_.values()) {\n      const chunk = originSource.getChunk(chunkGridPosition);\n      chunk.registerListener(this);\n      this.stateChanged(chunk);\n    }\n  }\n}\n\n@registerSharedObject() export class ComputedVolumeChunkSource extends\n(WithParameters(VolumeChunkSource, ComputedVolumeChunkSourceParameters)) {\n  // The VolumeChunkSource representing the input data over which computations\n  // are performed.\n  originSource: VolumeChunkSource;\n\n  // Computations that are waiting for input data.\n  private pendingComputations_ = new Map<String, ComputedVolumeChunk>();\n\n  // Promise callbacks for pending data requests that were made to the\n  // front-end, which are necessary when source data has been previously\n  // downloaded and moved to the GPU. The top-level map is keyed by the origin\n  // chunk keys. The inner maps are keyed by the requestor.\n  private frontendRequestPromises_ = new Map<\n      String, Map<String, {resolve: (data: TypedArray) => void, reject: (error: Error) => void}>>();\n  public computation: VolumeComputationBackend;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.originSource = this.rpc!.getRef<VolumeChunkSource>(this.parameters.sourceRef);\n    this.computation = this.rpc!.getRef<VolumeComputationBackend>(this.parameters.computationRef);\n    this.registerDisposer(this.chunkManager);\n    this.registerDisposer(this.chunkManager.recomputeChunkPrioritiesLate.add(() => {\n      this.updateChunkPriorities();\n    }));\n  }\n\n  /**\n   * Requests that the relevant chunks on the origin source are downloaded, so\n   * their data may be available for computation.\n   */\n  updateChunkPriorities() {\n    for (const outputChunk of this.pendingComputations_.values()) {\n      if (outputChunk.priorityTier === ChunkPriorityTier.RECENT) {\n        continue;\n      }\n      for (const gridPosition of outputChunk.getOverlappingOriginGridPositions()) {\n        const sourceChunk = this.originSource.getChunk(gridPosition);\n        this.chunkManager.requestChunk(\n            sourceChunk, outputChunk.priorityTier, outputChunk.priority, false);\n      }\n    }\n  }\n\n  /**\n   * Unregisters a ComputedVolumeChunk from the list of pending computations.\n   * @param chunk the computed volume chunk to unregister\n   */\n  unregisterChunk(chunk: ComputedVolumeChunk) {\n    const key = chunk.key!;\n    this.pendingComputations_.delete(key);\n  }\n\n  /**\n   * Requests chunk data that has already been moved to the frontend.\n   * @param computedChunk the chunk to which data will be provided\n   * @param dataChunk the chunk representing the source data.\n   */\n  requestChunkData(computedChunk: ComputedVolumeChunk, dataChunk: VolumeChunk) {\n    return new Promise((resolve, reject) => {\n      const originGridKey = gridPositionKey(dataChunk.chunkGridPosition);\n      const computedChunkKey = computedChunk.key!;\n      if (this.frontendRequestPromises_.has(originGridKey)) {\n        this.frontendRequestPromises_.get(originGridKey)!.set(computedChunkKey, {resolve, reject});\n        return;\n      }\n      this.frontendRequestPromises_.set(\n          originGridKey, new Map([[computedChunkKey, {resolve, reject}]]));\n\n      this.chunkManager.queueManager.retrieveChunkData(dataChunk)\n          .then((data) => {\n            const promiseMap = this.frontendRequestPromises_.get(originGridKey);\n            if (!promiseMap) {\n              // The chunk or chunks requesting this data chunk were cancelled.\n              return;\n            }\n            for (const promisePair of promiseMap.values()) {\n              promisePair.resolve(data);\n            }\n            this.frontendRequestPromises_.delete(originGridKey);\n          })\n          .catch((error) => {\n            const promiseMap = this.frontendRequestPromises_.get(originGridKey);\n            if (!promiseMap) {\n              return;\n            }\n            for (const promisePair of promiseMap.values()) {\n              promisePair.reject(error);\n            }\n            this.frontendRequestPromises_.delete(originGridKey);\n          });\n    });\n  }\n\n  /**\n   * Cancels an outstanding chunk data request.\n   * @param originGridKey the key corresponding to the requested chunk\n   * @param requestKey the key corresponding to the requestor\n   */\n  cancelChunkDataRequest(originGridKey: string, requestKey: string) {\n    if (this.frontendRequestPromises_.has(originGridKey)) {\n      const map = this.frontendRequestPromises_.get(originGridKey)!;\n      map.delete(requestKey);\n      if (map.size === 0) {\n        this.frontendRequestPromises_.delete(originGridKey);\n      }\n    }\n  }\n\n  download(chunk: VolumeChunk, cancellationToken: CancellationToken) {\n    const outputChunk = <ComputedVolumeChunk>chunk;\n    this.computeChunkBounds(outputChunk);\n    this.pendingComputations_.set(chunk.key!, outputChunk);\n    const promise = outputChunk.initializeComputation(this.computation.params, cancellationToken);\n    this.chunkManager.scheduleUpdateChunkPriorities();\n    return promise;\n  }\n}\nComputedVolumeChunkSource.prototype.chunkConstructor = ComputedVolumeChunk;\n","/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {asyncComputation} from 'neuroglancer/async_computation';\n\nexport const encodeCompressedSegmentationUint32 = asyncComputation<\n    (rawData: Uint32Array, shape: ArrayLike<number>, blockSize: ArrayLike<number>) => Uint32Array>(\n    'encodeCompressedSegmentationUint32');\n\nexport const encodeCompressedSegmentationUint64 = asyncComputation<\n    (rawData: Uint32Array, shape: ArrayLike<number>, blockSize: ArrayLike<number>) => Uint32Array>(\n    'encodeCompressedSegmentationUint64');\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Converts raw data volumes to the appropriate format required by the frontend.\n */\n\nimport {encodeCompressedSegmentationUint32, encodeCompressedSegmentationUint64} from 'neuroglancer/async_computation/encode_compressed_segmentation_request';\nimport {requestAsyncComputation} from 'neuroglancer/async_computation/request';\nimport {DataType} from 'neuroglancer/sliceview/base';\nimport {VolumeChunk} from 'neuroglancer/sliceview/volume/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\n\nexport async function postProcessRawData(\n    chunk: VolumeChunk, cancellationToken: CancellationToken, data: ArrayBufferView) {\n  cancellationToken;\n  const {spec} = chunk.source!;\n  if (spec.compressedSegmentationBlockSize !== undefined) {\n    const {dataType} = spec;\n    const chunkDataSize = chunk.chunkDataSize!;\n    const shape = [chunkDataSize[0], chunkDataSize[1], chunkDataSize[2], spec.numChannels];\n    switch (dataType) {\n      case DataType.UINT32:\n        chunk.data = await requestAsyncComputation(\n            encodeCompressedSegmentationUint32, cancellationToken, [data.buffer],\n            data as Uint32Array, shape, spec.compressedSegmentationBlockSize);\n        break;\n      case DataType.UINT64:\n        chunk.data = await requestAsyncComputation(\n            encodeCompressedSegmentationUint64, cancellationToken, [data.buffer],\n            data as Uint32Array, shape, spec.compressedSegmentationBlockSize);\n        break;\n      default:\n        throw new Error(`Unsupported data type for compressed segmentation: ${DataType[dataType]}`);\n    }\n  } else {\n    chunk.data = data;\n  }\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst k1 = 0xcc9e2d51;\nconst k2 = 0x1b873593;\n\n// MurmurHash excluding the final mixing steps.\nexport function hashCombine(state: number, value: number) {\n  value >>>= 0;\n  state >>>= 0;\n\n  value = Math.imul(value, k1) >>> 0;\n  value = ((value << 15) | (value >>> 17)) >>> 0;\n  value = Math.imul(value, k2) >>> 0;\n  state = (state ^ value) >>> 0;\n  state = ((state << 13) | (state >>> 19)) >>> 0;\n  state = ((state * 5) + 0xe6546b64) >>> 0;\n  return state;\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Uint64} from 'neuroglancer/util/uint64';\n\nconst rankSymbol = Symbol('disjoint_sets:rank');\nconst parentSymbol = Symbol('disjoint_sets:parent');\nconst nextSymbol = Symbol('disjoint_sets:next');\nconst prevSymbol = Symbol('disjoint_sets:prev');\n\nfunction findRepresentative(v: any): any {\n  // First pass: find the root, which will be stored in ancestor.\n  let old = v;\n  let ancestor = v[parentSymbol];\n  while (ancestor !== v) {\n    v = ancestor;\n    ancestor = v[parentSymbol];\n  }\n  // Second pass: set all of the parent pointers along the path from the\n  // original element `old' to refer directly to the root `ancestor'.\n  v = old[parentSymbol];\n  while (ancestor !== v) {\n    old[parentSymbol] = ancestor;\n    old = v;\n    v = old[parentSymbol];\n  }\n  return ancestor;\n}\n\nfunction linkUnequalSetRepresentatives(i: any, j: any): any {\n  let iRank = i[rankSymbol];\n  let jRank = j[rankSymbol];\n  if (iRank > jRank) {\n    j[parentSymbol] = i;\n    return i;\n  }\n\n  i[parentSymbol] = j;\n  if (iRank === jRank) {\n    j[rankSymbol] = jRank + 1;\n  }\n  return j;\n}\n\nfunction spliceCircularLists(i: any, j: any) {\n  let iPrev = i[prevSymbol];\n  let jPrev = j[prevSymbol];\n\n  // Connect end of i to beginning of j.\n  j[prevSymbol] = iPrev;\n  iPrev[nextSymbol] = j;\n\n  // Connect end of j to beginning of i.\n  i[prevSymbol] = jPrev;\n  jPrev[nextSymbol] = i;\n}\n\n\n\nfunction* setElementIterator(i: any) {\n  let j = i;\n  do {\n    yield j;\n    j = j[nextSymbol];\n  } while (j !== i);\n}\n\nfunction initializeElement(v: any) {\n  v[parentSymbol] = v;\n  v[rankSymbol] = 0;\n  v[nextSymbol] = v[prevSymbol] = v;\n}\n\nconst minSymbol = Symbol('disjoint_sets:min');\n\nfunction isRootElement(v: any) {\n  return v[parentSymbol] === v;\n}\n\n/**\n * Represents a collection of disjoint sets of Uint64 values.\n *\n * Supports merging sets, retrieving the minimum Uint64 value contained in a set (the representative\n * value), and iterating over the elements contained in a set.\n */\nexport class DisjointUint64Sets {\n  private map = new Map<string, Uint64>();\n  generation = 0;\n\n  get(x: Uint64): Uint64 {\n    let key = x.toString();\n    let element = this.map.get(key);\n    if (element === undefined) {\n      return x;\n    }\n    return findRepresentative(element)[minSymbol];\n  }\n\n  isMinElement(x: Uint64) {\n    let y = this.get(x);\n    return (y === x || Uint64.equal(y, x));\n  }\n\n  private makeSet(x: Uint64): Uint64 {\n    let key = x.toString();\n    let {map} = this;\n    let element = map.get(key);\n    if (element === undefined) {\n      element = x.clone();\n      initializeElement(element);\n      (<any>element)[minSymbol] = element;\n      map.set(key, element);\n      return element;\n    }\n    return findRepresentative(element);\n  }\n\n  link(a: Uint64, b: Uint64): boolean {\n    a = this.makeSet(a);\n    b = this.makeSet(b);\n    if (a === b) {\n      return false;\n    }\n    this.generation++;\n    let newNode = linkUnequalSetRepresentatives(a, b);\n    spliceCircularLists(a, b);\n    let aMin = (<any>a)[minSymbol];\n    let bMin = (<any>b)[minSymbol];\n    newNode[minSymbol] = Uint64.less(aMin, bMin) ? aMin : bMin;\n    return true;\n  }\n\n  * setElements(a: Uint64): IterableIterator<Uint64> {\n    let key = a.toString();\n    let element = this.map.get(key);\n    if (element === undefined) {\n      yield a;\n    } else {\n      yield* setElementIterator(element);\n    }\n  }\n\n  clear() {\n    let {map} = this;\n    if (map.size === 0) {\n      return false;\n    }\n    ++this.generation;\n    map.clear();\n    return true;\n  }\n\n  get size() {\n    return this.map.size;\n  }\n\n  * mappings(temp = <[Uint64, Uint64]>new Array<Uint64>(2)) {\n    for (let element of this.map.values()) {\n      temp[0] = element;\n      temp[1] = findRepresentative(element)[minSymbol];\n      yield temp;\n    }\n  }\n\n  [Symbol.iterator]() {\n    return this.mappings();\n  }\n\n  /**\n   * Returns an array of arrays of strings, where the arrays contained in the outer array correspond\n   * to the disjoint sets, and the strings are the base-10 string representations of the members of\n   * each set.  The members are sorted in numerical order, and the sets are sorted in numerical\n   * order of their smallest elements.\n   */\n  toJSON(): string[][] {\n    let sets = new Array<Uint64[]>();\n    for (let element of this.map.values()) {\n      if (isRootElement(element)) {\n        let members = new Array<Uint64>();\n        for (let member of setElementIterator(element)) {\n          members.push(member);\n        }\n        members.sort(Uint64.compare);\n        sets.push(members);\n      }\n    }\n    sets.sort((a, b) => Uint64.compare(a[0], b[0]));\n    return sets.map(set => set.map(element => element.toString()));\n  }\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DisjointUint64Sets} from 'neuroglancer/util/disjoint_sets';\nimport {parseArray} from 'neuroglancer/util/json';\nimport {NullarySignal} from 'neuroglancer/util/signal';\nimport {Uint64} from 'neuroglancer/util/uint64';\nimport {registerRPC, registerSharedObject, RPC, SharedObjectCounterpart} from 'neuroglancer/worker_rpc';\n\nconst RPC_TYPE_ID = 'DisjointUint64Sets';\nconst ADD_METHOD_ID = 'DisjointUint64Sets.add';\nconst CLEAR_METHOD_ID = 'DisjointUint64Sets.clear';\n\n@registerSharedObject(RPC_TYPE_ID)\nexport class SharedDisjointUint64Sets extends SharedObjectCounterpart {\n  disjointSets = new DisjointUint64Sets();\n  changed = new NullarySignal();\n\n  static makeWithCounterpart(rpc: RPC) {\n    let obj = new this();\n    obj.initializeCounterpart(rpc);\n    return obj;\n  }\n\n  disposed() {\n    this.disjointSets = <any>undefined;\n    this.changed = <any>undefined;\n    super.disposed();\n  }\n\n  link(a: Uint64, b: Uint64) {\n    if (this.disjointSets.link(a, b)) {\n      let {rpc} = this;\n      if (rpc) {\n        rpc.invoke(\n            ADD_METHOD_ID,\n            {'id': this.rpcId, 'al': a.low, 'ah': a.high, 'bl': b.low, 'bh': b.high});\n      }\n      this.changed.dispatch();\n    }\n  }\n\n  get(x: Uint64): Uint64 {\n    return this.disjointSets.get(x);\n  }\n\n  clear() {\n    if (this.disjointSets.clear()) {\n      let {rpc} = this;\n      if (rpc) {\n        rpc.invoke(CLEAR_METHOD_ID, {'id': this.rpcId});\n      }\n      this.changed.dispatch();\n    }\n  }\n\n  setElements(a: Uint64) {\n    return this.disjointSets.setElements(a);\n  }\n\n  get size() {\n    return this.disjointSets.size;\n  }\n\n  toJSON() {\n    return this.disjointSets.toJSON();\n  }\n\n  /**\n   * Restores the state from a JSON representation.\n   */\n  restoreState(obj: any) {\n    this.clear();\n    if (obj !== undefined) {\n      let ids = [new Uint64(), new Uint64()];\n      parseArray(obj, z => {\n        parseArray(z, (s, index) => {\n          ids[index % 2].parseString(String(s), 10);\n          if (index !== 0) {\n            this.link(ids[0], ids[1]);\n          }\n        });\n      });\n    }\n  }\n}\n\nconst tempA = new Uint64();\nconst tempB = new Uint64();\n\nregisterRPC(ADD_METHOD_ID, function(x) {\n  let obj = <SharedDisjointUint64Sets>this.get(x['id']);\n  tempA.low = x['al'];\n  tempA.high = x['ah'];\n  tempB.low = x['bl'];\n  tempB.high = x['bh'];\n  if (obj.disjointSets.link(tempA, tempB)) {\n    obj.changed.dispatch();\n  }\n});\n\nregisterRPC(CLEAR_METHOD_ID, function(x) {\n  let obj = <SharedDisjointUint64Sets>this.get(x['id']);\n  if (obj.disjointSets.clear()) {\n    obj.changed.dispatch();\n  }\n});\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {hashCombine} from 'neuroglancer/gpu_hash/hash_function';\nimport {getRandomValues} from 'neuroglancer/util/random';\nimport {Uint64} from 'neuroglancer/util/uint64';\n\nexport const NUM_ALTERNATIVES = 3;\n\nconst DEFAULT_LOAD_FACTOR = 0.9;\n\nconst DEBUG = false;\n\n// Key that needs to be inserted.  Temporary variables used during insert.  These can safely be\n// global because control never leaves functions defined in this module while these are in use.\nlet pendingLow = 0, pendingHigh = 0, backupPendingLow = 0, backupPendingHigh = 0;\n\nexport abstract class HashTableBase {\n  loadFactor = DEFAULT_LOAD_FACTOR;\n  size = 0;\n  table: Uint32Array;\n  tableSize: number;\n  emptyLow = 4294967295;\n  emptyHigh = 4294967295;\n  maxRehashAttempts = 5;\n  maxAttempts = 5;\n  capacity: number;\n\n  /**\n   * Number of uint32 elements per entry in hash table.\n   */\n  entryStride: number;\n\n  generation = 0;\n\n  mungedEmptyKey = -1;\n\n  constructor(public hashSeeds = HashTableBase.generateHashSeeds(NUM_ALTERNATIVES)) {\n    // Minimum size must be greater than 2 * hashSeeds.length.  Otherwise, tableWithMungedEmptyKey\n    // may loop infinitely.\n    let initialSize = 8;\n    while (initialSize < 2 * hashSeeds.length) {\n      initialSize *= 2;\n    }\n    this.allocate(initialSize);\n  }\n\n  private updateHashFunctions(numHashes: number) {\n    this.hashSeeds = HashTableBase.generateHashSeeds(numHashes);\n    this.mungedEmptyKey = -1;\n  }\n\n  /**\n   * Invokes callback with a modified version of the hash table data array.\n   *\n   * Replaces all slots that appear to be valid entries for (emptyLow, emptyHigh), i.e. slots that\n   * contain (emptyLow, emptyHigh) and to which (emptyLow, emptyHigh) hashes, with (mungedEmptyKey,\n   * mungedEmptyKey).\n   *\n   * mungedEmptyKey is chosen to be a 32-bit value with the property that the 64-bit value\n   * (mungedEmptyKey, mungedEmptyKey) does not hash to any of the same slots as (emptyLow,\n   * emptyHigh).\n   *\n   * This allows the modified data array to be used for lookups without special casing the empty\n   * key.\n   */\n  tableWithMungedEmptyKey(callback: (table: Uint32Array) => void) {\n    const numHashes = this.hashSeeds.length;\n    const emptySlots = new Array<number>(numHashes);\n    for (let i = 0; i < numHashes; ++i) {\n      emptySlots[i] = this.getHash(i, this.emptyLow, this.emptyHigh);\n    }\n    let {mungedEmptyKey} = this;\n    if (mungedEmptyKey === -1) {\n      chooseMungedEmptyKey: while (true) {\n        mungedEmptyKey = (Math.random() * 0x1000000) >>> 0;\n        for (let i = 0; i < numHashes; ++i) {\n          let h = this.getHash(i, mungedEmptyKey, mungedEmptyKey);\n          for (let j = 0; j < numHashes; ++j) {\n            if (emptySlots[j] === h) {\n              continue chooseMungedEmptyKey;\n            }\n          }\n        }\n        this.mungedEmptyKey = mungedEmptyKey;\n        break;\n      }\n    }\n    let {table, emptyLow, emptyHigh} = this;\n    for (let i = 0; i < numHashes; ++i) {\n      let h = emptySlots[i];\n      if (table[h] === emptyLow && table[h + 1] === emptyHigh) {\n        table[h] = mungedEmptyKey;\n        table[h + 1] = mungedEmptyKey;\n      }\n    }\n    try {\n      callback(table);\n    } finally {\n      for (let i = 0; i < numHashes; ++i) {\n        let h = emptySlots[i];\n        if (table[h] === mungedEmptyKey && table[h + 1] === mungedEmptyKey) {\n          table[h] = emptyLow;\n          table[h + 1] = emptyHigh;\n        }\n      }\n    }\n  }\n\n  static generateHashSeeds(numAlternatives = NUM_ALTERNATIVES) {\n    return getRandomValues(new Uint32Array(numAlternatives));\n  }\n\n  getHash(hashIndex: number, low: number, high: number) {\n    let hash = this.hashSeeds[hashIndex];\n    hash = hashCombine(hash, low);\n    hash = hashCombine(hash, high);\n    return this.entryStride * (hash & (this.tableSize - 1));\n  }\n\n  /**\n   * Iterates over the Uint64 keys contained in the hash set.\n   *\n   * The same temp value will be modified and yielded at every iteration.\n   */\n  * keys(temp = new Uint64()) {\n    let {emptyLow, emptyHigh, entryStride} = this;\n    let {table} = this;\n    for (let i = 0, length = table.length; i < length; i += entryStride) {\n      let low = table[i], high = table[i + 1];\n      if (low !== emptyLow || high !== emptyHigh) {\n        temp.low = low;\n        temp.high = high;\n        yield temp;\n      }\n    }\n  }\n\n  indexOfPair(low: number, high: number) {\n    let {table, emptyLow, emptyHigh} = this;\n    if (low === emptyLow && high === emptyHigh) {\n      return -1;\n    }\n    for (let i = 0, numHashes = this.hashSeeds.length; i < numHashes; ++i) {\n      let h = this.getHash(i, low, high);\n      if (table[h] === low && table[h + 1] === high) {\n        return h;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Returns the offset into the hash table of the specified element, or -1 if the element is not\n   * present.\n   */\n  indexOf(x: Uint64) {\n    return this.indexOfPair(x.low, x.high);\n  }\n\n  /**\n   * Changes the empty key to a value that is not equal to the current empty key and is not present\n   * in the table.\n   *\n   * This is called when an attempt is made to insert the empty key.\n   */\n  private chooseAnotherEmptyKey() {\n    let {emptyLow, emptyHigh, table, entryStride} = this;\n    let newLow: number, newHigh: number;\n    while (true) {\n      newLow = (Math.random() * 0x100000000) >>> 0;\n      newHigh = (Math.random() * 0x100000000) >>> 0;\n      if (newLow === emptyLow && newHigh === emptyHigh) {\n        continue;\n      }\n      if (this.hasPair(newLow, newHigh)) {\n        continue;\n      }\n      break;\n    }\n\n    this.emptyLow = newLow;\n    this.emptyHigh = newHigh;\n\n    // Replace empty keys in the table.\n    for (let h = 0, length = table.length; h < length; h += entryStride) {\n      if (table[h] === emptyLow && table[h + 1] === emptyHigh) {\n        table[h] = newLow;\n        table[h + 1] = newHigh;\n      }\n    }\n  }\n\n  /**\n   * Returns true iff the specified element is present.\n   */\n  has(x: Uint64) {\n    return this.indexOf(x) !== -1;\n  }\n\n  /**\n   * Returns true iff the specified element is present.\n   */\n  hasPair(low: number, high: number) {\n    return this.indexOfPair(low, high) !== -1;\n  }\n\n  delete(x: Uint64) {\n    let index = this.indexOf(x);\n    if (index !== -1) {\n      let {table} = this;\n      table[index] = this.emptyLow;\n      table[index + 1] = this.emptyHigh;\n      ++this.generation;\n      this.size--;\n      return true;\n    }\n    return false;\n  }\n\n  private clearTable() {\n    let {table, entryStride, emptyLow, emptyHigh} = this;\n    let length = table.length;\n\n    for (let h = 0; h < length; h += entryStride) {\n      table[h] = emptyLow;\n      table[h + 1] = emptyHigh;\n    }\n  }\n\n  clear() {\n    if (this.size === 0) {\n      return false;\n    }\n    this.size = 0;\n    ++this.generation;\n    this.clearTable();\n    return true;\n  }\n\n  protected swapPending(table: Uint32Array, offset: number) {\n    let tempLow = pendingLow, tempHigh = pendingHigh;\n    this.storePending(table, offset);\n    table[offset] = tempLow;\n    table[offset + 1] = tempHigh;\n  }\n\n  protected storePending(table: Uint32Array, offset: number) {\n    pendingLow = table[offset];\n    pendingHigh = table[offset + 1];\n  }\n\n  protected backupPending() {\n    backupPendingLow = pendingLow;\n    backupPendingHigh = pendingHigh;\n  }\n\n  protected restorePending() {\n    pendingLow = backupPendingLow;\n    pendingHigh = backupPendingHigh;\n  }\n\n  private tryToInsert() {\n    if (DEBUG) {\n      console.log(`tryToInsert: ${pendingLow}, ${pendingHigh}`);\n    }\n    let attempt = 0;\n    let {emptyLow, emptyHigh, maxAttempts, table} = this;\n    let numHashes = this.hashSeeds.length;\n\n    let tableIndex = Math.floor(Math.random() * numHashes);\n    while (true) {\n      let h = this.getHash(tableIndex, pendingLow, pendingHigh);\n      this.swapPending(table, h);\n      if (pendingLow === emptyLow && pendingHigh === emptyHigh) {\n        return true;\n      }\n      if (++attempt === maxAttempts) {\n        break;\n      }\n      tableIndex = (tableIndex + Math.floor(Math.random() * (numHashes - 1)) + 1) % numHashes;\n    }\n    return false;\n  }\n\n  private allocate(tableSize: number) {\n    this.tableSize = tableSize;\n    let {entryStride} = this;\n    this.table = new Uint32Array(tableSize * entryStride);\n    this.maxAttempts = tableSize;\n    this.clearTable();\n    this.capacity = tableSize * this.loadFactor;\n    this.mungedEmptyKey = -1;\n  }\n\n  private rehash(oldTable: Uint32Array, tableSize: number) {\n    if (DEBUG) {\n      console.log('rehash begin');\n    }\n    this.allocate(tableSize);\n    this.updateHashFunctions(this.hashSeeds.length);\n    let {emptyLow, emptyHigh, entryStride} = this;\n    for (let h = 0, length = oldTable.length; h < length; h += entryStride) {\n      let low = oldTable[h], high = oldTable[h + 1];\n      if (low !== emptyLow || high !== emptyHigh) {\n        this.storePending(oldTable, h);\n        if (!this.tryToInsert()) {\n          if (DEBUG) {\n            console.log('rehash failed');\n          }\n          return false;\n        }\n      }\n    }\n    if (DEBUG) {\n      console.log('rehash end');\n    }\n    return true;\n  }\n\n  private grow(desiredTableSize: number) {\n    if (DEBUG) {\n      console.log(`grow: ${desiredTableSize}`);\n    }\n    let oldTable = this.table;\n    let {tableSize} = this;\n    while (tableSize < desiredTableSize) {\n      tableSize *= 2;\n    }\n    while (true) {\n      for (let rehashAttempt = 0; rehashAttempt < this.maxRehashAttempts; ++rehashAttempt) {\n        if (this.rehash(oldTable, tableSize)) {\n          if (DEBUG) {\n            console.log(`grow end`);\n          }\n          return;\n        }\n      }\n      tableSize *= 2;\n    }\n  }\n\n  protected insertInternal() {\n    ++this.generation;\n\n    if (pendingLow === this.emptyLow && pendingHigh === this.emptyHigh) {\n      this.chooseAnotherEmptyKey();\n    }\n\n    if (++this.size > this.capacity) {\n      this.backupPending();\n      this.grow(this.tableSize * 2);\n      this.restorePending();\n    }\n\n    while (!this.tryToInsert()) {\n      this.backupPending();\n      this.grow(this.tableSize);\n      this.restorePending();\n    }\n  }\n}\n\nexport class HashSetUint64 extends HashTableBase {\n  add(x: Uint64) {\n    let {low, high} = x;\n    if (this.hasPair(low, high)) {\n      return false;\n    }\n    if (DEBUG) {\n      console.log(`add: ${low},${high}`);\n    }\n    pendingLow = low;\n    pendingHigh = high;\n    this.insertInternal();\n    return true;\n  }\n\n  /**\n   * Iterates over the keys.  The same temporary value will be modified and yielded at every\n   * iteration.\n   */\n  [Symbol.iterator]() {\n    return this.keys();\n  }\n}\nHashSetUint64.prototype.entryStride = 2;\n\n// Value that needs to be inserted.  Temporary variables used during insert.  These can safely be\n// global because control never leaves functions defined in this module while these are in use.\nlet pendingValueLow = 0, pendingValueHigh = 0, backupPendingValueLow = 0,\n    backupPendingValueHigh = 0;\n\nexport class HashMapUint64 extends HashTableBase {\n  set(key: Uint64, value: Uint64) {\n    let {low, high} = key;\n    if (this.hasPair(low, high)) {\n      return false;\n    }\n    if (DEBUG) {\n      console.log(`add: ${low},${high} -> ${value.low},${value.high}`);\n    }\n    pendingLow = low;\n    pendingHigh = high;\n    pendingValueLow = value.low;\n    pendingValueHigh = value.high;\n    this.insertInternal();\n    return true;\n  }\n\n  get(key: Uint64, value: Uint64): boolean {\n    let h = this.indexOf(key);\n    if (h === -1) {\n      return false;\n    }\n    let {table} = this;\n    value.low = table[h + 2];\n    value.high = table[h + 3];\n    return true;\n  }\n\n  protected swapPending(table: Uint32Array, offset: number) {\n    let tempLow = pendingValueLow, tempHigh = pendingValueHigh;\n    super.swapPending(table, offset);\n    table[offset + 2] = tempLow;\n    table[offset + 3] = tempHigh;\n  }\n\n  protected storePending(table: Uint32Array, offset: number) {\n    super.storePending(table, offset);\n    pendingValueLow = table[offset + 2];\n    pendingValueHigh = table[offset + 3];\n  }\n\n  protected backupPending() {\n    super.backupPending();\n    backupPendingValueLow = pendingValueLow;\n    backupPendingValueHigh = pendingValueHigh;\n  }\n\n  protected restorePending() {\n    super.restorePending();\n    pendingValueLow = backupPendingValueLow;\n    pendingValueHigh = backupPendingValueHigh;\n  }\n\n  /**\n   * Iterates over entries.  The same temporary value will be modified and yielded at every\n   * iteration.\n   */\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n\n  /**\n   * Iterates over entries.  The same temporary value will be modified and yielded at every\n   * iteration.\n   */\n  * entries(temp: [Uint64, Uint64] = [new Uint64(), new Uint64()]) {\n    let {emptyLow, emptyHigh, entryStride} = this;\n    let {table} = this;\n    let [key, value] = temp;\n    for (let i = 0, length = table.length; i < length; i += entryStride) {\n      let low = table[i], high = table[i + 1];\n      if (low !== emptyLow || high !== emptyHigh) {\n        key.low = low;\n        key.high = high;\n        value.low = table[i + 2];\n        value.high = table[i + 3];\n        yield temp;\n      }\n    }\n  }\n}\nHashMapUint64.prototype.entryStride = 4;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {HashSetUint64} from 'neuroglancer/gpu_hash/hash_table';\nimport {Signal} from 'neuroglancer/util/signal';\nimport {Uint64} from 'neuroglancer/util/uint64';\nimport {registerRPC, registerSharedObject, RPC, SharedObjectCounterpart} from 'neuroglancer/worker_rpc';\n\n@registerSharedObject('Uint64Set')\nexport class Uint64Set extends SharedObjectCounterpart {\n  hashTable = new HashSetUint64();\n  changed = new Signal<(x: Uint64 | null, add: boolean) => void>();\n\n  static makeWithCounterpart(rpc: RPC) {\n    let obj = new Uint64Set();\n    obj.initializeCounterpart(rpc);\n    return obj;\n  }\n\n  disposed() {\n    super.disposed();\n    this.hashTable = <any>undefined;\n    this.changed = <any>undefined;\n  }\n\n  add_(x: Uint64) {\n    return this.hashTable.add(x);\n  }\n\n  add(x: Uint64) {\n    if (this.add_(x)) {\n      let {rpc} = this;\n      if (rpc) {\n        rpc.invoke('Uint64Set.add', {'id': this.rpcId, 'value': x});\n      }\n      this.changed.dispatch(x, true);\n    }\n  }\n\n  has(x: Uint64) {\n    return this.hashTable.has(x);\n  }\n\n  [Symbol.iterator]() {\n    return this.hashTable.keys();\n  }\n\n  delete_(x: Uint64) {\n    return this.hashTable.delete(x);\n  }\n\n  delete(x: Uint64) {\n    if (this.delete_(x)) {\n      let {rpc} = this;\n      if (rpc) {\n        rpc.invoke('Uint64Set.delete', {'id': this.rpcId, 'value': x});\n      }\n      this.changed.dispatch(x, false);\n    }\n  }\n\n  get size() {\n    return this.hashTable.size;\n  }\n\n  clear() {\n    if (this.hashTable.clear()) {\n      let {rpc} = this;\n      if (rpc) {\n        rpc.invoke('Uint64Set.clear', {'id': this.rpcId});\n      }\n      this.changed.dispatch(null, false);\n    }\n  }\n\n  toJSON() {\n    let result = new Array<string>();\n    for (let id of this) {\n      result.push(id.toString());\n    }\n    // Need to sort entries, otherwise serialization changes every time.\n    result.sort();\n    return result;\n  }\n}\n\nregisterRPC('Uint64Set.add', function(x) {\n  let obj = this.get(x['id']);\n  if (obj.add_(x['value'])) {\n    obj.changed.dispatch();\n  }\n});\n\nregisterRPC('Uint64Set.delete', function(x) {\n  let obj = this.get(x['id']);\n  if (obj.delete_(x['value'])) {\n    obj.changed.dispatch();\n  }\n});\n\nregisterRPC('Uint64Set.clear', function(x) {\n  let obj = this.get(x['id']);\n  if (obj.hashTable.clear()) {\n    obj.changed.dispatch();\n  }\n});\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Import to register the shared object types.\nimport 'neuroglancer/shared_disjoint_sets';\nimport 'neuroglancer/uint64_set';\n\nimport {withChunkManager} from 'neuroglancer/chunk_manager/backend';\nimport {VisibleSegmentsState} from 'neuroglancer/segmentation_display_state/base';\nimport {SharedDisjointUint64Sets} from 'neuroglancer/shared_disjoint_sets';\nimport {SharedWatchableValue} from 'neuroglancer/shared_watchable_value';\nimport {Uint64Set} from 'neuroglancer/uint64_set';\nimport {mat4} from 'neuroglancer/util/geom';\nimport {withSharedVisibility} from 'neuroglancer/visibility_priority/backend';\nimport {RPC, SharedObjectCounterpart} from 'neuroglancer/worker_rpc';\n\nconst Base = withSharedVisibility(withChunkManager(SharedObjectCounterpart));\n\nexport class SegmentationLayerSharedObjectCounterpart extends Base implements VisibleSegmentsState {\n  visibleSegments: Uint64Set;\n  segmentEquivalences: SharedDisjointUint64Sets;\n  objectToDataTransform: SharedWatchableValue<mat4>;\n  renderScaleTarget: SharedWatchableValue<number>;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    // No need to increase the reference count of visibleSegments or\n    // segmentEquivalences since our owner will hold a reference to their owners.\n    this.visibleSegments = <Uint64Set>rpc.get(options['visibleSegments']);\n    this.segmentEquivalences = <SharedDisjointUint64Sets>rpc.get(options['segmentEquivalences']);\n    this.objectToDataTransform = rpc.get(options['objectToDataTransform']);\n    this.renderScaleTarget = rpc.get(options['renderScaleTarget']);\n\n    const scheduleUpdateChunkPriorities = () => {\n      this.chunkManager.scheduleUpdateChunkPriorities();\n    };\n    this.registerDisposer(this.visibleSegments.changed.add(scheduleUpdateChunkPriorities));\n    this.registerDisposer(this.segmentEquivalences.changed.add(scheduleUpdateChunkPriorities));\n    this.registerDisposer(this.objectToDataTransform.changed.add(scheduleUpdateChunkPriorities));\n    this.registerDisposer(this.renderScaleTarget.changed.add(scheduleUpdateChunkPriorities));\n  }\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {RefCounted, RefCountedValue} from 'neuroglancer/util/disposable';\nimport {stableStringify} from 'neuroglancer/util/json';\n\nexport class Memoize<Key, Value extends RefCounted> {\n  private map = new Map<Key, Value>();\n\n  /**\n   * If getter throws an exception, no value is added.\n   */\n  get<T extends Value>(key: Key, getter: () => T): T {\n    let {map} = this;\n    let obj = <T>map.get(key);\n    if (obj === undefined) {\n      obj = getter();\n      obj.registerDisposer(() => {\n        map.delete(key);\n      });\n      map.set(key, obj);\n    } else {\n      obj.addRef();\n    }\n    return obj;\n  }\n}\n\nexport class StringMemoize extends Memoize<string, RefCounted> {\n  get<T extends RefCounted>(x: any, getter: () => T) {\n    if (typeof x !== 'string') {\n      x = stableStringify(x);\n    }\n    return super.get(x, getter);\n  }\n\n  getUncounted<T>(x: any, getter: () => T) {\n    return this.get(x, () => new RefCountedValue(getter())).value;\n  }\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {TypedArray} from 'neuroglancer/util/array';\n\nexport function getRandomHexString(numBits = 128) {\n  const numValues = Math.ceil(numBits / 32);\n  const data = new Uint32Array(numValues);\n  crypto.getRandomValues(data);\n  let s = '';\n  for (let i = 0; i < numValues; ++i) {\n    s += ('00000000' + data[i].toString(16)).slice(-8);\n  }\n  return s;\n}\n\n/**\n * Calls crypto.getRandomValues as many times as needed to fill array.\n */\nexport function getRandomValues<T extends TypedArray>(array: T): T {\n  let byteArray = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n  const blockSize = 65536;\n  for (let i = 0, length = byteArray.length; i < length; i += blockSize) {\n    crypto.getRandomValues(byteArray.subarray(i, Math.min(length, i + blockSize)));\n  }\n  return array;\n}\n\nexport function getRandomUint32() {\n  const data = new Uint32Array(1);\n  crypto.getRandomValues(data);\n  return data[0];\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CredentialsProvider, CredentialsWithGeneration} from 'neuroglancer/credentials_provider';\nimport {CancellationToken, uncancelableToken} from 'neuroglancer/util/cancellation';\nimport {cancellableFetchOk, HttpError, ResponseTransform} from 'neuroglancer/util/http_request';\n\nexport async function fetchWithCredentials<Credentials, T>(\n    credentialsProvider: CredentialsProvider<Credentials>, input: RequestInfo, init: RequestInit,\n    transformResponse: ResponseTransform<T>,\n    applyCredentials: (credentials: Credentials, requestInit: RequestInit) => RequestInit,\n    errorHandler: (httpError: HttpError) => 'refresh' | 'retry',\n    cancellationToken: CancellationToken = uncancelableToken): Promise<T> {\n  let credentials: CredentialsWithGeneration<Credentials>|undefined;\n  credentialsLoop: while (true) {\n    credentials = await credentialsProvider.get(credentials, cancellationToken);\n    requestLoop: while (true) {\n      try {\n        return await cancellableFetchOk(\n            input, applyCredentials(credentials.credentials, init), transformResponse,\n            cancellationToken);\n      } catch (error) {\n        if (error instanceof HttpError) {\n          if (errorHandler(error) === 'refresh') continue credentialsLoop;\n          continue requestLoop;\n        }\n        throw error;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Generic facility for providing authentication/authorization credentials.\n */\n\nimport {CancellationToken, MultipleConsumerCancellationTokenSource} from 'neuroglancer/util/cancellation';\nimport {Owned, RefCounted} from 'neuroglancer/util/disposable';\nimport {StringMemoize} from 'neuroglancer/util/memoize';\n\n/**\n * Wraps an arbitrary JSON credentials object with a generation number.\n *\n * The generation number is used for tracking whether the credentials have been updated/renewed.\n */\nexport interface CredentialsWithGeneration<T> {\n  generation: number;\n  credentials: T;\n}\n\nexport abstract class CredentialsProvider<Credentials> extends RefCounted {\n  /**\n   * Request valid credentials.  If `invalidCredentials` is specified, it indicates that the\n   * specified credentials are invalid.\n   *\n   * This method can be conveniently defined using the `makeCredentialsGetter` function.\n   */\n  abstract get:\n      (invalidCredentials?: CredentialsWithGeneration<Credentials>,\n       cancellationToken?: CancellationToken) => Promise<CredentialsWithGeneration<Credentials>>;\n}\n\nexport function makeCachedCredentialsGetter<Credentials>(\n    getUncached: (\n        invalidCredentials: CredentialsWithGeneration<Credentials>|undefined,\n        cancellationToken: CancellationToken) => Promise<CredentialsWithGeneration<Credentials>>) {\n  let cachedCredentials: CredentialsWithGeneration<Credentials>|undefined;\n  let pendingCredentials: Promise<CredentialsWithGeneration<Credentials>>|undefined;\n  let pendingCancellationToken: MultipleConsumerCancellationTokenSource|undefined;\n  return (invalidCredentials?: CredentialsWithGeneration<Credentials>,\n          cancellationToken?: CancellationToken) => {\n    if (pendingCredentials !== undefined &&\n        (cachedCredentials === undefined || invalidCredentials === undefined ||\n         cachedCredentials.generation !== invalidCredentials.generation)) {\n      if (cachedCredentials === undefined) {\n        pendingCancellationToken!.addConsumer(cancellationToken);\n      }\n      return pendingCredentials;\n    }\n    cachedCredentials = undefined;\n    pendingCancellationToken = new MultipleConsumerCancellationTokenSource();\n    pendingCredentials = getUncached(invalidCredentials, pendingCancellationToken)\n                             .then(\n                                 credentials => {\n                                   cachedCredentials = credentials;\n                                   pendingCancellationToken = undefined;\n                                   return credentials;\n                                 },\n                                 reason => {\n                                   if (pendingCancellationToken!.isCanceled) {\n                                     pendingCancellationToken = undefined;\n                                     pendingCredentials = undefined;\n                                   }\n                                   throw reason;\n                                 });\n    return pendingCredentials;\n  };\n}\n\nexport function makeCredentialsGetter<Credentials>(\n    getWithoutGeneration: (cancellationToken: CancellationToken) => Promise<Credentials>) {\n  let generation = 0;\n  return makeCachedCredentialsGetter<Credentials>(\n      (_invalidCredentials, cancellationToken) =>\n          getWithoutGeneration(cancellationToken)\n              .then(credentials => ({generation: ++generation, credentials})));\n}\n\n/**\n * Interface for obtaining a CredentialsProvider based on a string key.\n */\nexport interface CredentialsManager {\n  getCredentialsProvider<Credentials>(key: string, parameters?: any):\n      Owned<CredentialsProvider<Credentials>>;\n}\n\n/**\n * CredentialsManager that supports registration.\n */\nexport class MapBasedCredentialsManager implements CredentialsManager {\n  providers = new Map<string, (parameters: any) => Owned<CredentialsProvider<any>>>();\n  register<Credentials>(\n      key: string, providerGetter: (parameters: any) => Owned<CredentialsProvider<Credentials>>) {\n    this.providers.set(key, providerGetter);\n  }\n\n  getCredentialsProvider<Credentials>(key: string, parameters?: any):\n      Owned<CredentialsProvider<Credentials>> {\n    const getter = this.providers.get(key);\n    if (getter === undefined) {\n      throw new Error(`No registered credentials provider: ${JSON.stringify(key)}`);\n    }\n    return getter(parameters);\n  }\n}\n\n/**\n * CredentialsManager that wraps another and caches the CredentialsProvider objects.\n */\nexport class CachingCredentialsManager<Base extends CredentialsManager> extends RefCounted\n    implements CredentialsManager {\n  memoize = new StringMemoize();\n\n  constructor(public base: Base) {\n    super();\n  }\n\n  getCredentialsProvider<Credentials>(key: string, parameters?: any):\n      Owned<CredentialsProvider<Credentials>> {\n    return this.memoize.get(\n        {key, parameters},\n        () => this.registerDisposer(\n            this.base.getCredentialsProvider<Credentials>(key, parameters).addRef()));\n  }\n}\n\nexport class CachingMapBasedCredentialsManager extends\n    CachingCredentialsManager<MapBasedCredentialsManager> {\n  constructor() {\n    super(new MapBasedCredentialsManager());\n  }\n\n  register<Credentials>(\n      key: string, providerGetter: (parameters: any) => Owned<CredentialsProvider<Credentials>>) {\n    this.base.register(key, providerGetter);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Defines a CredentialsProvider that forwards requests to a SharedCredentialsProvider on\n * another thread.\n */\n\nimport {CredentialsProvider, CredentialsWithGeneration, makeCachedCredentialsGetter} from 'neuroglancer/credentials_provider';\nimport {CREDENTIALS_PROVIDER_GET_RPC_ID, CREDENTIALS_PROVIDER_RPC_ID} from 'neuroglancer/credentials_provider/shared_common';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {registerSharedObject, SharedObjectCounterpart} from 'neuroglancer/worker_rpc';\n\n\n@registerSharedObject(CREDENTIALS_PROVIDER_RPC_ID)\nexport class SharedCredentialsProviderCounterpart<Credentials> extends SharedObjectCounterpart\n    implements CredentialsProvider<Credentials> {\n  get = makeCachedCredentialsGetter(\n      (invalidCredentials?: CredentialsWithGeneration<Credentials>,\n       cancellationToken?: CancellationToken) =>\n          this.rpc!.promiseInvoke(\n              CREDENTIALS_PROVIDER_GET_RPC_ID,\n              {providerId: this.rpcId, invalidCredentials: invalidCredentials}, cancellationToken));\n}\n\nexport function WithSharedCredentialsProviderCounterpart<Credentials>() {\n  return function<TBase extends{new (...args: any[]): SharedObjectCounterpart}>(Base: TBase) {\n    return class extends Base {\n      credentialsProvider: SharedCredentialsProviderCounterpart<Credentials>;\n      constructor(...args: any[]) {\n        super(...args);\n        const options = args[1];\n        this.credentialsProvider =\n            this.rpc!.getRef<SharedCredentialsProviderCounterpart<Credentials>>(\n                options['credentialsProvider']);\n      }\n    };\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport const CREDENTIALS_PROVIDER_RPC_ID = 'CredentialsProvider';\nexport const CREDENTIALS_PROVIDER_GET_RPC_ID = 'CredentialsProvider.get';\n\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {SliceViewChunkSpecification} from 'neuroglancer/sliceview/base';\n\nexport const ANNOTATION_METADATA_CHUNK_SOURCE_RPC_ID = 'annotation.MetadataChunkSource';\nexport const ANNOTATION_GEOMETRY_CHUNK_SOURCE_RPC_ID = 'annotation.GeometryChunkSource';\nexport const ANNOTATION_SUBSET_GEOMETRY_CHUNK_SOURCE_RPC_ID = 'annotation.SubsetGeometryChunkSource';\nexport const ANNOTATION_REFERENCE_ADD_RPC_ID = 'annotation.reference.add';\nexport const ANNOTATION_REFERENCE_DELETE_RPC_ID = 'annotation.reference.delete';\nexport const ANNOTATION_COMMIT_UPDATE_RPC_ID = 'annotation.commit';\nexport const ANNOTATION_COMMIT_UPDATE_RESULT_RPC_ID = 'annotation.commit';\n\nexport class AnnotationGeometryChunkSpecification extends SliceViewChunkSpecification {}\n\nexport const ANNOTATION_PERSPECTIVE_RENDER_LAYER_RPC_ID = 'annotation/PerspectiveRenderLayer';\nexport const ANNOTATION_RENDER_LAYER_RPC_ID = 'annotation/RenderLayer';\nexport const ANNOTATION_RENDER_LAYER_UPDATE_SEGMENTATION_RPC_ID =\n    'annotation/RenderLayer.updateSegmentation';\n","/**\n * @license\n * Copyright 2018 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Annotation, AnnotationId, deserializeAnnotation, SerializedAnnotations} from 'neuroglancer/annotation';\nimport {ANNOTATION_COMMIT_UPDATE_RESULT_RPC_ID, ANNOTATION_COMMIT_UPDATE_RPC_ID, ANNOTATION_GEOMETRY_CHUNK_SOURCE_RPC_ID, ANNOTATION_METADATA_CHUNK_SOURCE_RPC_ID, ANNOTATION_PERSPECTIVE_RENDER_LAYER_RPC_ID, ANNOTATION_REFERENCE_ADD_RPC_ID, ANNOTATION_REFERENCE_DELETE_RPC_ID, ANNOTATION_RENDER_LAYER_RPC_ID, ANNOTATION_RENDER_LAYER_UPDATE_SEGMENTATION_RPC_ID, ANNOTATION_SUBSET_GEOMETRY_CHUNK_SOURCE_RPC_ID, AnnotationGeometryChunkSpecification} from 'neuroglancer/annotation/base';\nimport {Chunk, ChunkManager, ChunkSource, withChunkManager} from 'neuroglancer/chunk_manager/backend';\nimport {ChunkPriorityTier} from 'neuroglancer/chunk_manager/base';\nimport {PerspectiveViewRenderLayer} from 'neuroglancer/perspective_view/backend';\nimport {forEachVisibleSegment, getObjectKey} from 'neuroglancer/segmentation_display_state/base';\nimport {SharedDisjointUint64Sets} from 'neuroglancer/shared_disjoint_sets';\nimport {SharedWatchableValue} from 'neuroglancer/shared_watchable_value';\nimport {SliceViewChunk, SliceViewChunkSource} from 'neuroglancer/sliceview/backend';\nimport {registerNested, WatchableValue} from 'neuroglancer/trackable_value';\nimport {Uint64Set} from 'neuroglancer/uint64_set';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {Borrowed} from 'neuroglancer/util/disposable';\nimport {kZeroVec} from 'neuroglancer/util/geom';\nimport {Uint64} from 'neuroglancer/util/uint64';\nimport {getBasePriority, getPriorityTier} from 'neuroglancer/visibility_priority/backend';\nimport {withSharedVisibility} from 'neuroglancer/visibility_priority/backend';\nimport {registerRPC, registerSharedObject, RPC, SharedObjectCounterpart} from 'neuroglancer/worker_rpc';\n\nconst ANNOTATION_METADATA_CHUNK_PRIORITY = 200;\nconst ANNOTATION_SEGMENT_FILTERED_CHUNK_PRIORITY = 60;\n\nexport class AnnotationMetadataChunk extends Chunk {\n  annotation: Annotation|undefined|null;\n  freeSystemMemory() {\n    this.annotation = undefined;\n  }\n  serialize(msg: any, transfers: any[]) {\n    super.serialize(msg, transfers);\n    msg.annotation = this.annotation;\n  }\n  downloadSucceeded() {\n    this.systemMemoryBytes = this.gpuMemoryBytes = 0;\n    super.downloadSucceeded();\n  }\n}\n\nexport class AnnotationGeometryData implements SerializedAnnotations {\n  data: Uint8Array;\n  typeToOffset: number[];\n  typeToIds: string[][];\n  segmentListIndex: Uint32Array;\n  segmentList: Uint32Array;\n\n  serialize(msg: any, transfers: any[]) {\n    msg.data = this.data;\n    msg.typeToOffset = this.typeToOffset;\n    msg.typeToIds = this.typeToIds;\n    msg.segmentList = this.segmentList;\n    msg.segmentListIndex = this.segmentListIndex;\n    transfers.push(this.data.buffer, this.segmentList.buffer, this.segmentListIndex.buffer);\n  }\n\n  get numBytes() {\n    return this.data.byteLength;\n  }\n}\n\nfunction GeometryChunkMixin<TBase extends { new (...args: any[]): Chunk }>(Base: TBase) {\n  class C extends Base {\n    data: AnnotationGeometryData|undefined;\n    serialize(msg: any, transfers: any[]) {\n      super.serialize(msg, transfers);\n      this.data!.serialize(msg, transfers);\n      this.data = undefined;\n    }\n\n    downloadSucceeded() {\n      this.systemMemoryBytes = this.gpuMemoryBytes = this.data!.numBytes;\n      super.downloadSucceeded();\n    }\n\n    freeSystemMemory() {\n      this.data = undefined;\n    }\n  }\n  return C;\n}\n\nexport class AnnotationGeometryChunk extends GeometryChunkMixin(SliceViewChunk) {\n  source: AnnotationGeometryChunkSource;\n}\n\nexport class AnnotationSubsetGeometryChunk extends GeometryChunkMixin(Chunk) {\n  source: AnnotationSubsetGeometryChunkSource;\n  objectId: Uint64;\n}\n\n@registerSharedObject(ANNOTATION_METADATA_CHUNK_SOURCE_RPC_ID)\nclass AnnotationMetadataChunkSource extends ChunkSource {\n  parent: Borrowed<AnnotationSource>|undefined = undefined;\n  getChunk(id: string) {\n    const {chunks} = this;\n    let chunk = chunks.get(id);\n    if (chunk === undefined) {\n      chunk = this.getNewChunk_(AnnotationMetadataChunk);\n      chunk.initialize(id);\n      this.addChunk(chunk);\n    }\n    return chunk;\n  }\n\n  download(chunk: AnnotationMetadataChunk, cancellationToken: CancellationToken) {\n    return this.parent!.downloadMetadata(chunk, cancellationToken);\n  }\n}\n\n@registerSharedObject(ANNOTATION_GEOMETRY_CHUNK_SOURCE_RPC_ID)\nclass AnnotationGeometryChunkSource extends SliceViewChunkSource {\n  parent: Borrowed<AnnotationSource>|undefined = undefined;\n  spec: AnnotationGeometryChunkSpecification;\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.spec = new AnnotationGeometryChunkSpecification(options.spec);\n  }\n  download(chunk: AnnotationGeometryChunk, cancellationToken: CancellationToken) {\n    return this.parent!.downloadGeometry(chunk, cancellationToken);\n  }\n}\nAnnotationGeometryChunkSource.prototype.chunkConstructor = AnnotationGeometryChunk;\n\n\n@registerSharedObject(ANNOTATION_SUBSET_GEOMETRY_CHUNK_SOURCE_RPC_ID)\nclass AnnotationSubsetGeometryChunkSource extends ChunkSource {\n  parent: Borrowed<AnnotationSource>|undefined = undefined;\n  chunks: Map<string, AnnotationSubsetGeometryChunk>;\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n  }\n  getChunk(objectId: Uint64) {\n    const key = getObjectKey(objectId);\n    const {chunks} = this;\n    let chunk = chunks.get(key);\n    if (chunk === undefined) {\n      chunk = this.getNewChunk_(AnnotationSubsetGeometryChunk);\n      chunk.initialize(key);\n      chunk.objectId = objectId.clone();\n      this.addChunk(chunk);\n    }\n    return chunk;\n  }\n  download(chunk: AnnotationSubsetGeometryChunk, cancellationToken: CancellationToken) {\n    return this.parent!.downloadSegmentFilteredGeometry(chunk, cancellationToken);\n  }\n}\n\nexport interface AnnotationSource {\n  // TODO(jbms): Move this declaration to class definition below and declare abstract once\n  // TypeScript supports mixins with abstract classes.\n  downloadMetadata(chunk: AnnotationMetadataChunk, cancellationToken: CancellationToken):\n      Promise<void>;\n  downloadGeometry(chunk: AnnotationGeometryChunk, cancellationToken: CancellationToken):\n      Promise<void>;\n  downloadSegmentFilteredGeometry(\n      chunk: AnnotationSubsetGeometryChunk, cancellationToken: CancellationToken): Promise<void>;\n}\n\nexport class AnnotationSource extends SharedObjectCounterpart {\n  references = new Set<AnnotationId>();\n  chunkManager: Borrowed<ChunkManager>;\n  metadataChunkSource: AnnotationMetadataChunkSource;\n  sources: AnnotationGeometryChunkSource[][];\n  segmentFilteredSource: AnnotationSubsetGeometryChunkSource;\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    const chunkManager = this.chunkManager = <ChunkManager>rpc.get(options.chunkManager);\n    const metadataChunkSource = this.metadataChunkSource = this.registerDisposer(\n        rpc.getRef<AnnotationMetadataChunkSource>(options.metadataChunkSource));\n    this.sources = (<any[][]>options.sources).map(alternatives => alternatives.map(id => {\n      const source = this.registerDisposer(rpc.getRef<AnnotationGeometryChunkSource>(id));\n      source.parent = this;\n      return source;\n    }));\n    this.segmentFilteredSource = this.registerDisposer(\n        rpc.getRef<AnnotationSubsetGeometryChunkSource>(options.segmentFilteredSource));\n    this.segmentFilteredSource.parent = this;\n    metadataChunkSource.parent = this;\n    this.registerDisposer(\n        chunkManager.recomputeChunkPriorities.add(() => this.recomputeChunkPriorities()));\n  }\n\n  private recomputeChunkPriorities() {\n    const {chunkManager, metadataChunkSource} = this;\n    for (const id of this.references) {\n      chunkManager.requestChunk(\n          metadataChunkSource.getChunk(id), ChunkPriorityTier.VISIBLE,\n          ANNOTATION_METADATA_CHUNK_PRIORITY);\n    }\n  }\n\n  add(annotation: Annotation): Promise<AnnotationId> {\n    annotation;\n    throw new Error('Not implemented');\n  }\n  delete(id: AnnotationId): Promise<void> {\n    id;\n    throw new Error('Not implemented');\n  }\n  update(id: AnnotationId, newAnnotation: Annotation): Promise<void> {\n    id;\n    newAnnotation;\n    throw new Error('Not implemented');\n  }\n}\n\nregisterRPC(ANNOTATION_REFERENCE_ADD_RPC_ID, function(x: any) {\n  const obj = <AnnotationSource>this.get(x.id);\n  obj.references.add(x.annotation);\n  obj.chunkManager.scheduleUpdateChunkPriorities();\n});\n\nregisterRPC(ANNOTATION_REFERENCE_DELETE_RPC_ID, function(x: any) {\n  const obj = <AnnotationSource>this.get(x.id);\n  obj.references.delete(x.annotation);\n  obj.chunkManager.scheduleUpdateChunkPriorities();\n});\n\nregisterRPC(ANNOTATION_COMMIT_UPDATE_RPC_ID, function(x: any) {\n  const obj = <AnnotationSource>this.get(x.id);\n  const annotationId: AnnotationId|undefined = x.annotationId;\n  const newAnnotation: Annotation|null = deserializeAnnotation(x.newAnnotation);\n\n  let promise: Promise<Annotation|null>;\n  if (annotationId === undefined) {\n    promise = obj.add(newAnnotation!).then(id => ({...newAnnotation!, id}));\n  } else if (newAnnotation === null) {\n    promise = obj.delete(annotationId).then(() => null);\n  } else {\n    promise = obj.update(annotationId, newAnnotation).then(() => newAnnotation);\n  }\n  // FIXME: Handle new chunks requested prior to update but not yet sent to frontend.\n  promise.then(\n      result => {\n        if (!obj.wasDisposed) {\n          this.invoke(ANNOTATION_COMMIT_UPDATE_RESULT_RPC_ID, {\n            id: obj.rpcId,\n            annotationId: annotationId || newAnnotation!.id,\n            newAnnotation: result\n          });\n        }\n      },\n      (error: Error) => {\n        if (!obj.wasDisposed) {\n          this.invoke(\n              ANNOTATION_COMMIT_UPDATE_RESULT_RPC_ID,\n              {id: obj.rpcId, annotationId, error: error.message});\n        }\n      });\n});\n\n@registerSharedObject(ANNOTATION_PERSPECTIVE_RENDER_LAYER_RPC_ID)\nclass AnnotationPerspectiveRenderLayer extends PerspectiveViewRenderLayer {\n  source: AnnotationSource;\n  filterBySegmentation: SharedWatchableValue<boolean>;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.source = rpc.get(options.source);\n    this.filterBySegmentation = rpc.get(options.filterBySegmentation);\n    this.viewStates.changed.add(() => this.source.chunkManager.scheduleUpdateChunkPriorities());\n    this.filterBySegmentation.changed.add(\n        () => this.source.chunkManager.scheduleUpdateChunkPriorities());\n    this.registerDisposer(this.source.chunkManager.recomputeChunkPriorities.add(\n        () => this.recomputeChunkPriorities()));\n  }\n\n  private recomputeChunkPriorities() {\n    const {source} = this;\n    if (this.filterBySegmentation.value) {\n      return;\n    }\n    for (const state of this.viewStates) {\n      const visibility = state.visibility.value;\n      if (visibility === Number.NEGATIVE_INFINITY) {\n        continue;\n      }\n      const priorityTier = getPriorityTier(visibility);\n      const basePriority = getBasePriority(visibility);\n      // FIXME: priority should be based on location\n      for (const alternatives of source.sources) {\n        for (const geometrySource of alternatives) {\n          const chunk = geometrySource.getChunk(kZeroVec);\n          source.chunkManager.requestChunk(chunk, priorityTier, basePriority);\n        }\n      }\n    }\n  }\n}\nAnnotationPerspectiveRenderLayer;\n\n\n@registerSharedObject(ANNOTATION_RENDER_LAYER_RPC_ID)\nclass AnnotationLayerSharedObjectCounterpart extends withSharedVisibility(withChunkManager(SharedObjectCounterpart)) {\n  source: AnnotationSource;\n\n  segmentationState = new WatchableValue<\n      {visibleSegments: Uint64Set, segmentEquivalences: SharedDisjointUint64Sets}|undefined|null>(\n      undefined);\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.source = rpc.get(options.source);\n    this.segmentationState.value = this.getSegmentationState(options.segmentationState);\n\n    const scheduleUpdateChunkPriorities = () => this.chunkManager.scheduleUpdateChunkPriorities();\n    this.registerDisposer(registerNested(this.segmentationState, (context, state) => {\n      if (state != null) {\n        context.registerDisposer(state.visibleSegments.changed.add(scheduleUpdateChunkPriorities));\n        context.registerDisposer(\n            state.segmentEquivalences.changed.add(scheduleUpdateChunkPriorities));\n      }\n    }));\n    this.registerDisposer(this.chunkManager.recomputeChunkPriorities.add(\n        () => this.recomputeChunkPriorities()));\n  }\n\n  private recomputeChunkPriorities() {\n    const state = this.segmentationState.value;\n    if (state == null) {\n      return;\n    }\n    const visibility = this.visibility.value;\n    if (visibility === Number.NEGATIVE_INFINITY) {\n      return;\n    }\n    const priorityTier = getPriorityTier(visibility);\n    const basePriority = getBasePriority(visibility);\n    const {chunkManager} = this;\n    const source = this.source.segmentFilteredSource;\n    forEachVisibleSegment(state, objectId => {\n      const chunk = source.getChunk(objectId);\n      chunkManager.requestChunk(\n          chunk, priorityTier, basePriority + ANNOTATION_SEGMENT_FILTERED_CHUNK_PRIORITY);\n    });\n  }\n\n  getSegmentationState(msg: any) {\n    if (msg == null) {\n      return msg;\n    }\n    return {\n      visibleSegments: this.rpc!.get(msg.visibleSegments),\n      segmentEquivalences: this.rpc!.get(msg.segmentEquivalences)\n    };\n  }\n}\nAnnotationLayerSharedObjectCounterpart;\n\nregisterRPC(ANNOTATION_RENDER_LAYER_UPDATE_SEGMENTATION_RPC_ID, function(x) {\n  const obj = <AnnotationLayerSharedObjectCounterpart>this.get(x.id);\n  obj.segmentationState.value = obj.getSegmentationState(x.segmentationState);\n});\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DataType} from 'neuroglancer/util/data_type';\n\nexport const SINGLE_MESH_LAYER_RPC_ID = 'single_mesh/SingleMeshLayer';\nexport const GET_SINGLE_MESH_INFO_RPC_ID = 'single_mesh/getSingleMeshInfo';\n\nexport const SINGLE_MESH_CHUNK_KEY = '';\n\nexport interface VertexAttributeInfo {\n  name: string;\n  dataType: DataType;\n  numComponents: number;\n  source?: string;\n  min?: number;\n  max?: number;\n}\n\nexport interface SingleMeshInfo {\n  numVertices: number;\n  numTriangles: number;\n  // Perhaps bounding box?\n  // Perhaps transform data?\n  vertexAttributes: VertexAttributeInfo[];\n}\n\nexport interface SingleMeshData {\n  vertexPositions: Float32Array;\n  indices: Uint32Array;\n  vertexNormals?: Float32Array;\n  vertexAttributes: Float32Array[];\n}\n\nexport class SingleMeshSourceParameters {\n  meshSourceUrl: string;\n  attributeSourceUrls: string[];\n}\n\nexport class SingleMeshSourceParametersWithInfo extends SingleMeshSourceParameters {\n  info: SingleMeshInfo;\n\n  static RPC_ID = 'single_mesh/SingleMeshSource';\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Chunk, ChunkManager, ChunkSource, withChunkManager, WithParameters} from 'neuroglancer/chunk_manager/backend';\nimport {ChunkPriorityTier} from 'neuroglancer/chunk_manager/base';\nimport {PriorityGetter} from 'neuroglancer/chunk_manager/generic_file_source';\nimport {computeVertexNormals} from 'neuroglancer/mesh/backend';\nimport {GET_SINGLE_MESH_INFO_RPC_ID, SINGLE_MESH_CHUNK_KEY, SINGLE_MESH_LAYER_RPC_ID, SingleMeshData, SingleMeshInfo, SingleMeshSourceParameters, SingleMeshSourceParametersWithInfo, VertexAttributeInfo} from 'neuroglancer/single_mesh/base';\nimport {TypedArray} from 'neuroglancer/util/array';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {stableStringify} from 'neuroglancer/util/json';\nimport {getBasePriority, getPriorityTier, withSharedVisibility} from 'neuroglancer/visibility_priority/backend';\nimport {registerPromiseRPC, registerSharedObject, RPC, RPCPromise, SharedObjectCounterpart} from 'neuroglancer/worker_rpc';\n\nconst SINGLE_MESH_CHUNK_PRIORITY = 50;\n\n/**\n * Chunk that contains the single mesh.\n */\nexport class SingleMeshChunk extends Chunk {\n  data: SingleMeshData|null = null;\n  constructor() {\n    super();\n  }\n  freeSystemMemory() {\n    this.data = null;\n  }\n  serialize(msg: any, transfers: any[]) {\n    super.serialize(msg, transfers);\n    let {vertexPositions, indices, vertexNormals, vertexAttributes} = this.data!;\n    msg['vertexPositions'] = vertexPositions;\n    msg['indices'] = indices;\n    msg['vertexNormals'] = vertexNormals;\n    msg['vertexAttributes'] = vertexAttributes;\n    const transferSet = new Set<ArrayBuffer>();\n    transferSet.add(vertexPositions!.buffer);\n    transferSet.add(indices!.buffer);\n    transferSet.add(vertexNormals!.buffer);\n    for (const data of vertexAttributes!) {\n      transferSet.add(data.buffer);\n    }\n    transfers.push(...transferSet);\n    this.data = null;\n  }\n  downloadSucceeded() {\n    let {vertexPositions, indices, vertexNormals, vertexAttributes} = this.data!;\n    let totalBytes = this.gpuMemoryBytes =\n        vertexPositions.byteLength + indices.byteLength + vertexNormals!.byteLength;\n    for (const data of vertexAttributes) {\n      totalBytes += data.byteLength;\n    }\n    this.systemMemoryBytes = this.gpuMemoryBytes = totalBytes;\n    super.downloadSucceeded();\n  }\n}\n\nexport interface SingleMesh extends SingleMeshData { info: SingleMeshInfo; }\n\nexport interface SingleMeshVertexAttributes {\n  numVertices: number;\n  attributeInfo: VertexAttributeInfo[];\n  attributes: Float32Array[];\n}\n\ninterface SingleMeshFactory {\n  description?: string;\n  getMesh:\n      (chunkManager: ChunkManager, url: string, getPriority: PriorityGetter,\n       cancellationToken: CancellationToken) => Promise<SingleMesh>;\n}\n\ninterface SingleMeshVertexAttributesFactory {\n  description?: string;\n  getMeshVertexAttributes:\n      (chunkManager: ChunkManager, url: string, getPriority: PriorityGetter,\n       cancellationToken: CancellationToken) => Promise<SingleMeshVertexAttributes>;\n}\n\nconst singleMeshFactories = new Map<string, SingleMeshFactory>();\nconst singleMeshVertexAttributesFactories = new Map<string, SingleMeshVertexAttributesFactory>();\nexport function registerSingleMeshFactory(name: string, factory: SingleMeshFactory) {\n  singleMeshFactories.set(name, factory);\n}\n\nexport function registerSingleMeshVertexAttributesFactory(\n    name: string, factory: SingleMeshVertexAttributesFactory) {\n  singleMeshVertexAttributesFactories.set(name, factory);\n}\n\nconst protocolPattern = /^(?:([a-zA-Z-+_]+):\\/\\/)?(.*)$/;\n\nfunction getDataSource<T>(factories: Map<string, T>, url: string): [T, string, string] {\n  let m = url.match(protocolPattern);\n  if (m === null || m[1] === undefined) {\n    throw new Error(`Data source URL must have the form \"<protocol>://<path>\".`);\n  }\n  let dataSource = m[1];\n  let factory = factories.get(dataSource);\n  if (factory === undefined) {\n    throw new Error(`Unsupported data source: ${JSON.stringify(dataSource)}.`);\n  }\n  return [factory, m[2], dataSource];\n}\n\nexport function getMesh(\n    chunkManager: ChunkManager, url: string, getPriority: PriorityGetter,\n    cancellationToken: CancellationToken) {\n  let [factory, path] = getDataSource(singleMeshFactories, url);\n  return factory.getMesh(chunkManager, path, getPriority, cancellationToken);\n}\n\nexport function getMeshVertexAttributes(\n    chunkManager: ChunkManager, url: string, getPriority: PriorityGetter,\n    cancellationToken: CancellationToken) {\n  let [factory, path] = getDataSource(singleMeshVertexAttributesFactories, url);\n  return factory.getMeshVertexAttributes(chunkManager, path, getPriority, cancellationToken);\n}\n\nexport function getMinMax(array: TypedArray): [number, number] {\n  let min = Number.POSITIVE_INFINITY;\n  let max = Number.NEGATIVE_INFINITY;\n  for (let value of array) {\n    min = Math.min(min, value);\n    max = Math.max(max, value);\n  }\n  return [min, max];\n}\n\nexport function getCombinedMesh(\n    chunkManager: ChunkManager, parameters: SingleMeshSourceParameters, getPriority: PriorityGetter,\n    cancellationToken: CancellationToken) {\n  let promises: Promise<SingleMesh|SingleMeshVertexAttributes>[] =\n      [getMesh(chunkManager, parameters.meshSourceUrl, getPriority, cancellationToken)];\n  for (let source of parameters.attributeSourceUrls) {\n    promises.push(getMeshVertexAttributes(chunkManager, source, getPriority, cancellationToken));\n  }\n  return Promise.all(promises).then(results => {\n    let origMesh = <SingleMesh>results[0];\n    let combinedMesh: SingleMesh = {\n      info: {\n        numVertices: origMesh.info.numVertices,\n        numTriangles: origMesh.info.numTriangles,\n        vertexAttributes: [],\n      },\n      vertexPositions: origMesh.vertexPositions,\n      indices: origMesh.indices,\n      vertexNormals: origMesh.vertexNormals,\n      vertexAttributes: [],\n    };\n    function addAttribute(info: VertexAttributeInfo, data: Float32Array, source?: string) {\n      let [min, max] = getMinMax(data);\n      combinedMesh.info.vertexAttributes.push({\n        name: info.name,\n        source,\n        numComponents: info.numComponents,\n        dataType: info.dataType,\n        min,\n        max\n      });\n      combinedMesh.vertexAttributes.push(data);\n    }\n    function addAttributes(info: VertexAttributeInfo[], data: Float32Array[], source?: string) {\n      const numAttributes = info.length;\n      for (let i = 0; i < numAttributes; ++i) {\n        addAttribute(info[i], data[i], source);\n      }\n    }\n    addAttributes(origMesh.info.vertexAttributes, origMesh.vertexAttributes);\n    parameters.attributeSourceUrls.forEach((source, i) => {\n      let result = <SingleMeshVertexAttributes>results[i + 1];\n      if (result.numVertices !== origMesh.info.numVertices) {\n        throw new Error(\n            `Vertex attribute source ${JSON.stringify(source)} specifies attributes for ` +\n            `${result.numVertices} vertices, but mesh has ${origMesh.info.numVertices} vertices.`);\n      }\n      addAttributes(result.attributeInfo, result.attributes, source);\n    });\n    return combinedMesh;\n  });\n}\n\n@registerSharedObject() export class SingleMeshSource extends\n(WithParameters(ChunkSource, SingleMeshSourceParametersWithInfo)) {\n  getChunk() {\n    const key = SINGLE_MESH_CHUNK_KEY;\n    let chunk = <SingleMeshChunk>this.chunks.get(key);\n    if (chunk === undefined) {\n      chunk = this.getNewChunk_(SingleMeshChunk);\n      chunk.initialize(key);\n      this.addChunk(chunk);\n    }\n    return chunk;\n  }\n\n  download(chunk: SingleMeshChunk, cancellationToken: CancellationToken) {\n    const getPriority = () => ({priorityTier: chunk.priorityTier, priority: chunk.priority});\n    return getCombinedMesh(this.chunkManager, this.parameters, getPriority, cancellationToken)\n        .then(data => {\n          if (stableStringify(data.info) !== stableStringify(this.parameters.info)) {\n            throw new Error(`Mesh info has changed.`);\n          }\n          if (data.vertexNormals === undefined) {\n            data.vertexNormals = computeVertexNormals(data.vertexPositions, data.indices);\n          }\n          chunk.data = data;\n        });\n  }\n}\n\nconst SingleMeshLayerBase = withSharedVisibility(withChunkManager(SharedObjectCounterpart));\n@registerSharedObject(SINGLE_MESH_LAYER_RPC_ID)\nexport class SingleMeshLayer extends SingleMeshLayerBase {\n  source: SingleMeshSource;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.source = this.registerDisposer(rpc.getRef<SingleMeshSource>(options['source']));\n    this.registerDisposer(this.chunkManager.recomputeChunkPriorities.add(() => {\n      this.updateChunkPriorities();\n    }));\n  }\n\n  private updateChunkPriorities() {\n    const visibility = this.visibility.value;\n    if (visibility === Number.NEGATIVE_INFINITY) {\n      return;\n    }\n    const priorityTier = getPriorityTier(visibility);\n    const basePriority = getBasePriority(visibility);\n    const {source, chunkManager} = this;\n    const chunk = source.getChunk();\n    chunkManager.requestChunk(chunk, priorityTier, basePriority + SINGLE_MESH_CHUNK_PRIORITY);\n  }\n}\n\nconst INFO_PRIORITY = 1000;\n\nregisterPromiseRPC(\n    GET_SINGLE_MESH_INFO_RPC_ID, function(x, cancellationToken): RPCPromise<SingleMeshInfo> {\n      let chunkManager = this.getRef<ChunkManager>(x['chunkManager']);\n      try {\n        let parameters = <SingleMeshSourceParameters>x['parameters'];\n        return getCombinedMesh(\n                   chunkManager, parameters,\n                   () => ({priorityTier: ChunkPriorityTier.VISIBLE, priority: INFO_PRIORITY}),\n                   cancellationToken)\n            .then(mesh => ({value: mesh.info}));\n      } finally {\n        chunkManager.dispose();\n      }\n    });\n","\n/*jslint browser: true, node: true */\n/*global require, module */\n\n\"use strict\";\n\n/*** Imports ***/\n\nvar nifti = nifti || {};\nnifti.Utils = nifti.Utils || {};\n\n\n\n/*** Static Pseudo-constants ***/\n\nnifti.Utils.crcTable = null;\nnifti.Utils.GUNZIP_MAGIC_COOKIE1 = 31;\nnifti.Utils.GUNZIP_MAGIC_COOKIE2 = 139;\n\n\n\n/*** Static methods ***/\n\nnifti.Utils.getStringAt = function (data, start, end) {\n    var str = \"\", ctr, ch;\n\n    for (ctr = start; ctr < end; ctr += 1) {\n        ch = data.getUint8(ctr);\n\n        if (ch !== 0) {\n            str += String.fromCharCode(ch);\n        }\n    }\n\n    return str;\n};\n\n\n\nnifti.Utils.getByteAt = function (data, start) {\n    return data.getInt8(start);\n};\n\n\n\nnifti.Utils.getShortAt = function (data, start, littleEndian) {\n    return data.getInt16(start, littleEndian);\n};\n\n\n\nnifti.Utils.getIntAt = function (data, start, littleEndian) {\n    return data.getInt32(start, littleEndian);\n};\n\n\n\nnifti.Utils.getFloatAt = function (data, start, littleEndian) {\n    return data.getFloat32(start, littleEndian);\n};\n\n\n\nnifti.Utils.getDoubleAt = function (data, start, littleEndian) {\n    return data.getFloat64(start, littleEndian);\n};\n\n\n\nnifti.Utils.getLongAt = function (data, start, littleEndian) {\n    var ctr, array = [], value = 0;\n\n    for (ctr = 0; ctr < 8; ctr += 1) {\n        array[ctr] = nifti.Utils.getByteAt(data, start + ctr, littleEndian);\n    }\n\n    for (ctr = array.length - 1; ctr >= 0; ctr--) {\n        value = (value * 256) + array[ctr];\n    }\n\n    return value;\n};\n\n\n\nnifti.Utils.toArrayBuffer = function (buffer) {\n    var ab, view, i;\n\n    ab = new ArrayBuffer(buffer.length);\n    view = new Uint8Array(ab);\n    for (i = 0; i < buffer.length; i += 1) {\n        view[i] = buffer[i];\n    }\n    return ab;\n};\n\n\n\nnifti.Utils.isString = function (obj) {\n    return (typeof obj === \"string\" || obj instanceof String);\n};\n\n\nnifti.Utils.formatNumber = function (num, shortFormat) {\n    var val = 0;\n\n    if (nifti.Utils.isString(num)) {\n        val = Number(num);\n    } else {\n        val = num;\n    }\n\n    if (shortFormat) {\n        val = val.toPrecision(5);\n    } else {\n        val = val.toPrecision(7);\n    }\n\n    return parseFloat(val);\n};\n\n\n\n// http://stackoverflow.com/questions/18638900/javascript-crc32\nnifti.Utils.makeCRCTable = function(){\n    var c;\n    var crcTable = [];\n    for(var n =0; n < 256; n++){\n        c = n;\n        for(var k =0; k < 8; k++){\n            c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n        }\n        crcTable[n] = c;\n    }\n    return crcTable;\n};\n\n\n\nnifti.Utils.crc32 = function(dataView) {\n    var crcTable = nifti.Utils.crcTable || (nifti.Utils.crcTable = nifti.Utils.makeCRCTable());\n    var crc = 0 ^ (-1);\n\n    for (var i = 0; i < dataView.byteLength; i++ ) {\n        crc = (crc >>> 8) ^ crcTable[(crc ^ dataView.getUint8(i)) & 0xFF];\n    }\n\n    return (crc ^ (-1)) >>> 0;\n};\n\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = nifti.Utils;\n}\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Backend component of PerspectivePanel.  This allows the optional backend component of a\n * PerspectiveViewRenderLayer to set chunk priorities based on the state of the perspective panel.\n */\n\nimport {PERSPECTIVE_VIEW_ADD_LAYER_RPC_ID, PERSPECTIVE_VIEW_REMOVE_LAYER_RPC_ID, PERSPECTIVE_VIEW_RPC_ID, PERSPECTIVE_VIEW_UPDATE_VIEWPORT_RPC_ID} from 'neuroglancer/perspective_view/base';\nimport {SharedWatchableValue} from 'neuroglancer/shared_watchable_value';\nimport {WatchableSet, WatchableValue} from 'neuroglancer/trackable_value';\nimport {mat4} from 'neuroglancer/util/geom';\nimport {registerRPC, registerSharedObject, RPC, SharedObjectCounterpart} from 'neuroglancer/worker_rpc';\n\nexport interface PerspectiveViewportInfo {\n  /**\n   * Width of the viewport in pixels, or 0 if there is no viewport yet.\n   */\n  width: number;\n\n  /**\n   * Height of the viewport in pixels, or 0 if there is no viewport yet.\n   */\n  height: number;\n\n  /**\n   * Transform from camera coordinates to OpenGL clip coordinates.\n   */\n  projectionMat: mat4;\n\n  /**\n   * Transform from world coordinates to camera coordinates.\n   */\n  viewMat: mat4;\n\n  /**\n   * Transform from world coordinates to OpenGL clip coordinates.  Equal to:\n   * `projectionMat * viewMat`.\n   */\n  viewProjectionMat: mat4;\n}\n\n@registerSharedObject(PERSPECTIVE_VIEW_RPC_ID)\nexport class PerspectiveViewState extends SharedObjectCounterpart {\n  visibility: SharedWatchableValue<number>;\n  viewport = new WatchableValue<PerspectiveViewportInfo>({\n    width: 0,\n    height: 0,\n    projectionMat: mat4.create(),\n    viewMat: mat4.create(),\n    viewProjectionMat: mat4.create()\n  });\n  constructor(...args: any[]) {\n    super(...args);\n    const rpc: RPC = args[0];\n    const options: any = args[1];\n    this.visibility = rpc.get(options['visibility']);\n  }\n}\n\nexport class PerspectiveViewRenderLayer extends SharedObjectCounterpart {\n  viewStates = new WatchableSet<PerspectiveViewState>();\n}\n\nregisterRPC(PERSPECTIVE_VIEW_UPDATE_VIEWPORT_RPC_ID, function(x) {\n  const viewState: PerspectiveViewState = this.get(x.view);\n  viewState.viewport.value = x.viewport;\n});\n\nregisterRPC(PERSPECTIVE_VIEW_ADD_LAYER_RPC_ID, function(x) {\n  const viewState: PerspectiveViewState = this.get(x.view);\n  const layer: PerspectiveViewRenderLayer = this.get(x.layer);\n  layer.viewStates.add(viewState);\n});\n\nregisterRPC(PERSPECTIVE_VIEW_REMOVE_LAYER_RPC_ID, function(x) {\n  const viewState: PerspectiveViewState = this.get(x.view);\n  const layer: PerspectiveViewRenderLayer = this.get(x.layer);\n  layer.viewStates.delete(viewState);\n});\n","/**\n * @license\n * Copyright 2018 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PERSPECTIVE_VIEW_RPC_ID = 'perspective_view/PerspectiveView';\nexport const PERSPECTIVE_VIEW_ADD_LAYER_RPC_ID = 'perspective_view/addLayer';\nexport const PERSPECTIVE_VIEW_REMOVE_LAYER_RPC_ID = 'perspective_view/removeLayer';\nexport const PERSPECTIVE_VIEW_UPDATE_VIEWPORT_RPC_ID = 'perspective_view/updateViewport';\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","\n/*jslint browser: true, node: true */\n/*global */\n\n\"use strict\";\n\n/*** Imports ***/\n\nvar nifti = nifti || {};\nnifti.Utils = nifti.Utils || ((typeof require !== 'undefined') ? require('./utilities.js') : null);\n\n\n\n/*** Constructor ***/\n\n/**\n * The NIFTI1 constructor.\n * @constructor\n * @property {boolean} littleEndian\n * @property {number} dim_info\n * @property {number[]} dims - image dimensions\n * @property {number} intent_p1\n * @property {number} intent_p2\n * @property {number} intent_p3\n * @property {number} intent_code\n * @property {number} datatypeCode\n * @property {number} numBitsPerVoxel\n * @property {number} slice_start\n * @property {number} slice_end\n * @property {number} slice_code\n * @property {number[]} pixDims - voxel dimensions\n * @property {number} vox_offset\n * @property {number} scl_slope\n * @property {number} scl_inter\n * @property {number} xyzt_units\n * @property {number} cal_max\n * @property {number} cal_min\n * @property {number} slice_duration\n * @property {number} toffset\n * @property {string} description\n * @property {string} aux_file\n * @property {string} intent_name\n * @property {number} qform_code\n * @property {number} sform_code\n * @property {number} quatern_b\n * @property {number} quatern_c\n * @property {number} quatern_d\n * @property {number} quatern_x\n * @property {number} quatern_y\n * @property {number} quatern_z\n * @property {Array.<Array.<number>>} affine\n * @property {string} magic\n * @property {boolean} isHDR - if hdr/img format\n * @property {number[]} extensionFlag\n * @property {number} extensionSize\n * @property {number} extensionCode\n * @type {Function}\n */\nnifti.NIFTI1 = nifti.NIFTI1 || function () {\n    this.littleEndian = false;\n    this.dim_info = 0;\n    this.dims = [];\n    this.intent_p1 = 0;\n    this.intent_p2 = 0;\n    this.intent_p3 = 0;\n    this.intent_code = 0;\n    this.datatypeCode = 0;\n    this.numBitsPerVoxel = 0;\n    this.slice_start = 0;\n    this.slice_end = 0;\n    this.slice_code = 0;\n    this.pixDims = [];\n    this.vox_offset = 0;\n    this.scl_slope = 1;\n    this.scl_inter = 0;\n    this.xyzt_units = 0;\n    this.cal_max = 0;\n    this.cal_min = 0;\n    this.slice_duration = 0;\n    this.toffset = 0;\n    this.description = \"\";\n    this.aux_file = \"\";\n    this.intent_name = \"\";\n    this.qform_code = 0;\n    this.sform_code = 0;\n    this.quatern_b = 0;\n    this.quatern_c = 0;\n    this.quatern_d = 0;\n    this.qoffset_x = 0;\n    this.qoffset_y = 0;\n    this.qoffset_z = 0;\n    this.affine = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];\n    this.magic = 0;\n    this.isHDR = false;\n    this.extensionFlag = [0, 0, 0, 0];\n    this.extensionSize = 0;\n    this.extensionCode = 0;\n};\n\n\n\n/*** Static Pseudo-constants ***/\n\n// datatype codes\nnifti.NIFTI1.TYPE_NONE            = 0;\nnifti.NIFTI1.TYPE_BINARY          = 1;\nnifti.NIFTI1.TYPE_UINT8           = 2;\nnifti.NIFTI1.TYPE_INT16           = 4;\nnifti.NIFTI1.TYPE_INT32           = 8;\nnifti.NIFTI1.TYPE_FLOAT32        = 16;\nnifti.NIFTI1.TYPE_COMPLEX64      = 32;\nnifti.NIFTI1.TYPE_FLOAT64        = 64;\nnifti.NIFTI1.TYPE_RGB24         = 128;\nnifti.NIFTI1.TYPE_INT8          = 256;\nnifti.NIFTI1.TYPE_UINT16        = 512;\nnifti.NIFTI1.TYPE_UINT32        = 768;\nnifti.NIFTI1.TYPE_INT64        = 1024;\nnifti.NIFTI1.TYPE_UINT64       = 1280;\nnifti.NIFTI1.TYPE_FLOAT128     = 1536;\nnifti.NIFTI1.TYPE_COMPLEX128   = 1792;\nnifti.NIFTI1.TYPE_COMPLEX256   = 2048;\n\n// transform codes\nnifti.NIFTI1.XFORM_UNKNOWN        = 0;\nnifti.NIFTI1.XFORM_SCANNER_ANAT   = 1;\nnifti.NIFTI1.XFORM_ALIGNED_ANAT   = 2;\nnifti.NIFTI1.XFORM_TALAIRACH      = 3;\nnifti.NIFTI1.XFORM_MNI_152        = 4;\n\n// unit codes\nnifti.NIFTI1.SPATIAL_UNITS_MASK = 0x07;\nnifti.NIFTI1.TEMPORAL_UNITS_MASK = 0x38;\nnifti.NIFTI1.UNITS_UNKNOWN        = 0;\nnifti.NIFTI1.UNITS_METER          = 1;\nnifti.NIFTI1.UNITS_MM             = 2;\nnifti.NIFTI1.UNITS_MICRON         = 3;\nnifti.NIFTI1.UNITS_SEC            = 8;\nnifti.NIFTI1.UNITS_MSEC          = 16;\nnifti.NIFTI1.UNITS_USEC          = 24;\nnifti.NIFTI1.UNITS_HZ            = 32;\nnifti.NIFTI1.UNITS_PPM           = 40;\nnifti.NIFTI1.UNITS_RADS          = 48;\n\n// nifti1 codes\nnifti.NIFTI1.MAGIC_COOKIE = 348;\nnifti.NIFTI1.STANDARD_HEADER_SIZE = 348;\nnifti.NIFTI1.MAGIC_NUMBER_LOCATION = 344;\nnifti.NIFTI1.MAGIC_NUMBER = [0x6E, 0x2B, 0x31];  // n+1 (.nii)\nnifti.NIFTI1.MAGIC_NUMBER2 = [0x6E, 0x69, 0x31];  // ni1 (.hdr/.img)\nnifti.NIFTI1.EXTENSION_HEADER_SIZE = 8;\n\n\n/*** Prototype Methods ***/\n\n/**\n * Reads the header data.\n * @param {ArrayBuffer} data\n */\nnifti.NIFTI1.prototype.readHeader = function (data) {\n    var rawData = new DataView(data),\n        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian),\n        ctr,\n        ctrOut,\n        ctrIn,\n        index;\n\n    if (magicCookieVal !== nifti.NIFTI1.MAGIC_COOKIE) {  // try as little endian\n        this.littleEndian = true;\n        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian);\n    }\n\n    if (magicCookieVal !== nifti.NIFTI1.MAGIC_COOKIE) {\n        throw new Error(\"This does not appear to be a NIFTI file!\");\n    }\n\n    this.dim_info = nifti.Utils.getByteAt(rawData, 39);\n\n    for (ctr = 0; ctr < 8; ctr += 1) {\n        index = 40 + (ctr * 2);\n        this.dims[ctr] = nifti.Utils.getShortAt(rawData, index, this.littleEndian);\n    }\n\n    this.intent_p1 = nifti.Utils.getFloatAt(rawData, 56, this.littleEndian);\n    this.intent_p2 = nifti.Utils.getFloatAt(rawData, 60, this.littleEndian);\n    this.intent_p3 = nifti.Utils.getFloatAt(rawData, 64, this.littleEndian);\n    this.intent_code = nifti.Utils.getShortAt(rawData, 68, this.littleEndian);\n\n    this.datatypeCode = nifti.Utils.getShortAt(rawData, 70, this.littleEndian);\n    this.numBitsPerVoxel = nifti.Utils.getShortAt(rawData, 72, this.littleEndian);\n\n    this.slice_start = nifti.Utils.getShortAt(rawData, 74, this.littleEndian);\n\n    for (ctr = 0; ctr < 8; ctr += 1) {\n        index = 76 + (ctr * 4);\n        this.pixDims[ctr] = nifti.Utils.getFloatAt(rawData, index, this.littleEndian);\n    }\n\n    this.vox_offset = nifti.Utils.getFloatAt(rawData, 108, this.littleEndian);\n\n    this.scl_slope = nifti.Utils.getFloatAt(rawData, 112, this.littleEndian);\n    this.scl_inter = nifti.Utils.getFloatAt(rawData, 116, this.littleEndian);\n\n    this.slice_end = nifti.Utils.getShortAt(rawData, 120, this.littleEndian);\n    this.slice_code = nifti.Utils.getByteAt(rawData, 122);\n\n    this.xyzt_units = nifti.Utils.getByteAt(rawData, 123);\n\n    this.cal_max = nifti.Utils.getFloatAt(rawData, 124, this.littleEndian);\n    this.cal_min = nifti.Utils.getFloatAt(rawData, 128, this.littleEndian);\n\n    this.slice_duration = nifti.Utils.getFloatAt(rawData, 132, this.littleEndian);\n    this.toffset = nifti.Utils.getFloatAt(rawData, 136, this.littleEndian);\n\n    this.description = nifti.Utils.getStringAt(rawData, 148, 228);\n    this.aux_file = nifti.Utils.getStringAt(rawData, 228, 252);\n\n    this.qform_code = nifti.Utils.getShortAt(rawData, 252, this.littleEndian);\n    this.sform_code = nifti.Utils.getShortAt(rawData, 254, this.littleEndian);\n\n    this.quatern_b = nifti.Utils.getFloatAt(rawData, 256, this.littleEndian);\n    this.quatern_c = nifti.Utils.getFloatAt(rawData, 260, this.littleEndian);\n    this.quatern_d = nifti.Utils.getFloatAt(rawData, 264, this.littleEndian);\n    this.qoffset_x = nifti.Utils.getFloatAt(rawData, 268, this.littleEndian);\n    this.qoffset_y = nifti.Utils.getFloatAt(rawData, 272, this.littleEndian);\n    this.qoffset_z = nifti.Utils.getFloatAt(rawData, 276, this.littleEndian);\n\n    for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {\n        for (ctrIn = 0; ctrIn < 4; ctrIn += 1) {\n            index = 280 + (((ctrOut * 4) + ctrIn) * 4);\n            this.affine[ctrOut][ctrIn] = nifti.Utils.getFloatAt(rawData, index, this.littleEndian);\n        }\n    }\n\n    this.affine[3][0] = 0;\n    this.affine[3][1] = 0;\n    this.affine[3][2] = 0;\n    this.affine[3][3] = 1;\n\n    this.intent_name = nifti.Utils.getStringAt(rawData, 328, 344);\n    this.magic = nifti.Utils.getStringAt(rawData, 344, 348);\n\n    this.isHDR = (this.magic === nifti.NIFTI1.MAGIC_NUMBER2);\n\n    if (rawData.byteLength > nifti.NIFTI1.MAGIC_COOKIE) {\n        this.extensionFlag[0] = nifti.Utils.getByteAt(rawData, 348);\n        this.extensionFlag[1] = nifti.Utils.getByteAt(rawData, 348 + 1);\n        this.extensionFlag[2] = nifti.Utils.getByteAt(rawData, 348 + 2);\n        this.extensionFlag[3] = nifti.Utils.getByteAt(rawData, 348 + 3);\n\n        if (this.extensionFlag[0]) {\n            this.extensionSize = this.getExtensionSize(rawData);\n            this.extensionCode = this.getExtensionCode(rawData);\n        }\n    }\n};\n\n\n/**\n * Returns a formatted string of header fields.\n * @returns {string}\n */\nnifti.NIFTI1.prototype.toFormattedString = function () {\n    var fmt = nifti.Utils.formatNumber,\n        string = \"\";\n\n    string += (\"Dim Info = \" + this.dim_info + \"\\n\");\n\n    string += (\"Image Dimensions (1-8): \" +\n        this.dims[0] + \", \" +\n        this.dims[1] + \", \" +\n        this.dims[2] + \", \" +\n        this.dims[3] + \", \" +\n        this.dims[4] + \", \" +\n        this.dims[5] + \", \" +\n        this.dims[6] + \", \" +\n        this.dims[7] + \"\\n\");\n\n    string += (\"Intent Parameters (1-3): \" +\n        this.intent_p1 + \", \" +\n        this.intent_p2 + \", \" +\n        this.intent_p3) + \"\\n\";\n\n    string += (\"Intent Code = \" + this.intent_code + \"\\n\");\n    string += (\"Datatype = \" + this.datatypeCode +  \" (\" + this.getDatatypeCodeString(this.datatypeCode) + \")\\n\");\n    string += (\"Bits Per Voxel = \" + this.numBitsPerVoxel + \"\\n\");\n    string += (\"Slice Start = \" + this.slice_start + \"\\n\");\n    string += (\"Voxel Dimensions (1-8): \" +\n        fmt(this.pixDims[0]) + \", \" +\n        fmt(this.pixDims[1]) + \", \" +\n        fmt(this.pixDims[2]) + \", \" +\n        fmt(this.pixDims[3]) + \", \" +\n        fmt(this.pixDims[4]) + \", \" +\n        fmt(this.pixDims[5]) + \", \" +\n        fmt(this.pixDims[6]) + \", \" +\n        fmt(this.pixDims[7]) + \"\\n\");\n\n    string += (\"Image Offset = \" + this.vox_offset + \"\\n\");\n    string += (\"Data Scale:  Slope = \" + fmt(this.scl_slope) + \"  Intercept = \" + fmt(this.scl_inter) + \"\\n\");\n    string += (\"Slice End = \" + this.slice_end + \"\\n\");\n    string += (\"Slice Code = \" + this.slice_code + \"\\n\");\n    string += (\"Units Code = \" + this.xyzt_units + \" (\" + this.getUnitsCodeString(nifti.NIFTI1.SPATIAL_UNITS_MASK & this.xyzt_units) + \", \" + this.getUnitsCodeString(nifti.NIFTI1.TEMPORAL_UNITS_MASK & this.xyzt_units) + \")\\n\");\n    string += (\"Display Range:  Max = \" + fmt(this.cal_max) + \"  Min = \" + fmt(this.cal_min) + \"\\n\");\n    string += (\"Slice Duration = \" + this.slice_duration + \"\\n\");\n    string += (\"Time Axis Shift = \" + this.toffset + \"\\n\");\n    string += (\"Description: \\\"\" + this.description + \"\\\"\\n\");\n    string += (\"Auxiliary File: \\\"\" + this.aux_file + \"\\\"\\n\");\n    string += (\"Q-Form Code = \" + this.qform_code + \" (\" + this.getTransformCodeString(this.qform_code) + \")\\n\");\n    string += (\"S-Form Code = \" + this.sform_code + \" (\" + this.getTransformCodeString(this.sform_code) + \")\\n\");\n    string += (\"Quaternion Parameters:  \" +\n        \"b = \" + fmt(this.quatern_b) + \"  \" +\n        \"c = \" + fmt(this.quatern_c) + \"  \" +\n        \"d = \" + fmt(this.quatern_d) + \"\\n\");\n\n    string += (\"Quaternion Offsets:  \" +\n        \"x = \" + this.qoffset_x + \"  \" +\n        \"y = \" + this.qoffset_y + \"  \" +\n        \"z = \" + this.qoffset_z + \"\\n\");\n\n    string += (\"S-Form Parameters X: \" +\n        fmt(this.affine[0][0]) + \", \" +\n        fmt(this.affine[0][1]) + \", \" +\n        fmt(this.affine[0][2]) + \", \" +\n        fmt(this.affine[0][3]) + \"\\n\");\n\n    string += (\"S-Form Parameters Y: \" +\n        fmt(this.affine[1][0]) + \", \" +\n        fmt(this.affine[1][1]) + \", \" +\n        fmt(this.affine[1][2]) + \", \" +\n        fmt(this.affine[1][3]) + \"\\n\");\n\n    string += (\"S-Form Parameters Z: \" +\n        fmt(this.affine[2][0]) + \", \" +\n        fmt(this.affine[2][1]) + \", \" +\n        fmt(this.affine[2][2]) + \", \" +\n        fmt(this.affine[2][3]) + \"\\n\");\n\n    string += (\"Intent Name: \\\"\" + this.intent_name + \"\\\"\\n\");\n\n    if (this.extensionFlag[0]) {\n        string += (\"Extension: Size = \" + this.extensionSize + \"  Code = \" + this.extensionCode + \"\\n\");\n\n    }\n\n    return string;\n};\n\n\n/**\n * Returns a human-readable string of datatype.\n * @param {number} code\n * @returns {string}\n */\nnifti.NIFTI1.prototype.getDatatypeCodeString = function (code) {\n    if (code === nifti.NIFTI1.TYPE_UINT8) {\n        return \"1-Byte Unsigned Integer\";\n    } else if (code === nifti.NIFTI1.TYPE_INT16) {\n        return \"2-Byte Signed Integer\";\n    } else if (code === nifti.NIFTI1.TYPE_INT32) {\n        return \"4-Byte Signed Integer\";\n    } else if (code === nifti.NIFTI1.TYPE_FLOAT32) {\n        return \"4-Byte Float\";\n    } else if (code === nifti.NIFTI1.TYPE_FLOAT64) {\n        return \"8-Byte Float\";\n    } else if (code === nifti.NIFTI1.TYPE_RGB24) {\n        return \"RGB\";\n    } else if (code === nifti.NIFTI1.TYPE_INT8) {\n        return \"1-Byte Signed Integer\";\n    } else if (code === nifti.NIFTI1.TYPE_UINT16) {\n        return \"2-Byte Unsigned Integer\";\n    } else if (code === nifti.NIFTI1.TYPE_UINT32) {\n        return \"4-Byte Unsigned Integer\";\n    } else if (code === nifti.NIFTI1.TYPE_INT64) {\n        return \"8-Byte Signed Integer\";\n    } else if (code === nifti.NIFTI1.TYPE_UINT64) {\n        return \"8-Byte Unsigned Integer\";\n    } else {\n        return \"Unknown\";\n    }\n};\n\n\n/**\n * Returns a human-readable string of transform type.\n * @param {number} code\n * @returns {string}\n */\nnifti.NIFTI1.prototype.getTransformCodeString = function (code) {\n    if (code === nifti.NIFTI1.XFORM_SCANNER_ANAT) {\n        return \"Scanner\";\n    } else if (code === nifti.NIFTI1.XFORM_ALIGNED_ANAT) {\n        return \"Aligned\";\n    } else if (code === nifti.NIFTI1.XFORM_TALAIRACH) {\n        return \"Talairach\";\n    } else if (code === nifti.NIFTI1.XFORM_MNI_152) {\n        return \"MNI\";\n    } else {\n        return \"Unknown\";\n    }\n};\n\n\n/**\n * Returns a human-readable string of spatial and temporal units.\n * @param {number} code\n * @returns {string}\n */\nnifti.NIFTI1.prototype.getUnitsCodeString = function (code) {\n    if (code === nifti.NIFTI1.UNITS_METER) {\n        return \"Meters\";\n    } else if (code === nifti.NIFTI1.UNITS_MM) {\n        return \"Millimeters\";\n    } else if (code === nifti.NIFTI1.UNITS_MICRON) {\n        return \"Microns\";\n    } else if (code === nifti.NIFTI1.UNITS_SEC) {\n        return \"Seconds\";\n    } else if (code === nifti.NIFTI1.UNITS_MSEC) {\n        return \"Milliseconds\";\n    } else if (code === nifti.NIFTI1.UNITS_USEC) {\n        return \"Microseconds\";\n    } else if (code === nifti.NIFTI1.UNITS_HZ) {\n        return \"Hz\";\n    } else if (code === nifti.NIFTI1.UNITS_PPM) {\n        return \"PPM\";\n    } else if (code === nifti.NIFTI1.UNITS_RADS) {\n        return \"Rads\";\n    } else {\n        return \"Unknown\";\n    }\n};\n\n\n/**\n * Returns the qform matrix.\n * @returns {Array.<Array.<number>>}\n */\nnifti.NIFTI1.prototype.getQformMat = function () {\n    return this.convertNiftiQFormToNiftiSForm(this.quatern_b, this.quatern_c, this.quatern_d, this.qoffset_x,\n        this.qoffset_y, this.qoffset_z, this.pixDims[1], this.pixDims[2], this.pixDims[3], this.pixDims[0]);\n};\n\n\n\n/**\n * Converts qform to an affine.  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)\n * @param {number} qb\n * @param {number} qc\n * @param {number} qd\n * @param {number} qx\n * @param {number} qy\n * @param {number} qz\n * @param {number} dx\n * @param {number} dy\n * @param {number} dz\n * @param {number} qfac\n * @returns {Array.<Array.<number>>}\n */\nnifti.NIFTI1.prototype.convertNiftiQFormToNiftiSForm = function (qb, qc, qd, qx, qy, qz, dx, dy, dz,\n                                                qfac) {\n    var R = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],\n        a,\n        b = qb,\n        c = qc,\n        d = qd,\n        xd,\n        yd,\n        zd;\n\n    // last row is always [ 0 0 0 1 ]\n    R[3][0] = R[3][1] = R[3][2] = 0.0;\n    R[3][3] = 1.0;\n\n    // compute a parameter from b,c,d\n    a = 1.0 - (b * b + c * c + d * d);\n    if (a < 0.0000001) {                   /* special case */\n\n        a = 1.0 / Math.sqrt(b * b + c * c + d * d);\n        b *= a;\n        c *= a;\n        d *= a;        /* normalize (b,c,d) vector */\n        a = 0.0;                        /* a = 0 ==> 180 degree rotation */\n    } else {\n\n        a = Math.sqrt(a);                     /* angle = 2*arccos(a) */\n    }\n\n    // load rotation matrix, including scaling factors for voxel sizes\n    xd = (dx > 0.0) ? dx : 1.0;       /* make sure are positive */\n    yd = (dy > 0.0) ? dy : 1.0;\n    zd = (dz > 0.0) ? dz : 1.0;\n\n    if (qfac < 0.0) {\n        zd = -zd;         /* left handedness? */\n    }\n\n    R[0][0] =       (a * a + b * b - c * c - d * d) * xd;\n    R[0][1] = 2.0 * (b * c - a * d) * yd;\n    R[0][2] = 2.0 * (b * d + a * c) * zd;\n    R[1][0] = 2.0 * (b * c + a * d) * xd;\n    R[1][1] =       (a * a + c * c - b * b - d * d) * yd;\n    R[1][2] = 2.0 * (c * d - a * b) * zd;\n    R[2][0] = 2.0 * (b * d - a * c) * xd;\n    R[2][1] = 2.0 * (c * d + a * b) * yd;\n    R[2][2] =       (a * a + d * d - c * c - b * b) * zd;\n\n    // load offsets\n    R[0][3] = qx;\n    R[1][3] = qy;\n    R[2][3] = qz;\n\n    return R;\n};\n\n\n\n/**\n * Converts sform to an orientation string (e.g., XYZ+--).  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)\n * @param {Array.<Array.<number>>} R\n * @returns {string}\n */\nnifti.NIFTI1.prototype.convertNiftiSFormToNEMA = function (R) {\n    var xi, xj, xk, yi, yj, yk, zi, zj, zk, val, detQ, detP, i, j, k, p, q, r, ibest, jbest, kbest, pbest, qbest, rbest,\n        M, vbest, Q, P, iChar, jChar, kChar, iSense, jSense, kSense;\n    k = 0;\n\n    Q = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\n    P = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\n\n    //if( icod == NULL || jcod == NULL || kcod == NULL ) return ; /* bad */\n\n    //*icod = *jcod = *kcod = 0 ; /* this.errorMessage returns, if sh*t happens */\n\n    /* load column vectors for each (i,j,k) direction from matrix */\n\n    /*-- i axis --*/ /*-- j axis --*/ /*-- k axis --*/\n\n    xi = R[0][0];\n    xj = R[0][1];\n    xk = R[0][2];\n\n    yi = R[1][0];\n    yj = R[1][1];\n    yk = R[1][2];\n\n    zi = R[2][0];\n    zj = R[2][1];\n    zk = R[2][2];\n\n    /* normalize column vectors to get unit vectors along each ijk-axis */\n\n    /* normalize i axis */\n    val = Math.sqrt(xi * xi + yi * yi + zi * zi);\n    if (val === 0.0) {  /* stupid input */\n        return null;\n    }\n\n    xi /= val;\n    yi /= val;\n    zi /= val;\n\n    /* normalize j axis */\n    val = Math.sqrt(xj * xj + yj * yj + zj * zj);\n    if (val === 0.0) {  /* stupid input */\n        return null;\n    }\n\n    xj /= val;\n    yj /= val;\n    zj /= val;\n\n    /* orthogonalize j axis to i axis, if needed */\n    val = xi * xj + yi * yj + zi * zj;    /* dot product between i and j */\n    if (Math.abs(val) > 1.E-4) {\n        xj -= val * xi;\n        yj -= val * yi;\n        zj -= val * zi;\n        val = Math.sqrt(xj * xj + yj * yj + zj * zj);  /* must renormalize */\n        if (val === 0.0) {              /* j was parallel to i? */\n            return null;\n        }\n        xj /= val;\n        yj /= val;\n        zj /= val;\n    }\n\n    /* normalize k axis; if it is zero, make it the cross product i x j */\n    val = Math.sqrt(xk * xk + yk * yk + zk * zk);\n    if (val === 0.0) {\n        xk = yi * zj - zi * yj;\n        yk = zi * xj - zj * xi;\n        zk = xi * yj - yi * xj;\n    } else {\n        xk /= val;\n        yk /= val;\n        zk /= val;\n    }\n\n    /* orthogonalize k to i */\n    val = xi * xk + yi * yk + zi * zk;    /* dot product between i and k */\n    if (Math.abs(val) > 1.E-4) {\n        xk -= val * xi;\n        yk -= val * yi;\n        zk -= val * zi;\n        val = Math.sqrt(xk * xk + yk * yk + zk * zk);\n        if (val === 0.0) {    /* bad */\n            return null;\n        }\n        xk /= val;\n        yk /= val;\n        zk /= val;\n    }\n\n    /* orthogonalize k to j */\n    val = xj * xk + yj * yk + zj * zk;    /* dot product between j and k */\n    if (Math.abs(val) > 1.e-4) {\n        xk -= val * xj;\n        yk -= val * yj;\n        zk -= val * zj;\n        val = Math.sqrt(xk * xk + yk * yk + zk * zk);\n        if (val === 0.0) {     /* bad */\n            return null;\n        }\n        xk /= val;\n        yk /= val;\n        zk /= val;\n    }\n\n    Q[0][0] = xi;\n    Q[0][1] = xj;\n    Q[0][2] = xk;\n    Q[1][0] = yi;\n    Q[1][1] = yj;\n    Q[1][2] = yk;\n    Q[2][0] = zi;\n    Q[2][1] = zj;\n    Q[2][2] = zk;\n\n    /* at this point, Q is the rotation matrix from the (i,j,k) to (x,y,z) axes */\n\n    detQ = this.nifti_mat33_determ(Q);\n    if (detQ === 0.0) { /* shouldn't happen unless user is a DUFIS */\n        return null;\n    }\n\n    /* Build and test all possible +1/-1 coordinate permutation matrices P;\n     then find the P such that the rotation matrix M=PQ is closest to the\n     identity, in the sense of M having the smallest total rotation angle. */\n\n    /* Despite the formidable looking 6 nested loops, there are\n     only 3*3*3*2*2*2 = 216 passes, which will run very quickly. */\n\n    vbest = -666.0;\n    ibest = pbest = qbest = rbest = 1;\n    jbest = 2;\n    kbest = 3;\n\n    for (i = 1; i <= 3; i += 1) {     /* i = column number to use for row #1 */\n        for (j = 1; j <= 3; j += 1) {    /* j = column number to use for row #2 */\n            if (i !== j) {\n                for (k = 1; k <= 3; k += 1) {  /* k = column number to use for row #3 */\n                    if (!(i === k || j === k)) {\n                        P[0][0] = P[0][1] = P[0][2] = P[1][0] = P[1][1] = P[1][2] = P[2][0] = P[2][1] = P[2][2] = 0.0;\n                        for (p = -1; p <= 1; p += 2) {    /* p,q,r are -1 or +1      */\n                            for (q = -1; q <= 1; q += 2) {   /* and go into rows #1,2,3 */\n                                for (r = -1; r <= 1; r += 2) {\n                                    P[0][i - 1] = p;\n                                    P[1][j - 1] = q;\n                                    P[2][k - 1] = r;\n                                    detP = this.nifti_mat33_determ(P);           /* sign of permutation */\n                                    if ((detP * detQ) > 0.0) {\n                                        M = this.nifti_mat33_mul(P, Q);\n\n                                        /* angle of M rotation = 2.0*acos(0.5*sqrt(1.0+trace(M)))       */\n                                        /* we want largest trace(M) == smallest angle == M nearest to I */\n\n                                        val = M[0][0] + M[1][1] + M[2][2]; /* trace */\n                                        if (val > vbest) {\n                                            vbest = val;\n                                            ibest = i;\n                                            jbest = j;\n                                            kbest = k;\n                                            pbest = p;\n                                            qbest = q;\n                                            rbest = r;\n                                        }\n                                    }  /* doesn't match sign of Q */\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /* At this point ibest is 1 or 2 or 3; pbest is -1 or +1; etc.\n\n     The matrix P that corresponds is the best permutation approximation\n     to Q-inverse; that is, P (approximately) takes (x,y,z) coordinates\n     to the (i,j,k) axes.\n\n     For example, the first row of P (which contains pbest in column ibest)\n     determines the way the i axis points relative to the anatomical\n     (x,y,z) axes.  If ibest is 2, then the i axis is along the y axis,\n     which is direction P2A (if pbest > 0) or A2P (if pbest < 0).\n\n     So, using ibest and pbest, we can assign the output code for\n     the i axis.  Mutatis mutandis for the j and k axes, of course. */\n\n    iChar = jChar = kChar = iSense = jSense = kSense = 0;\n\n    switch (ibest * pbest) {\n        case 1: /*i = NIFTI_L2R*/\n            iChar = 'X';\n            iSense = '+';\n            break;\n        case -1: /*i = NIFTI_R2L*/\n            iChar = 'X';\n            iSense = '-';\n            break;\n        case 2: /*i = NIFTI_P2A*/\n            iChar = 'Y';\n            iSense = '+';\n            break;\n        case -2: /*i = NIFTI_A2P*/\n            iChar = 'Y';\n            iSense = '-';\n            break;\n        case 3: /*i = NIFTI_I2S*/\n            iChar = 'Z';\n            iSense = '+';\n            break;\n        case -3: /*i = NIFTI_S2I*/\n            iChar = 'Z';\n            iSense = '-';\n            break;\n    }\n\n    switch (jbest * qbest) {\n        case 1: /*j = NIFTI_L2R*/\n            jChar = 'X';\n            jSense = '+';\n            break;\n        case -1: /*j = NIFTI_R2L*/\n            jChar = 'X';\n            jSense = '-';\n            break;\n        case 2: /*j = NIFTI_P2A*/\n            jChar = 'Y';\n            jSense = '+';\n            break;\n        case -2: /*j = NIFTI_A2P*/\n            jChar = 'Y';\n            jSense = '-';\n            break;\n        case 3: /*j = NIFTI_I2S*/\n            jChar = 'Z';\n            jSense = '+';\n            break;\n        case -3: /*j = NIFTI_S2I*/\n            jChar = 'Z';\n            jSense = '-';\n            break;\n    }\n\n    switch (kbest * rbest) {\n        case 1: /*k = NIFTI_L2R*/\n            kChar = 'X';\n            kSense = '+';\n            break;\n        case -1: /*k = NIFTI_R2L*/\n            kChar = 'X';\n            kSense = '-';\n            break;\n        case 2: /*k = NIFTI_P2A*/\n            kChar = 'Y';\n            kSense = '+';\n            break;\n        case -2: /*k = NIFTI_A2P*/\n            kChar = 'Y';\n            kSense = '-';\n            break;\n        case 3: /*k = NIFTI_I2S*/\n            kChar = 'Z';\n            kSense = '+';\n            break;\n        case -3: /*k = NIFTI_S2I*/\n            kChar = 'Z';\n            kSense = '-';\n            break;\n    }\n\n    return (iChar + jChar + kChar + iSense + jSense + kSense);\n};\n\n\n\nnifti.NIFTI1.prototype.nifti_mat33_mul = function (A, B) {\n    var C = [[0, 0, 0], [0, 0, 0], [0, 0, 0]],\n        i,\n        j;\n\n    for (i = 0; i < 3; i += 1) {\n        for (j = 0; j < 3; j += 1) {\n            C[i][j] =  A[i][0] * B[0][j]  + A[i][1] * B[1][j] + A[i][2] * B[2][j];\n        }\n    }\n\n    return C;\n};\n\n\n\nnifti.NIFTI1.prototype.nifti_mat33_determ = function (R) {\n    var r11, r12, r13, r21, r22, r23, r31, r32, r33;\n    /*  INPUT MATRIX:  */\n    r11 = R[0][0];\n    r12 = R[0][1];\n    r13 = R[0][2];\n    r21 = R[1][0];\n    r22 = R[1][1];\n    r23 = R[1][2];\n    r31 = R[2][0];\n    r32 = R[2][1];\n    r33 = R[2][2];\n\n    return (r11 * r22 * r33 - r11 * r32 * r23 - r21 * r12 * r33 + r21 * r32 * r13 + r31 * r12 * r23 - r31 * r22 * r13);\n};\n\n\n/**\n * Returns the byte index of the extension.\n * @returns {number}\n */\nnifti.NIFTI1.prototype.getExtensionLocation = function() {\n    return nifti.NIFTI1.MAGIC_COOKIE + 4;\n};\n\n\n/**\n * Returns the extension size.\n * @param {DataView} data\n * @returns {number}\n */\nnifti.NIFTI1.prototype.getExtensionSize = function(data) {\n    return nifti.Utils.getIntAt(data, this.getExtensionLocation(), this.littleEndian);\n};\n\n\n\n/**\n * Returns the extension code.\n * @param {DataView} data\n * @returns {number}\n */\nnifti.NIFTI1.prototype.getExtensionCode = function(data) {\n    return nifti.Utils.getIntAt(data, this.getExtensionLocation() + 4, this.littleEndian);\n};\n\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = nifti.NIFTI1;\n}\n","'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n","'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc ^= -1;\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n","// String encode/decode helpers\n'use strict';\n\n\nvar utils = require('./common');\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function (buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function (str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i = 0, len = buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function (buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  //Z_MEM_ERROR:     -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n","var isObject = require('./isObject'),\n    now = require('./now'),\n    toNumber = require('./toNumber');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {RPC} from 'neuroglancer/worker_rpc';\n\nexport var rpc = new RPC(self);\n(<any>self).rpc = rpc;\n","var root = require('./_root');\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","var isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","\n/*jslint browser: true, node: true */\n/*global */\n\n\"use strict\";\n\n/*** Imports ***/\n\nvar nifti = nifti || {};\nnifti.Utils = nifti.Utils || ((typeof require !== 'undefined') ? require('./utilities.js') : null);\nnifti.NIFTI1 = nifti.NIFTI1 || ((typeof require !== 'undefined') ? require('./nifti1.js') : null);\n\n\n/*** Constructor ***/\n\n/**\n * The NIFTI2 constructor.\n * @constructor\n * @property {boolean} littleEndian\n * @property {number} dim_info\n * @property {number[]} dims - image dimensions\n * @property {number} intent_p1\n * @property {number} intent_p2\n * @property {number} intent_p3\n * @property {number} intent_code\n * @property {number} datatypeCode\n * @property {number} numBitsPerVoxel\n * @property {number} slice_start\n * @property {number} slice_end\n * @property {number} slice_code\n * @property {number[]} pixDims - voxel dimensions\n * @property {number} vox_offset\n * @property {number} scl_slope\n * @property {number} scl_inter\n * @property {number} xyzt_units\n * @property {number} cal_max\n * @property {number} cal_min\n * @property {number} slice_duration\n * @property {number} toffset\n * @property {string} description\n * @property {string} aux_file\n * @property {string} intent_name\n * @property {number} qform_code\n * @property {number} sform_code\n * @property {number} quatern_b\n * @property {number} quatern_c\n * @property {number} quatern_d\n * @property {number} quatern_x\n * @property {number} quatern_y\n * @property {number} quatern_z\n * @property {Array.<Array.<number>>} affine\n * @property {string} magic\n * @property {number[]} extensionFlag\n * @type {Function}\n */\nnifti.NIFTI2 = nifti.NIFTI2 || function () {\n    this.littleEndian = false;\n    this.dim_info = 0;\n    this.dims = [];\n    this.intent_p1 = 0;\n    this.intent_p2 = 0;\n    this.intent_p3 = 0;\n    this.intent_code = 0;\n    this.datatypeCode = 0;\n    this.numBitsPerVoxel = 0;\n    this.slice_start = 0;\n    this.slice_end = 0;\n    this.slice_code = 0;\n    this.pixDims = [];\n    this.vox_offset = 0;\n    this.scl_slope = 1;\n    this.scl_inter = 0;\n    this.xyzt_units = 0;\n    this.cal_max = 0;\n    this.cal_min = 0;\n    this.slice_duration = 0;\n    this.toffset = 0;\n    this.description = \"\";\n    this.aux_file = \"\";\n    this.intent_name = \"\";\n    this.qform_code = 0;\n    this.sform_code = 0;\n    this.quatern_b = 0;\n    this.quatern_c = 0;\n    this.quatern_d = 0;\n    this.qoffset_x = 0;\n    this.qoffset_y = 0;\n    this.qoffset_z = 0;\n    this.affine = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];\n    this.magic = 0;\n    this.extensionFlag = [0, 0, 0, 0];\n};\n\n\n\n/*** Static Pseudo-constants ***/\n\nnifti.NIFTI2.MAGIC_COOKIE = 540;\nnifti.NIFTI2.MAGIC_NUMBER_LOCATION = 4;\nnifti.NIFTI2.MAGIC_NUMBER = [0x6E, 0x2B, 0x32, 0, 0x0D, 0x0A, 0x1A, 0x0A];  // n+2\\0\n\n\n\n/*** Prototype Methods ***/\n\n/**\n * Reads the header data.\n * @param {ArrayBuffer} data\n */\nnifti.NIFTI2.prototype.readHeader = function (data) {\n    var rawData = new DataView(data),\n        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian),\n        ctr,\n        ctrOut,\n        ctrIn,\n        index,\n        array;\n\n    if (magicCookieVal !== nifti.NIFTI2.MAGIC_COOKIE) {  // try as little endian\n        this.littleEndian = true;\n        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian);\n    }\n\n    if (magicCookieVal !== nifti.NIFTI2.MAGIC_COOKIE) {\n        throw new Error(\"This does not appear to be a NIFTI file!\");\n    }\n\n    this.datatypeCode = nifti.Utils.getShortAt(rawData, 12, this.littleEndian);\n    this.numBitsPerVoxel = nifti.Utils.getShortAt(rawData, 14, this.littleEndian);\n\n    for (ctr = 0; ctr < 8; ctr += 1) {\n        index = 16 + (ctr * 8);\n        this.dims[ctr] = nifti.Utils.getLongAt(rawData, index, this.littleEndian);\n    }\n\n    this.intent_p1 = nifti.Utils.getDoubleAt(rawData, 80, this.littleEndian);\n    this.intent_p2 = nifti.Utils.getDoubleAt(rawData, 88, this.littleEndian);\n    this.intent_p3 = nifti.Utils.getDoubleAt(rawData, 96, this.littleEndian);\n\n    for (ctr = 0; ctr < 8; ctr += 1) {\n        index = 104 + (ctr * 8);\n        this.pixDims[ctr] = nifti.Utils.getDoubleAt(rawData, index, this.littleEndian);\n    }\n\n    this.vox_offset = nifti.Utils.getLongAt(rawData, 168, this.littleEndian);\n\n    this.scl_slope = nifti.Utils.getDoubleAt(rawData, 176, this.littleEndian);\n    this.scl_inter = nifti.Utils.getDoubleAt(rawData, 184, this.littleEndian);\n\n    this.cal_max = nifti.Utils.getDoubleAt(rawData, 192, this.littleEndian);\n    this.cal_min = nifti.Utils.getDoubleAt(rawData, 200, this.littleEndian);\n\n    this.slice_duration = nifti.Utils.getDoubleAt(rawData, 208, this.littleEndian);\n\n    this.toffset = nifti.Utils.getDoubleAt(rawData, 216, this.littleEndian);\n\n    this.slice_start = nifti.Utils.getLongAt(rawData, 224, this.littleEndian);\n    this.slice_end = nifti.Utils.getLongAt(rawData, 232, this.littleEndian);\n\n    this.description = nifti.Utils.getStringAt(rawData, 240, 240 + 80);\n    this.aux_file = nifti.Utils.getStringAt(rawData, 320, 320 + 24);\n\n    this.qform_code = nifti.Utils.getIntAt(rawData, 344, this.littleEndian);\n    this.sform_code = nifti.Utils.getIntAt(rawData, 348, this.littleEndian);\n\n    this.quatern_b = nifti.Utils.getDoubleAt(rawData, 352, this.littleEndian);\n    this.quatern_c = nifti.Utils.getDoubleAt(rawData, 360, this.littleEndian);\n    this.quatern_d = nifti.Utils.getDoubleAt(rawData, 368, this.littleEndian);\n    this.qoffset_x = nifti.Utils.getDoubleAt(rawData, 376, this.littleEndian);\n    this.qoffset_y = nifti.Utils.getDoubleAt(rawData, 384, this.littleEndian);\n    this.qoffset_z = nifti.Utils.getDoubleAt(rawData, 392, this.littleEndian);\n\n    for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {\n        for (ctrIn = 0; ctrIn < 4; ctrIn += 1) {\n            index = 400 + (((ctrOut * 4) + ctrIn) * 8);\n            this.affine[ctrOut][ctrIn] = nifti.Utils.getDoubleAt(rawData, index, this.littleEndian);\n        }\n    }\n\n    this.affine[3][0] = 0;\n    this.affine[3][1] = 0;\n    this.affine[3][2] = 0;\n    this.affine[3][3] = 1;\n\n    this.slice_code = nifti.Utils.getIntAt(rawData, 496, this.littleEndian);\n    this.xyzt_units = nifti.Utils.getIntAt(rawData, 500, this.littleEndian);\n    this.intent_code = nifti.Utils.getIntAt(rawData, 504, this.littleEndian);\n    this.intent_name = nifti.Utils.getStringAt(rawData, 508, 508 + 16);\n\n    this.dim_info = nifti.Utils.getByteAt(rawData, 524);\n\n    if (rawData.byteLength > nifti.NIFTI2.MAGIC_COOKIE) {\n        this.extensionFlag[0] = nifti.Utils.getByteAt(rawData, 540);\n        this.extensionFlag[1] = nifti.Utils.getByteAt(rawData, 540 + 1);\n        this.extensionFlag[2] = nifti.Utils.getByteAt(rawData, 540 + 2);\n        this.extensionFlag[3] = nifti.Utils.getByteAt(rawData, 540 + 3);\n\n        if (this.extensionFlag[0]) {\n            this.extensionSize = this.getExtensionSize(rawData);\n            this.extensionCode = this.getExtensionCode(rawData);\n        }\n    }\n};\n\n\n\n/**\n * Returns a formatted string of header fields.\n * @returns {string}\n */\nnifti.NIFTI2.prototype.toFormattedString = function () {\n    var fmt = nifti.Utils.formatNumber,\n        string = \"\";\n\n    string += (\"Datatype = \" +  + this.datatypeCode + \" (\" + this.getDatatypeCodeString(this.datatypeCode) + \")\\n\");\n    string += (\"Bits Per Voxel = \" + \" = \" + this.numBitsPerVoxel + \"\\n\");\n    string += (\"Image Dimensions\" + \" (1-8): \" +\n        this.dims[0] + \", \" +\n        this.dims[1] + \", \" +\n        this.dims[2] + \", \" +\n        this.dims[3] + \", \" +\n        this.dims[4] + \", \" +\n        this.dims[5] + \", \" +\n        this.dims[6] + \", \" +\n        this.dims[7] + \"\\n\");\n\n    string += (\"Intent Parameters (1-3): \" +\n        this.intent_p1 + \", \" +\n        this.intent_p2 + \", \" +\n        this.intent_p3) + \"\\n\";\n\n    string += (\"Voxel Dimensions (1-8): \" +\n        fmt(this.pixDims[0]) + \", \" +\n        fmt(this.pixDims[1]) + \", \" +\n        fmt(this.pixDims[2]) + \", \" +\n        fmt(this.pixDims[3]) + \", \" +\n        fmt(this.pixDims[4]) + \", \" +\n        fmt(this.pixDims[5]) + \", \" +\n        fmt(this.pixDims[6]) + \", \" +\n        fmt(this.pixDims[7]) + \"\\n\");\n\n    string += (\"Image Offset = \" + this.vox_offset + \"\\n\");\n    string += (\"Data Scale:  Slope = \" + fmt(this.scl_slope) + \"  Intercept = \" + fmt(this.scl_inter) + \"\\n\");\n    string += (\"Display Range:  Max = \" + fmt(this.cal_max) + \"  Min = \" + fmt(this.cal_min) + \"\\n\");\n    string += (\"Slice Duration = \" + this.slice_duration + \"\\n\");\n    string += (\"Time Axis Shift = \" + this.toffset + \"\\n\");\n    string += (\"Slice Start = \" + this.slice_start + \"\\n\");\n    string += (\"Slice End = \" + this.slice_end + \"\\n\");\n    string += (\"Description: \\\"\" + this.description + \"\\\"\\n\");\n    string += (\"Auxiliary File: \\\"\" + this.aux_file + \"\\\"\\n\");\n    string += (\"Q-Form Code = \" + this.qform_code + \" (\" + this.getTransformCodeString(this.qform_code) + \")\\n\");\n    string += (\"S-Form Code = \" + this.sform_code + \" (\" + this.getTransformCodeString(this.sform_code) + \")\\n\");\n    string += (\"Quaternion Parameters:  \" +\n    \"b = \" + fmt(this.quatern_b) + \"  \" +\n    \"c = \" + fmt(this.quatern_c) + \"  \" +\n    \"d = \" + fmt(this.quatern_d) + \"\\n\");\n\n    string += (\"Quaternion Offsets:  \" +\n    \"x = \" + this.qoffset_x + \"  \" +\n    \"y = \" + this.qoffset_y + \"  \" +\n    \"z = \" + this.qoffset_z + \"\\n\");\n\n    string += (\"S-Form Parameters X: \" +\n    fmt(this.affine[0][0]) + \", \" +\n    fmt(this.affine[0][1]) + \", \" +\n    fmt(this.affine[0][2]) + \", \" +\n    fmt(this.affine[0][3]) + \"\\n\");\n\n    string += (\"S-Form Parameters Y: \" +\n    fmt(this.affine[1][0]) + \", \" +\n    fmt(this.affine[1][1]) + \", \" +\n    fmt(this.affine[1][2]) + \", \" +\n    fmt(this.affine[1][3]) + \"\\n\");\n\n    string += (\"S-Form Parameters Z: \" +\n    fmt(this.affine[2][0]) + \", \" +\n    fmt(this.affine[2][1]) + \", \" +\n    fmt(this.affine[2][2]) + \", \" +\n    fmt(this.affine[2][3]) + \"\\n\");\n\n    string += (\"Slice Code = \" + this.slice_code + \"\\n\");\n    string += (\"Units Code = \" + this.xyzt_units + \" (\" + this.getUnitsCodeString(nifti.NIFTI1.SPATIAL_UNITS_MASK & this.xyzt_units) + \", \" + this.getUnitsCodeString(nifti.NIFTI1.TEMPORAL_UNITS_MASK & this.xyzt_units) + \")\\n\");\n    string += (\"Intent Code = \" + this.intent_code + \"\\n\");\n    string += (\"Intent Name: \\\"\" + this.intent_name + \"\\\"\\n\");\n\n    string += (\"Dim Info = \" + this.dim_info + \"\\n\");\n\n    return string;\n};\n\n\n\n/**\n * Returns the byte index of the extension.\n * @returns {number}\n */\nnifti.NIFTI2.prototype.getExtensionLocation = function() {\n    return nifti.NIFTI2.MAGIC_COOKIE + 4;\n};\n\n\n\n/**\n * Returns the extension size.\n * @param {DataView} data\n * @returns {number}\n */\nnifti.NIFTI2.prototype.getExtensionSize = nifti.NIFTI1.prototype.getExtensionSize;\n\n\n\n/**\n * Returns the extension code.\n * @param {DataView} data\n * @returns {number}\n */\nnifti.NIFTI2.prototype.getExtensionCode = nifti.NIFTI1.prototype.getExtensionCode;\n\n\n\n/**\n * Returns a human-readable string of datatype.\n * @param {number} code\n * @returns {string}\n */\nnifti.NIFTI2.prototype.getDatatypeCodeString = nifti.NIFTI1.prototype.getDatatypeCodeString;\n\n\n\n/**\n * Returns a human-readable string of transform type.\n * @param {number} code\n * @returns {string}\n */\nnifti.NIFTI2.prototype.getTransformCodeString = nifti.NIFTI1.prototype.getTransformCodeString;\n\n\n\n/**\n * Returns a human-readable string of spatial and temporal units.\n * @param {number} code\n * @returns {string}\n */\nnifti.NIFTI2.prototype.getUnitsCodeString = nifti.NIFTI1.prototype.getUnitsCodeString;\n\n\n\n/**\n * Returns the qform matrix.\n * @returns {Array.<Array.<number>>}\n */\nnifti.NIFTI2.prototype.getQformMat = nifti.NIFTI1.prototype.getQformMat;\n\n\n\n/**\n * Converts qform to an affine.  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)\n * @param {number} qb\n * @param {number} qc\n * @param {number} qd\n * @param {number} qx\n * @param {number} qy\n * @param {number} qz\n * @param {number} dx\n * @param {number} dy\n * @param {number} dz\n * @param {number} qfac\n * @returns {Array.<Array.<number>>}\n */\nnifti.NIFTI2.prototype.convertNiftiQFormToNiftiSForm = nifti.NIFTI1.prototype.convertNiftiQFormToNiftiSForm;\n\n\n\n/**\n * Converts sform to an orientation string (e.g., XYZ+--).  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)\n * @param {Array.<Array.<number>>} R\n * @returns {string}\n */\nnifti.NIFTI2.prototype.convertNiftiSFormToNEMA = nifti.NIFTI1.prototype.convertNiftiSFormToNEMA;\n\n\n\nnifti.NIFTI2.prototype.nifti_mat33_mul = nifti.NIFTI1.prototype.nifti_mat33_mul;\n\n\n\nnifti.NIFTI2.prototype.nifti_mat33_determ = nifti.NIFTI1.prototype.nifti_mat33_determ;\n\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = nifti.NIFTI2;\n}\n","// Top level file is just a mixin of submodules & constants\n'use strict';\n\nvar assign    = require('./lib/utils/common').assign;\n\nvar deflate   = require('./lib/deflate');\nvar inflate   = require('./lib/inflate');\nvar constants = require('./lib/zlib/constants');\n\nvar pako = {};\n\nassign(pako, deflate, inflate, constants);\n\nmodule.exports = pako;\n","'use strict';\n\n\nvar zlib_deflate = require('./zlib/deflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\n\nvar toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH      = 0;\nvar Z_FINISH        = 4;\n\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_SYNC_FLUSH    = 2;\n\nvar Z_DEFAULT_COMPRESSION = -1;\n\nvar Z_DEFAULT_STRATEGY    = 0;\n\nvar Z_DEFLATED  = 8;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  if (!(this instanceof Deflate)) return new Deflate(options);\n\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    var dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n\n  if (this.ended) { return false; }\n\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n  // Finalize on the last chunk.\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === Z_SYNC_FLUSH) {\n    this.onEnd(Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils   = require('../utils/common');\nvar trees   = require('./trees');\nvar adler32 = require('./adler32');\nvar crc32   = require('./crc32');\nvar msg     = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only(s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n        );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nfunction deflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var s;\n  var str, n;\n  var wrap;\n  var avail;\n  var next;\n  var input;\n  var tmpDict;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n  wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    tmpDict = new utils.Buf8(s.w_size);\n    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  avail = strm.avail_in;\n  next = strm.next_in;\n  input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    str = s.strstart;\n    n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n}\n\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\nvar utils = require('../utils/common');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short(s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n * 2;\n  var _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n","'use strict';\n\n\nvar zlib_inflate = require('./zlib/inflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar c            = require('./zlib/constants');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\nvar GZheader     = require('./zlib/gzheader');\n\nvar toString = Object.prototype.toString;\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  if (!(this instanceof Inflate)) return new Inflate(options);\n\n  this.options = utils.assign({\n    chunkSize: 16384,\n    windowBits: 0,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== c.Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== c.Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var dictionary = this.options.dictionary;\n  var status, _mode;\n  var next_out_utf8, tail, utf8str;\n\n  // Flag to properly process Z_BUF_ERROR on testing inflate call\n  // when we check that all output data was flushed.\n  var allowBufError = false;\n\n  if (this.ended) { return false; }\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // Only binary strings can be decompressed on practice\n    strm.input = strings.binstring2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\n    if (status === c.Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);\n    }\n\n    if (status === c.Z_BUF_ERROR && allowBufError === true) {\n      status = c.Z_OK;\n      allowBufError = false;\n    }\n\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n\n        if (this.options.to === 'string') {\n\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          tail = strm.next_out - next_out_utf8;\n          utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n        }\n      }\n    }\n\n    // When no more input data, we should check that internal inflate buffers\n    // are flushed. The only way to do it when avail_out = 0 - run one more\n    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n    // Here we set flag to process this error properly.\n    //\n    // NOTE. Deflate does not return error in this case and does not needs such\n    // logic.\n    if (strm.avail_in === 0 && strm.avail_out === 0) {\n      allowBufError = true;\n    }\n\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n\n  if (status === c.Z_STREAM_END) {\n    _mode = c.Z_FINISH;\n  }\n\n  // Finalize on the last chunk.\n  if (_mode === c.Z_FINISH) {\n    status = zlib_inflate.inflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === c.Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === c.Z_SYNC_FLUSH) {\n    this.onEnd(c.Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === c.Z_OK) {\n    if (this.options.to === 'string') {\n      // Glue & convert here, until we teach pako to send\n      // utf8 aligned strings to onData\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  var inflator = new Inflate(options);\n\n  inflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip  = inflate;\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils         = require('../utils/common');\nvar adler32       = require('./adler32');\nvar crc32         = require('./crc32');\nvar inflate_fast  = require('./inffast');\nvar inflate_table = require('./inftrees');\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\n//var Z_NO_FLUSH      = 0;\n//var Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\n//var Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\nvar Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\nvar Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nvar    HEAD = 1;       /* i: waiting for magic header */\nvar    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nvar    TIME = 3;       /* i: waiting for modification time (gzip) */\nvar    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nvar    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nvar    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nvar    NAME = 7;       /* i: waiting for end of file name (gzip) */\nvar    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nvar    HCRC = 9;       /* i: waiting for header crc (gzip) */\nvar    DICTID = 10;    /* i: waiting for dictionary check value */\nvar    DICT = 11;      /* waiting for inflateSetDictionary() call */\nvar        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nvar        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nvar        STORED = 14;    /* i: waiting for stored size (length and complement) */\nvar        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nvar        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nvar        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nvar        LENLENS = 18;   /* i: waiting for code length code lengths */\nvar        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nvar            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nvar            LEN = 21;       /* i: waiting for length/lit/eob code */\nvar            LENEXT = 22;    /* i: waiting for length extra bits */\nvar            DIST = 23;      /* i: waiting for distance code */\nvar            DISTEXT = 24;   /* i: waiting for distance extra bits */\nvar            MATCH = 25;     /* o: waiting for output space to copy string */\nvar            LIT = 26;       /* o: waiting for output space to write literal */\nvar    CHECK = 27;     /* i: waiting for 32-bit check value */\nvar    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nvar    DONE = 29;      /* finished check, done -- remain here until reset */\nvar    BAD = 30;       /* got a data error -- remain here until reset */\nvar    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nvar    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_WBITS = MAX_WBITS;\n\n\nfunction zswap32(q) {\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n}\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\n  this.work = new utils.Buf16(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\nfunction inflateResetKeep(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n}\n\nfunction inflateReset(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n}\n\nfunction inflateReset2(strm, windowBits) {\n  var wrap;\n  var state;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n}\n\nfunction inflateInit2(strm, windowBits) {\n  var ret;\n  var state;\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n}\n\nfunction inflateInit(strm) {\n  return inflateInit2(strm, DEF_WBITS);\n}\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nvar virgin = true;\n\nvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\nfunction fixedtables(state) {\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    var sym;\n\n    lenfix = new utils.Buf32(512);\n    distfix = new utils.Buf32(32);\n\n    /* literal/length table */\n    sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n}\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nfunction updatewindow(strm, src, end, copy) {\n  var dist;\n  var state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new utils.Buf8(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    utils.arraySet(state.window, src, end - copy, dist, state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      utils.arraySet(state.window, src, end - copy, copy, 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n}\n\nfunction inflate(strm, flush) {\n  var state;\n  var input, output;          // input/output buffers\n  var next;                   /* next input INDEX */\n  var put;                    /* next output INDEX */\n  var have, left;             /* available input and output */\n  var hold;                   /* bit buffer */\n  var bits;                   /* bits in bit buffer */\n  var _in, _out;              /* save starting available input and output */\n  var copy;                   /* number of stored or match bytes to copy */\n  var from;                   /* where to copy match bytes from */\n  var from_source;\n  var here = 0;               /* current decoding table entry */\n  var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //var last;                   /* parent table entry */\n  var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  var len;                    /* length to copy for repeats, bits to drop */\n  var ret;                    /* return code */\n  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */\n  var opts;\n\n  var n; // temporary var for NEED_BITS\n\n  var order = /* permutation of code lengths */\n    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        state.flags = 0;           /* expect zlib header */\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        else if (len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n        state.dmax = 1 << len;\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if (state.flags & 0x0200) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Array(state.head.extra_len);\n              }\n              utils.arraySet(\n                state.head.extra,\n                input,\n                next,\n                // extra field is limited to 65536 bytes\n                // - no need for additional size check\n                copy,\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if (state.flags & 0x0200) {\n              state.check = crc32(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          utils.arraySet(output, input, next, copy, put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inflate_fast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if (_out) {\n            strm.adler = state.check =\n                /*UPDATE(state.check, put - _out, _out);*/\n                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n}\n\nfunction inflateEnd(strm) {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  var state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n}\n\nfunction inflateGetHeader(strm, head) {\n  var state;\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n}\n\nfunction inflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var state;\n  var dictid;\n  var ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK;\n}\n\nexports.inflateReset = inflateReset;\nexports.inflateReset2 = inflateReset2;\nexports.inflateResetKeep = inflateResetKeep;\nexports.inflateInit = inflateInit;\nexports.inflateInit2 = inflateInit2;\nexports.inflate = inflate;\nexports.inflateEnd = inflateEnd;\nexports.inflateGetHeader = inflateGetHeader;\nexports.inflateSetDictionary = inflateSetDictionary;\nexports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nexports.inflateCopy = inflateCopy;\nexports.inflateGetDictionary = inflateGetDictionary;\nexports.inflateMark = inflateMark;\nexports.inflatePrime = inflatePrime;\nexports.inflateSync = inflateSync;\nexports.inflateSyncPoint = inflateSyncPoint;\nexports.inflateUndermine = inflateUndermine;\n*/\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nvar BAD = 30;       /* got a data error -- remain here until reset */\nvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  var state;\n  var _in;                    /* local strm.input */\n  var last;                   /* have enough input while in < last */\n  var _out;                   /* local strm.output */\n  var beg;                    /* inflate()'s initial strm.output */\n  var end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  var dmax;                   /* maximum distance from zlib header */\n//#endif\n  var wsize;                  /* window size or zero if not using window */\n  var whave;                  /* valid bytes in the window */\n  var wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  var s_window;               /* allocated sliding window, if wsize != 0 */\n  var hold;                   /* local strm.hold */\n  var bits;                   /* local strm.bits */\n  var lcode;                  /* local strm.lencode */\n  var dcode;                  /* local strm.distcode */\n  var lmask;                  /* mask for first level of length codes */\n  var dmask;                  /* mask for first level of distance codes */\n  var here;                   /* retrieved table entry */\n  var op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  var len;                    /* match length, unused bytes */\n  var dist;                   /* match distance */\n  var from;                   /* where to copy match from */\n  var from_source;\n\n\n  var input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils = require('../utils/common');\n\nvar MAXBITS = 15;\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\nvar lbase = [ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n];\n\nvar lext = [ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n];\n\nvar dbase = [ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n];\n\nvar dext = [ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n];\n\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n{\n  var bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  var len = 0;               /* a code's length in bits */\n  var sym = 0;               /* index of code symbols */\n  var min = 0, max = 0;          /* minimum and maximum code lengths */\n  var root = 0;              /* number of index bits for root table */\n  var curr = 0;              /* number of index bits for current table */\n  var drop = 0;              /* code bits to drop for sub-table */\n  var left = 0;                   /* number of prefix codes available */\n  var used = 0;              /* code entries in table used */\n  var huff = 0;              /* Huffman code */\n  var incr;              /* for incrementing code, index */\n  var fill;              /* index for replicating entries */\n  var low;               /* low bits for current root entry */\n  var mask;              /* mask for low root bits */\n  var next;             /* next available space in table */\n  var base = null;     /* base value table to use */\n  var base_index = 0;\n//  var shoextra;    /* extra bits table to use */\n  var end;                    /* use base and extra for symbol > end */\n  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  var extra = null;\n  var extra_index = 0;\n\n  var here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nmodule.exports = GZheader;\n","/**\n * @license\n * Copyright 2017 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {vec2} from 'neuroglancer/util/geom';\n\nexport class BossSourceParameters {\n  baseUrl: string;\n  authServer: string;\n  collection: string;\n  experiment: string;\n  channel: string;\n  resolution: string;\n}\n\nexport class VolumeChunkSourceParameters extends BossSourceParameters {\n  encoding: string;\n  window: vec2|undefined;\n\n  static RPC_ID = 'boss/VolumeChunkSource';\n\n  static stringify(parameters: VolumeChunkSourceParameters) {\n    return `boss:volume:${parameters.baseUrl}/${parameters.collection}/${\n        parameters.experiment}/${parameters.channel}/${parameters.resolution}/${\n        parameters.encoding}`;\n  }\n}\n\nexport class MeshSourceParameters {\n  baseUrl: string;\n\n  static RPC_ID = 'boss/MeshChunkSource';\n\n  static stringify(parameters: MeshSourceParameters) {\n    return `boss:mesh:${parameters.baseUrl}`;\n  }\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Basic support for parsing the Python Numpy 'npy' serialization format.\n *\n * See http://docs.scipy.org/doc/numpy-dev/neps/npy-format.html\n */\n\nimport {TypedArrayConstructor} from 'neuroglancer/util/array';\nimport {DataType} from 'neuroglancer/util/data_type';\nimport {convertEndian16, convertEndian32, Endianness} from 'neuroglancer/util/endian';\nimport {pythonLiteralParse} from 'neuroglancer/util/json';\n\ninterface SupportedDataType {\n  arrayConstructor: TypedArrayConstructor;\n  dataType: DataType;\n  fixEndianness: (array: ArrayBufferView) => void;\n  elementBytes: number;\n  javascriptElementsPerArrayElement: number;\n}\n\nconst supportedDataTypes = new Map<string, SupportedDataType>();\nsupportedDataTypes.set('|u1', {\n  arrayConstructor: Uint8Array,\n  fixEndianness: () => {},\n  javascriptElementsPerArrayElement: 1,\n  elementBytes: 1,\n  dataType: DataType.UINT8,\n});\nsupportedDataTypes.set('|i1', {\n  arrayConstructor: Uint8Array,\n  fixEndianness: () => {},\n  javascriptElementsPerArrayElement: 1,\n  elementBytes: 1,\n  dataType: DataType.UINT8,\n});\nfor (let [endiannessChar, endianness] of<[string, Endianness][]>[\n       ['<', Endianness.LITTLE], ['>', Endianness.BIG]\n     ]) {\n  // For now, treat both signed and unsigned integer types as unsigned.\n  for (let typeChar of ['u', 'i']) {\n    supportedDataTypes.set(`${endiannessChar}${typeChar}2`, {\n      arrayConstructor: Uint16Array,\n      elementBytes: 2,\n      fixEndianness: array => {\n        convertEndian16(array, endianness);\n      },\n      javascriptElementsPerArrayElement: 1,\n      dataType: DataType.UINT16,\n    });\n    supportedDataTypes.set(`${endiannessChar}${typeChar}4`, {\n      arrayConstructor: Uint32Array,\n      elementBytes: 4,\n      fixEndianness: array => {\n        convertEndian32(array, endianness);\n      },\n      javascriptElementsPerArrayElement: 1,\n      dataType: DataType.UINT32,\n    });\n    supportedDataTypes.set(`${endiannessChar}${typeChar}8`, {\n      arrayConstructor: Uint32Array,\n      elementBytes: 8,\n      // We still maintain the low 32-bit value first.\n      fixEndianness: array => {\n        convertEndian32(array, endianness);\n      },\n      javascriptElementsPerArrayElement: 2,\n      dataType: DataType.UINT64,\n    });\n  }\n  supportedDataTypes.set(`${endiannessChar}f4`, {\n    arrayConstructor: Float32Array,\n    elementBytes: 4,\n    fixEndianness: array => {\n      convertEndian32(array, endianness);\n    },\n    javascriptElementsPerArrayElement: 1,\n    dataType: DataType.FLOAT32,\n  });\n}\n\nexport class NumpyArray {\n  constructor(\n      public data: ArrayBufferView, public shape: number[], public dataType: SupportedDataType,\n      public fortranOrder: boolean) {}\n}\n\nexport function parseNpy(x: Uint8Array) {\n  // Verify 6-byte magic sequence: 147, 78, 85, 77, 80, 89\n  if (x[0] !== 147 || x[1] !== 78 || x[2] !== 85 || x[3] !== 77 || x[4] !== 80 || x[5] !== 89) {\n    throw new Error('Data does not match npy format.');\n  }\n  const majorVersion = x[6], minorVersion = x[7];\n  if (majorVersion !== 1 || minorVersion !== 0) {\n    throw new Error(`Unsupported npy version ${majorVersion}.${minorVersion}`);\n  }\n  const dv = new DataView(x.buffer, x.byteOffset, x.byteLength);\n  const headerLength = dv.getUint16(8, /*littleEndian=*/true);\n  const header = new TextDecoder('utf-8').decode(x.subarray(10, headerLength + 10));\n  let headerObject: any;\n  const dataOffset = headerLength + 10;\n  try {\n    headerObject = pythonLiteralParse(header);\n  } catch (e) {\n    throw new Error(`Failed to parse npy header: ${e}`);\n  }\n  const dtype = headerObject['descr'];\n  let shape = headerObject['shape'];\n  let numElements = 1;\n  if (!Array.isArray(shape)) {\n    throw new Error('Invalid shape ${JSON.stringify(shape)}');\n  }\n  for (let dim of shape) {\n    if (typeof dim !== 'number') {\n      throw new Error('Invalid shape ${JSON.stringify(shape)}');\n    }\n    numElements *= dim;\n  }\n  const supportedDataType = supportedDataTypes.get(dtype);\n  if (supportedDataType === undefined) {\n    throw new Error(`Unsupported numpy data type ${JSON.stringify(dtype)}`);\n  }\n  let {arrayConstructor, javascriptElementsPerArrayElement} = supportedDataType;\n  const javascriptElements = javascriptElementsPerArrayElement * numElements;\n  const totalDataBytes = arrayConstructor.BYTES_PER_ELEMENT * javascriptElements;\n  if (totalDataBytes + dataOffset !== x.byteLength) {\n    throw new Error('Expected length does not match length of data');\n  }\n  const data = new arrayConstructor(x.buffer, x.byteOffset + dataOffset, javascriptElements);\n  supportedDataType.fixEndianness(data);\n  return new NumpyArray(data, shape, supportedDataType, headerObject['fortran_order'] === true);\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {WithParameters} from 'neuroglancer/chunk_manager/backend';\nimport {ChunkSourceParametersConstructor} from 'neuroglancer/chunk_manager/base';\nimport {WithSharedCredentialsProviderCounterpart} from 'neuroglancer/credentials_provider/shared_counterpart';\nimport {BossToken, fetchWithBossCredentials} from 'neuroglancer/datasource/boss/api';\nimport {MeshSourceParameters, VolumeChunkSourceParameters} from 'neuroglancer/datasource/boss/base';\nimport {assignMeshFragmentData, decodeJsonManifestChunk, decodeTriangleVertexPositionsAndIndices, FragmentChunk, ManifestChunk, MeshSource} from 'neuroglancer/mesh/backend';\nimport {ChunkDecoder} from 'neuroglancer/sliceview/backend_chunk_decoders';\nimport {decodeBossNpzChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/bossNpz';\nimport {decodeJpegChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/jpeg';\nimport {VolumeChunk, VolumeChunkSource} from 'neuroglancer/sliceview/volume/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {Endianness} from 'neuroglancer/util/endian';\nimport {cancellableFetchOk, responseArrayBuffer} from 'neuroglancer/util/http_request';\nimport {registerSharedObject, SharedObject} from 'neuroglancer/worker_rpc';\n\nlet chunkDecoders = new Map<string, ChunkDecoder>();\nchunkDecoders.set('npz', decodeBossNpzChunk);\nchunkDecoders.set('jpeg', decodeJpegChunk);\n\nlet acceptHeaders = new Map<string, string>();\nacceptHeaders.set('npz', 'application/npygz');\nacceptHeaders.set('jpeg', 'image/jpeg');\n\nfunction BossSource<Parameters, TBase extends {new (...args: any[]): SharedObject}>(\n    Base: TBase, parametersConstructor: ChunkSourceParametersConstructor<Parameters>) {\n  return WithParameters(\n      WithSharedCredentialsProviderCounterpart<BossToken>()(Base), parametersConstructor);\n}\n\n@registerSharedObject()\nexport class BossVolumeChunkSource extends (BossSource(VolumeChunkSource, VolumeChunkSourceParameters)) {\n  chunkDecoder = chunkDecoders.get(this.parameters.encoding)!;\n\n  async download(chunk: VolumeChunk, cancellationToken: CancellationToken) {\n    let {parameters} = this;\n    let url = `${parameters.baseUrl}/latest/cutout/${parameters.collection}/${parameters.experiment}/${\n        parameters.channel}/${parameters.resolution}`;\n    {\n      // chunkPosition must not be captured, since it will be invalidated by the next call to\n      // computeChunkBounds.\n      let chunkPosition = this.computeChunkBounds(chunk);\n      let chunkDataSize = chunk.chunkDataSize!;\n      for (let i = 0; i < 3; ++i) {\n        url += `/${chunkPosition[i]}:${chunkPosition[i] + chunkDataSize[i]}`;\n      }\n    }\n    url += '/';\n\n    if (parameters.window !== undefined) {\n      url += `?window=${parameters.window[0]},${parameters.window[1]}`;\n    }\n    const response = await fetchWithBossCredentials(\n        this.credentialsProvider, url,\n        {headers: {'Accept': acceptHeaders.get(parameters.encoding)!}}, responseArrayBuffer,\n        cancellationToken);\n    await this.chunkDecoder(chunk, cancellationToken, response);\n  }\n}\n\nfunction decodeManifestChunk(chunk: ManifestChunk, response: any) {\n  return decodeJsonManifestChunk(chunk, response, 'fragments');\n}\n\nfunction decodeFragmentChunk(chunk: FragmentChunk, response: ArrayBuffer) {\n  let dv = new DataView(response);\n  let numVertices = dv.getUint32(0, true);\n  assignMeshFragmentData(\n      chunk,\n      decodeTriangleVertexPositionsAndIndices(\n          response, Endianness.LITTLE, /*vertexByteOffset=*/ 4, numVertices));\n}\n\n@registerSharedObject()\nexport class BossMeshSource extends (BossSource(MeshSource, MeshSourceParameters)) {\n  download(chunk: ManifestChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    return cancellableFetchOk(\n               `${parameters.baseUrl}${chunk.objectId}`, {}, responseArrayBuffer, cancellationToken)\n        .then(response => decodeManifestChunk(chunk, response));\n  }\n\n  downloadFragment(chunk: FragmentChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    return cancellableFetchOk(\n               `${parameters.baseUrl}${chunk.fragmentId}`, {}, responseArrayBuffer,\n               cancellationToken)\n        .then(response => decodeFragmentChunk(chunk, response));\n  }\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This decodes the BOSS (https://github.com/jhuapl-boss/) NPZ format, which is the Python\n * NPY binary format with zlib encoding.\n *\n * This is NOT the same as the Python NPZ format, which is a ZIP file containing multiple files\n * (each corresponding to a different variable) in NPY binary format.\n */\n\nimport {decodeGzip} from 'neuroglancer/async_computation/decode_gzip_request';\nimport {requestAsyncComputation} from 'neuroglancer/async_computation/request';\nimport {postProcessRawData} from 'neuroglancer/sliceview/backend_chunk_decoders/postprocess';\nimport {DataType} from 'neuroglancer/sliceview/base';\nimport {VolumeChunk} from 'neuroglancer/sliceview/volume/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {vec3Key} from 'neuroglancer/util/geom';\nimport {parseNpy} from 'neuroglancer/util/npy';\n\nexport async function decodeBossNpzChunk(\n    chunk: VolumeChunk, cancellationToken: CancellationToken, response: ArrayBuffer) {\n  let parseResult = parseNpy(await requestAsyncComputation(\n      decodeGzip, cancellationToken, [response], new Uint8Array(response)));\n  let chunkDataSize = chunk.chunkDataSize!;\n  let source = chunk.source!;\n  let {shape} = parseResult;\n  if (shape.length !== 3 || shape[0] !== chunkDataSize[2] || shape[1] !== chunkDataSize[1] ||\n      shape[2] !== chunkDataSize[0]) {\n    throw new Error(\n        `Shape ${JSON.stringify(shape)} does not match chunkDataSize ${vec3Key(chunkDataSize)}`);\n  }\n  let parsedDataType = parseResult.dataType.dataType;\n  let {spec} = source;\n  if (parsedDataType !== spec.dataType) {\n    throw new Error(`Data type ${DataType[parsedDataType]} does not match expected data type ${\n        DataType[spec.dataType]}`);\n  }\n  await postProcessRawData(chunk, cancellationToken, parseResult.data);\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CredentialsProvider} from 'neuroglancer/credentials_provider';\nimport {fetchWithCredentials} from 'neuroglancer/credentials_provider/http_request';\nimport {CancellationToken, uncancelableToken} from 'neuroglancer/util/cancellation';\nimport {ResponseTransform} from 'neuroglancer/util/http_request';\n\nexport type BossToken = string;\n\n/**\n * Key used for retrieving the CredentialsProvider from a CredentialsManager.\n */\nexport const credentialsKey = 'boss';\n\nexport function fetchWithBossCredentials<T>(\n    credentialsProvider: CredentialsProvider<BossToken>, input: RequestInfo, init: RequestInit,\n    transformResponse: ResponseTransform<T>,\n    cancellationToken: CancellationToken = uncancelableToken): Promise<T> {\n  return fetchWithCredentials(\n      credentialsProvider, input, init, transformResponse,\n      credentials => {\n        const headers = new Headers(init.headers);\n        headers.set('Authorization', `Bearer ${credentials}`);\n        return {...init, headers};\n      },\n      error => {\n        const {status} = error;\n        if (status === 403 || status === 401) {\n          // Authorization needed.  Retry with refreshed token.\n          return 'refresh';\n        }\n        if (status === 504) {\n          // Gateway timeout can occur if the server takes too long to reply.  Retry.\n          return 'retry';\n        }\n        throw error;\n      },\n      cancellationToken);\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class RenderBaseSourceParameters {\n  baseUrl: string;\n  owner: string;\n  project: string;\n  stack: string;\n  channel: string|undefined;\n}\n\nexport class RenderSourceParameters extends RenderBaseSourceParameters {\n  minIntensity: number|undefined;\n  maxIntensity: number|undefined;\n  maxTileSpecsToRender: number|undefined;\n  filter: boolean|undefined;\n}\n\nexport class TileChunkSourceParameters extends RenderSourceParameters {\n  dims: string;\n  level: number;\n  encoding: string;\n\n  static RPC_ID = 'render/TileChunkSource';\n}\n\nexport class PointMatchChunkSourceParameters extends RenderSourceParameters {\n  matchCollection: string;\n  zoffset: number;\n\n  static RPC_ID = 'render/PointMatchSource';\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {SliceViewChunkSource, SliceViewChunkSpecification, SliceViewChunkSpecificationBaseOptions, SliceViewChunkSpecificationOptions, SliceViewSourceOptions} from 'neuroglancer/sliceview/base';\nimport {getCombinedTransform} from 'neuroglancer/sliceview/base';\n\nexport enum VectorGraphicsType {\n  LINE,\n  POINT\n}\n\nexport interface RenderLayer {\n  sources: VectorGraphicsChunkSource[][]|null;\n}\n\nexport interface VectorGraphicsChunkSpecificationSourceOptions {\n  vectorGraphicsSourceOptions: VectorGraphicsSourceOptions;\n}\n\nexport interface VectorGraphicsSourceOptions extends SliceViewSourceOptions {}\n\nexport interface VectorGraphicsChunkSource extends SliceViewChunkSource {\n  spec: VectorGraphicsChunkSpecification;\n}\n\nexport type VectorGraphicsChunkSpecificationOptions = SliceViewChunkSpecificationOptions;\n\nexport interface VectorGraphicsChunkSpecificationDefaultChunkSizeOptions extends\n    SliceViewChunkSpecificationBaseOptions {}\n\n/**\n * Specifies a chunk layout and voxel size.\n */\nexport class VectorGraphicsChunkSpecification extends SliceViewChunkSpecification {\n  constructor(options: VectorGraphicsChunkSpecificationOptions) {\n    super(options);\n  }\n\n  static make(options: VectorGraphicsChunkSpecificationOptions&\n              {vectorGraphicsSourceOptions: VectorGraphicsSourceOptions}) {\n    return new VectorGraphicsChunkSpecification(Object.assign(\n        {}, options,\n        {transform: getCombinedTransform(options.transform, options.vectorGraphicsSourceOptions)}));\n  }\n\n  static fromObject(msg: any) {\n    return new VectorGraphicsChunkSpecification(msg);\n  }\n\n  toObject(): SliceViewChunkSpecificationOptions {\n    return super.toObject();\n  }\n}\n\nexport const VECTOR_GRAPHICS_RPC_ID = 'vectorgraphics';\nexport const VECTOR_GRAPHICS_RENDERLAYER_RPC_ID = 'vectorgraphics/RenderLayer';\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {SliceViewChunk, SliceViewChunkSource} from 'neuroglancer/sliceview/backend';\nimport {VectorGraphicsChunkSource as VectorGraphicsChunkSourceInterface, VectorGraphicsChunkSpecification} from 'neuroglancer/sliceview/vector_graphics/base';\nimport {vec3} from 'neuroglancer/util/geom';\nimport {RPC} from 'neuroglancer/worker_rpc';\n\nexport class VectorGraphicsChunk extends SliceViewChunk {\n  source: VectorGraphicsChunkSource|null = null;\n  vertexPositions: Float32Array|null = null;\n  vertexNormals: Float32Array|null = null;\n  constructor() {\n    super();\n  }\n\n  initializeVolumeChunk(key: string, chunkGridPosition: vec3) {\n    super.initializeVolumeChunk(key, chunkGridPosition);\n\n    let chunkBytes: number = 0;\n    if (this.vertexPositions) {\n      chunkBytes = chunkBytes + this.vertexPositions!.buffer.byteLength;\n    }\n    if (this.vertexNormals) {\n      chunkBytes = chunkBytes + this.vertexNormals!.buffer.byteLength;\n    }\n    this.systemMemoryBytes = chunkBytes;\n    this.gpuMemoryBytes = chunkBytes;\n\n    this.vertexPositions = null;\n  }\n\n\n  serialize(msg: any, transfers: any[]) {\n    super.serialize(msg, transfers);\n    let {vertexPositions, vertexNormals} = this;\n\n    msg['vertexPositions'] = vertexPositions;\n    let vertexPositionsBuffer = vertexPositions!.buffer;\n    transfers.push(vertexPositionsBuffer);\n\n    if (vertexNormals) {\n      msg['vertexNormals'] = vertexNormals;\n      let vertexNormalsBuffer = vertexNormals!.buffer;\n      transfers.push(vertexNormalsBuffer);\n    }\n\n    this.vertexPositions = null;\n    this.vertexNormals = null;\n  }\n\n  downloadSucceeded() {\n    this.systemMemoryBytes = this.gpuMemoryBytes = this.vertexPositions!.byteLength;\n    super.downloadSucceeded();\n  }\n\n  freeSystemMemory() {\n    this.vertexPositions = null;\n    this.vertexNormals = null;\n  }\n}\n\nexport class VectorGraphicsChunkSource extends SliceViewChunkSource implements\n    VectorGraphicsChunkSourceInterface {\n  spec: VectorGraphicsChunkSpecification;\n  chunkBytes: number;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.spec = VectorGraphicsChunkSpecification.fromObject(options['spec']);\n  }\n}\nVectorGraphicsChunkSource.prototype.chunkConstructor = VectorGraphicsChunk;\n","// DO NOT EDIT.  Generated from templates/neuroglancer/util/typedarray_builder.template.ts.\n/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Float32ArrayBuilder {\n  length = 0;\n  data: Float32Array;\n\n  constructor(initialCapacity: number = 16) {\n    this.data = new Float32Array(initialCapacity);\n  }\n\n  resize(newLength: number) {\n    let {data} = this;\n    if (newLength > data.length) {\n      let newData = new Float32Array(Math.max(newLength, data.length * 2));\n      newData.set(data.subarray(0, this.length));\n      this.data = newData;\n    }\n    this.length = newLength;\n  }\n\n  get view() {\n    let {data} = this;\n    return new Float32Array(data.buffer, data.byteOffset, this.length);\n  }\n\n  shrinkToFit() {\n    this.data = new Float32Array(this.view);\n  }\n\n  clear() {\n    this.length = 0;\n  }\n\n  appendArray(other: ArrayLike<number>) {\n    let {length} = this;\n    this.resize(length + other.length);\n    this.data.set(other, length);\n  }\n\n  eraseRange(start: number, end: number) {\n    this.data.copyWithin(start, end, this.length);\n    this.length -= (end - start);\n  }\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {WithParameters} from 'neuroglancer/chunk_manager/backend';\nimport {PointMatchChunkSourceParameters, TileChunkSourceParameters} from 'neuroglancer/datasource/render/base';\nimport {ChunkDecoder} from 'neuroglancer/sliceview/backend_chunk_decoders';\nimport {decodeJpegChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/jpeg';\nimport {VectorGraphicsChunk, VectorGraphicsChunkSource} from 'neuroglancer/sliceview/vector_graphics/backend';\nimport {VolumeChunk, VolumeChunkSource} from 'neuroglancer/sliceview/volume/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {Float32ArrayBuilder} from 'neuroglancer/util/float32array_builder';\nimport {vec3} from 'neuroglancer/util/geom';\nimport {cancellableFetchOk, responseArrayBuffer, responseJson} from 'neuroglancer/util/http_request';\nimport {parseArray, verify3dVec, verifyObject, verifyString} from 'neuroglancer/util/json';\nimport {registerSharedObject} from 'neuroglancer/worker_rpc';\n\nconst chunkDecoders = new Map<string, ChunkDecoder>();\nchunkDecoders.set('jpg', decodeJpegChunk);\n\n@registerSharedObject() export class TileChunkSource extends\n(WithParameters(VolumeChunkSource, TileChunkSourceParameters)) {\n  chunkDecoder = chunkDecoders.get(this.parameters.encoding)!;\n\n  queryString = (() => {\n    let {parameters} = this;\n    let query_params: string[] = [];\n    if (parameters.channel !== undefined) {\n      query_params.push('channels=' + parameters.channel);\n    }\n    if (parameters.minIntensity !== undefined) {\n      query_params.push(`minIntensity=${JSON.stringify(parameters.minIntensity)}`);\n    }\n    if (parameters.maxIntensity !== undefined) {\n      query_params.push(`maxIntensity=${JSON.stringify(parameters.maxIntensity)}`);\n    }\n    if (parameters.maxTileSpecsToRender !== undefined) {\n      query_params.push(`maxTileSpecsToRender=${JSON.stringify(parameters.maxTileSpecsToRender)}`);\n    }\n    if (parameters.filter !== undefined) {\n      query_params.push(`filter=${JSON.stringify(parameters.filter)}`);\n    }\n    return query_params.join('&');\n  })();\n\n  async download(chunk: VolumeChunk, cancellationToken: CancellationToken) {\n    let {parameters} = this;\n    let {chunkGridPosition} = chunk;\n\n    // Calculate scale.\n    let scale = 1.0 / Math.pow(2, parameters.level);\n\n    // Needed by JPEG decoder.\n    chunk.chunkDataSize = this.spec.chunkDataSize;\n\n    let xTileSize = chunk.chunkDataSize[0] * Math.pow(2, parameters.level);\n    let yTileSize = chunk.chunkDataSize[1] * Math.pow(2, parameters.level);\n\n    // Convert grid position to global coordinates position.\n    let chunkPosition = vec3.create();\n\n    chunkPosition[0] = chunkGridPosition[0] * xTileSize;\n    chunkPosition[1] = chunkGridPosition[1] * yTileSize;\n    chunkPosition[2] = chunkGridPosition[2];\n\n    // GET\n    // /v1/owner/{owner}/project/{project}/stack/{stack}/z/{z}/box/{x},{y},{width},{height},{scale}/jpeg-image\n    let path = `/render-ws/v1/owner/${parameters.owner}/project/${parameters.project}/stack/${parameters.stack}/z/${chunkPosition[2]}/box/${chunkPosition[0]},${chunkPosition[1]},${xTileSize},${yTileSize},${scale}/jpeg-image`;\n\n    const response = await cancellableFetchOk(\n        `${parameters.baseUrl}${path}?${this.queryString}`, {}, responseArrayBuffer,\n        cancellationToken);\n    await this.chunkDecoder(chunk, cancellationToken, response);\n  }\n}\n\nfunction decodeSectionIDs(response: any) {\n  let sectionIDs: string[] = [];\n  parseArray(response, x => {\n    verifyObject(x);\n    sectionIDs.push(verifyString(x['sectionId']));\n  });\n  return sectionIDs;\n}\n\nfunction createConversionObject(tileId: string, xcoord: any, ycoord: any) {\n  return {'tileId': tileId, 'local': [xcoord, ycoord]};\n}\n\nfunction conversionObjectToWorld(\n    conversionObjectArray: Array<any>, parameters: PointMatchChunkSourceParameters,\n    cancellationToken: CancellationToken) {\n  const url = `${parameters.baseUrl}/render-ws/v1/owner/${parameters.owner}/project/${parameters.project}/` +\n      `stack/${parameters.stack}/local-to-world-coordinates`;\n  return cancellableFetchOk(\n      url, {\n        method: 'PUT',\n        body: JSON.stringify(conversionObjectArray),\n        headers: {'Content-Type': 'application/json'}\n      },\n      responseJson, cancellationToken);\n}\n\nfunction decodePointMatches(\n    chunk: VectorGraphicsChunk, response: any, parameters: PointMatchChunkSourceParameters,\n    cancellationToken: CancellationToken) {\n  let conversionObjects = new Array<any>();\n\n  parseArray(response, (matchObj) => {\n    let pId = verifyString(matchObj['pId']);\n    let qId = verifyString(matchObj['qId']);\n    let matches = verifyObject(matchObj['matches']);\n\n    let pMatches = matches['p'];  // [[x],[y]]\n    let qMatches = matches['q'];\n\n    // Create conversion objects\n    for (let i = 0; i < pMatches[0].length; i++) {\n      // Create pConversion\n      conversionObjects.push(createConversionObject(pId, pMatches[0][i], pMatches[1][i]));\n      // Create qConversion\n      conversionObjects.push(createConversionObject(qId, qMatches[0][i], qMatches[1][i]));\n    }\n  });\n\n  return conversionObjectToWorld(conversionObjects, parameters, cancellationToken)\n      .then(allConvertedCoordinates => {\n        let vertexPositions = new Float32ArrayBuilder();\n        for (let i = 0; i < allConvertedCoordinates.length; i++) {\n          let convertedCoordinate = verifyObject(allConvertedCoordinates[i]);\n          let point = verify3dVec(convertedCoordinate['world']);\n          vertexPositions.appendArray(point);\n        }\n        chunk.vertexPositions = vertexPositions.view;\n      });\n}\n\nfunction getPointMatches(\n    chunk: VectorGraphicsChunk, sectionIds: string[], parameters: PointMatchChunkSourceParameters,\n    cancellationToken: CancellationToken) {\n  let path: string;\n  if (sectionIds.length === 1) {\n    path = `/render-ws/v1/owner/${parameters.owner}/matchCollection/` +\n        `${parameters.matchCollection}/group/${sectionIds[0]}/matchesWith/${sectionIds[0]}`;\n  } else if (sectionIds.length === 2) {\n    path = `/render-ws/v1/owner/${parameters.owner}/matchCollection/` +\n        `${parameters.matchCollection}/group/${sectionIds[0]}/matchesWith/${sectionIds[1]}`;\n  } else {\n    throw new Error(`Invalid section Id vector of length: ${JSON.stringify(sectionIds.length)}`);\n  }\n\n  return cancellableFetchOk(`${parameters.baseUrl}${path}`, {}, responseJson, cancellationToken)\n      .then(response => {\n        return decodePointMatches(chunk, response, parameters, cancellationToken);\n      });\n}\n\n\nfunction downloadPointMatchChunk(\n    chunk: VectorGraphicsChunk, path: string, parameters: PointMatchChunkSourceParameters,\n    cancellationToken: CancellationToken): Promise<void> {\n  return cancellableFetchOk(`${parameters.baseUrl}${path}`, {}, responseJson, cancellationToken)\n      .then(response => {\n        return getPointMatches(chunk, decodeSectionIDs(response), parameters, cancellationToken);\n      });\n}\n\n@registerSharedObject() export class PointMatchSource extends\n(WithParameters(VectorGraphicsChunkSource, PointMatchChunkSourceParameters)) {\n  download(chunk: VectorGraphicsChunk, cancellationToken: CancellationToken): Promise<void> {\n    let {parameters} = this;\n    let {chunkGridPosition} = chunk;\n    // Get section IDs\n    let path = `/render-ws/v1/owner/${parameters.owner}/project/${parameters.project}/` +\n        `stack/${parameters.stack}/sectionData?minZ=${chunkGridPosition[2]}&` +\n        `maxZ=${chunkGridPosition[2] + parameters.zoffset}`;\n\n    return downloadPointMatchChunk(chunk, path, parameters, cancellationToken);\n  }\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {VertexAttributeInfo} from 'neuroglancer/skeleton/base';\nimport {mat4} from 'neuroglancer/util/geom';\n\nexport enum VolumeChunkEncoding {\n  RAW,\n  JPEG,\n  COMPRESSED_SEGMENTATION\n}\n\nexport class VolumeChunkSourceParameters {\n  url: string;\n  encoding: VolumeChunkEncoding;\n  sharding: ShardingParameters|undefined;\n\n  static RPC_ID = 'precomputed/VolumeChunkSource';\n}\n\n\nexport class MeshSourceParameters {\n  url: string;\n  lod: number;\n\n  static RPC_ID = 'precomputed/MeshSource';\n}\n\nexport enum DataEncoding {\n  RAW = 0,\n  GZIP = 1,\n}\n\nexport enum ShardingHashFunction {\n  IDENTITY = 0,\n  MURMURHASH3_X86_128 = 1,\n}\n\nexport interface ShardingParameters {\n  hash: ShardingHashFunction;\n  preshiftBits: number;\n  minishardBits: number;\n  shardBits: number;\n  minishardIndexEncoding: DataEncoding;\n  dataEncoding: DataEncoding;\n}\n\nexport class MultiscaleMeshMetadata {\n  transform: mat4;\n  lodScaleMultiplier: number;\n  vertexQuantizationBits: number;\n  sharding: ShardingParameters|undefined;\n}\n\nexport class MultiscaleMeshSourceParameters {\n  url: string;\n  metadata: MultiscaleMeshMetadata;\n\n  static RPC_ID = 'precomputed/MultiscaleMeshSource';\n}\n\nexport interface SkeletonMetadata {\n  transform: mat4;\n  vertexAttributes: Map<string, VertexAttributeInfo>;\n  sharding: ShardingParameters|undefined;\n}\n\nexport class SkeletonSourceParameters {\n  url: string;\n  metadata: SkeletonMetadata;\n\n  static RPC_ID = 'precomputed/SkeletonSource';\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {cancellableFetchOk, getByteRangeHeader, responseArrayBuffer} from 'neuroglancer/util/http_request';\nimport {Uint64} from 'neuroglancer/util/uint64';\n\n/**\n * On Chromium, multiple concurrent byte range requests to the same URL are serialized unless the\n * cache is disabled.  Disabling the cache works around the problem.\n *\n * https://bugs.chromium.org/p/chromium/issues/detail?id=969828\n */\nconst cacheMode = navigator.userAgent.indexOf('Chrome') !== -1 ? 'no-store' : 'default';\n\nexport function fetchHttpByteRange(\n    url: string, startOffset: Uint64|number, endOffset: Uint64|number,\n    cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n  return cancellableFetchOk(\n      url, {\n        headers: getByteRangeHeader(startOffset, endOffset),\n        cache: cacheMode,\n      },\n      responseArrayBuffer, cancellationToken);\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Uint64} from 'neuroglancer/util/uint64';\n\n/**\n * This is a very simple string hash function.  It isn't secure, but\n * is suitable for sharding of requests.\n */\nexport function simpleStringHash(s: string): number {\n  let h = 0;\n  let length = s.length;\n  for (let i = 0; i < length; ++i) {\n    h = (h * 31 + s.charCodeAt(i)) | 0;\n  }\n  return h;\n}\n\n/**\n * MurmurHash3_x86_32 mixing function\n */\nexport function murmurHash3_x86_32Mix(h: number, k: number): number {\n  k = Math.imul(k, 0xcc9e2d51) >>> 0;\n  k = ((k << 15) | (k >>> 17)) >>> 0;\n  k = Math.imul(k, 0x1b873593) >>> 0;\n  h ^= k;\n  h = ((h << 13) | (h >>> 19)) >>> 0;\n  h = (Math.imul(h, 5) + 0xe6546b64) >>> 0;\n  return h;\n}\n\n/**\n * MurmurHash3_x86_32 finalization function\n */\nexport function murmurHash3_x86_32Finalize(h: number, len: number) {\n  h ^= len;\n  h ^= h >>> 16;\n  h = Math.imul(h, 0x85ebca6b) >>> 0;\n  h ^= h >>> 13;\n  h *= 0xc2b2ae35;\n  h ^= h >>> 16;\n  return h >>> 0;\n}\n\n/**\n * MurmurHash3_x86_32, specialized for 8 bytes of input.\n */\nexport function murmurHash3_x86_32Hash64Bits(seed: number, low: number, high: number): number {\n  let h = seed;\n  h = murmurHash3_x86_32Mix(h, low);\n  h = murmurHash3_x86_32Mix(h, high);\n  return murmurHash3_x86_32Finalize(h, 8);\n}\n\n\nfunction murmurHash3_x86_128Mix(h: number) {\n  h ^= h >>> 16;\n  h = Math.imul(h, 0x85ebca6b);\n  h ^= h >>> 13;\n  h = Math.imul(h, 0xc2b2ae35);\n  h ^= h >>> 16;\n  return h;\n}\n\nfunction rotl32(x: number, r: number) {\n  return (x << r) | (x >>> (32 - r));\n}\n\n/**\n * MurmurHash3_x86_128, specialized for 8 bytes of input.\n *\n * Only the low 8 bytes of output are returned.\n */\nexport function murmurHash3_x86_128Hash64Bits(\n    out: Uint64, seed: number, low: number, high: number): Uint64 {\n  let h1 = seed, h2 = seed, h3 = seed, h4 = seed;\n  const c1 = 0x239b961b;\n  const c2 = 0xab0e9789;\n  const c3 = 0x38b34ae5;\n  // const c4 = 0xa1e38b93;\n\n  let k2 = Math.imul(high, c2);\n  k2 = rotl32(k2, 16);\n  k2 = Math.imul(k2, c3);\n  h2 ^= k2;\n\n  let k1 = Math.imul(low, c1);\n  k1 = rotl32(k1, 15);\n  k1 = Math.imul(k1, c2);\n  h1 ^= k1;\n\n  const len = 8;\n\n  h1 ^= len;\n  h2 ^= len;\n  h3 ^= len;\n  h4 ^= len;\n\n  h1 = (h1 + h2) >>> 0;\n  h1 = (h1 + h3) >>> 0;\n  h1 = (h1 + h4) >>> 0;\n  h2 = (h2 + h1) >>> 0;\n  h3 = (h3 + h1) >>> 0;\n  h4 = (h4 + h1) >>> 0;\n\n  h1 = murmurHash3_x86_128Mix(h1);\n  h2 = murmurHash3_x86_128Mix(h2);\n  h3 = murmurHash3_x86_128Mix(h3);\n  h4 = murmurHash3_x86_128Mix(h4);\n\n  h1 = (h1 + h2) >>> 0;\n  h1 = (h1 + h3) >>> 0;\n  h1 = (h1 + h4) >>> 0;\n  h2 = (h2 + h1) >>> 0;\n\n  // h3 = (h3 + h1) >>> 0;\n  // h4 = (h4 + h1) >>> 0;\n\n  out.low = h1;\n  out.high = h2;\n  return out;\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {decodeGzip} from 'neuroglancer/async_computation/decode_gzip_request';\nimport {requestAsyncComputation} from 'neuroglancer/async_computation/request';\nimport {Chunk, ChunkManager, WithParameters} from 'neuroglancer/chunk_manager/backend';\nimport {GenericSharedDataSource} from 'neuroglancer/chunk_manager/generic_file_source';\nimport {DataEncoding, MeshSourceParameters, MultiscaleMeshSourceParameters, ShardingHashFunction, ShardingParameters, SkeletonSourceParameters, VolumeChunkEncoding, VolumeChunkSourceParameters} from 'neuroglancer/datasource/precomputed/base';\nimport {assignMeshFragmentData, assignMultiscaleMeshFragmentData, computeOctreeChildOffsets, decodeJsonManifestChunk, decodeTriangleVertexPositionsAndIndices, FragmentChunk, generateHigherOctreeLevel, ManifestChunk, MeshSource, MultiscaleFragmentChunk, MultiscaleManifestChunk, MultiscaleMeshSource} from 'neuroglancer/mesh/backend';\nimport {SkeletonChunk, SkeletonSource} from 'neuroglancer/skeleton/backend';\nimport {decodeSkeletonChunk} from 'neuroglancer/skeleton/decode_precomputed_skeleton';\nimport {ChunkDecoder} from 'neuroglancer/sliceview/backend_chunk_decoders';\nimport {decodeCompressedSegmentationChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/compressed_segmentation';\nimport {decodeJpegChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/jpeg';\nimport {decodeRawChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/raw';\nimport {VolumeChunk, VolumeChunkSource} from 'neuroglancer/sliceview/volume/backend';\nimport {fetchHttpByteRange} from 'neuroglancer/util/byte_range_http_requests';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {Borrowed} from 'neuroglancer/util/disposable';\nimport {convertEndian32, Endianness} from 'neuroglancer/util/endian';\nimport {vec3} from 'neuroglancer/util/geom';\nimport {murmurHash3_x86_128Hash64Bits} from 'neuroglancer/util/hash';\nimport {cancellableFetchOk, responseArrayBuffer, responseJson} from 'neuroglancer/util/http_request';\nimport {stableStringify} from 'neuroglancer/util/json';\nimport {Uint64} from 'neuroglancer/util/uint64';\nimport {encodeZIndexCompressed} from 'neuroglancer/util/zorder';\nimport {registerSharedObject} from 'neuroglancer/worker_rpc';\n\nconst shardingHashFunctions: Map<ShardingHashFunction, (out: Uint64) => void> = new Map([\n  [\n    ShardingHashFunction.MURMURHASH3_X86_128,\n    (out) => {\n      murmurHash3_x86_128Hash64Bits(out, 0, out.low, out.high);\n    }\n  ],\n  [ShardingHashFunction.IDENTITY, (_out) => {}],\n]);\n\ninterface ShardInfo {\n  shardUrl: string;\n  offset: Uint64;\n}\n\ninterface DecodedMinishardIndex {\n  data: Uint32Array;\n  shardUrl: string;\n}\n\ninterface MinishardIndexSource extends GenericSharedDataSource<Uint64, DecodedMinishardIndex> {\n  sharding: ShardingParameters;\n}\n\nfunction getMinishardIndexDataSource(\n    chunkManager: Borrowed<ChunkManager>,\n    parameters: {url: string, sharding: ShardingParameters|undefined}): MinishardIndexSource|\n    undefined {\n  const {url, sharding} = parameters;\n  if (sharding === undefined) return undefined;\n  const source =\n      GenericSharedDataSource.get<Uint64, DecodedMinishardIndex>(\n          chunkManager, stableStringify({type: 'precomputed:shardedDataSource', url, sharding}), {\n            download: async function(\n                shardAndMinishard: Uint64, cancellationToken: CancellationToken) {\n              const minishard = Uint64.lowMask(new Uint64(), sharding.minishardBits);\n              Uint64.and(minishard, minishard, shardAndMinishard);\n              const shard = Uint64.lowMask(new Uint64(), sharding.shardBits);\n              const temp = new Uint64();\n              Uint64.rshift(temp, shardAndMinishard, sharding.minishardBits);\n              Uint64.and(shard, shard, temp);\n              const shardUrlPrefix =\n                  `${url}/${shard.toString(16).padStart(Math.ceil(sharding.shardBits / 4), '0')}`;\n              // Retrive minishard index start/end offsets.\n              const indexUrl = shardUrlPrefix + '.index';\n\n              // Multiply minishard by 16.\n              const shardIndexStart = Uint64.lshift(new Uint64(), minishard, 4);\n              const shardIndexEnd = Uint64.addUint32(new Uint64(), shardIndexStart, 16);\n              const shardIndexResponse = await fetchHttpByteRange(\n                  indexUrl, shardIndexStart, shardIndexEnd, cancellationToken);\n              if (shardIndexResponse.byteLength !== 16) {\n                throw new Error(`Failed to retrieve minishard offset`);\n              }\n              const shardIndexDv = new DataView(shardIndexResponse);\n              const minishardStartOffset = new Uint64(\n                  shardIndexDv.getUint32(0, /*littleEndian=*/ true),\n                  shardIndexDv.getUint32(4, /*littleEndian=*/ true));\n              const minishardEndOffset = new Uint64(\n                  shardIndexDv.getUint32(8, /*littleEndian=*/ true),\n                  shardIndexDv.getUint32(12, /*littleEndian=*/ true));\n              if (Uint64.equal(minishardStartOffset, minishardEndOffset)) {\n                throw new Error('Object not found')\n              }\n\n              const dataUrl = shardUrlPrefix + '.data';\n              let minishardIndexResponse = await fetchHttpByteRange(\n                  dataUrl, minishardStartOffset, minishardEndOffset, cancellationToken);\n              if (sharding.minishardIndexEncoding === DataEncoding.GZIP) {\n                minishardIndexResponse =\n                    (await requestAsyncComputation(\n                         decodeGzip, cancellationToken, [minishardIndexResponse],\n                         new Uint8Array(minishardIndexResponse)))\n                        .buffer;\n              }\n              if ((minishardIndexResponse.byteLength % 24) !== 0) {\n                throw new Error(\n                    `Invalid minishard index length: ${minishardIndexResponse.byteLength}`);\n              }\n              const minishardIndex = new Uint32Array(minishardIndexResponse);\n              convertEndian32(minishardIndex, Endianness.LITTLE);\n\n              const minishardIndexSize = minishardIndex.byteLength / 24;\n              let prevEntryKeyLow = 0, prevEntryKeyHigh = 0, prevStartLow = 0, prevStartHigh = 0;\n              for (let i = 0; i < minishardIndexSize; ++i) {\n                let entryKeyLow = prevEntryKeyLow + minishardIndex[i * 2];\n                let entryKeyHigh = prevEntryKeyHigh + minishardIndex[i * 2 + 1];\n                if (entryKeyLow >= 4294967296) {\n                  entryKeyLow -= 4294967296;\n                  entryKeyHigh += 1;\n                }\n                prevEntryKeyLow = minishardIndex[i * 2] = entryKeyLow;\n                prevEntryKeyHigh = minishardIndex[i * 2 + 1] = entryKeyHigh;\n                let startLow = prevStartLow + minishardIndex[(minishardIndexSize + i) * 2];\n                let startHigh = prevStartHigh + minishardIndex[(minishardIndexSize + i) * 2 + 1];\n                if (startLow >= 4294967296) {\n                  startLow -= 4294967296;\n                  startHigh += 1;\n                }\n                minishardIndex[(minishardIndexSize + i) * 2] = startLow;\n                minishardIndex[(minishardIndexSize + i) * 2 + 1] = startHigh;\n                const sizeLow = minishardIndex[(2 * minishardIndexSize + i) * 2];\n                const sizeHigh = minishardIndex[(2 * minishardIndexSize + i) * 2 + 1];\n                let endLow = startLow + sizeLow;\n                let endHigh = startHigh + sizeHigh;\n                if (endLow >= 4294967296) {\n                  endLow -= 4294967296;\n                  endHigh += 1;\n                }\n                prevStartLow = endLow;\n                prevStartHigh = endHigh;\n                minishardIndex[(2 * minishardIndexSize + i) * 2] = endLow;\n                minishardIndex[(2 * minishardIndexSize + i) * 2 + 1] = endHigh;\n              }\n              return {\n                data: {data: minishardIndex, shardUrl: dataUrl},\n                size: minishardIndex.byteLength\n              };\n            },\n            encodeKey: (key: Uint64) => key.toString(),\n            sourceQueueLevel: 1,\n          }) as MinishardIndexSource;\n  source.sharding = sharding;\n  return source;\n}\n\nfunction findMinishardEntry(minishardIndex: DecodedMinishardIndex, key: Uint64) {\n  const minishardIndexData = minishardIndex.data;\n  const minishardIndexSize = minishardIndexData.length / 6;\n  const keyLow = key.low, keyHigh = key.high;\n  for (let i = 0; i < minishardIndexSize; ++i) {\n    if (minishardIndexData[i * 2] !== keyLow || minishardIndexData[i * 2 + 1] !== keyHigh) {\n      continue;\n    }\n    const startOffset = new Uint64(\n        minishardIndexData[(minishardIndexSize + i) * 2],\n        minishardIndexData[(minishardIndexSize + i) * 2 + 1]);\n    const endOffset = new Uint64(\n        minishardIndexData[(2 * minishardIndexSize + i) * 2],\n        minishardIndexData[(2 * minishardIndexSize + i) * 2 + 1]);\n    return {startOffset, endOffset};\n  }\n  throw new Error(`Object not found in minishard: ${key}`);\n}\n\nasync function getShardedData(\n    minishardIndexSource: MinishardIndexSource, chunk: Chunk, key: Uint64,\n    cancellationToken: CancellationToken): Promise<{shardInfo: ShardInfo, data: ArrayBuffer}> {\n  const {sharding} = minishardIndexSource;\n  const hashFunction = shardingHashFunctions.get(sharding.hash)!;\n  const hashCode = Uint64.rshift(new Uint64(), key, sharding.preshiftBits);\n  hashFunction(hashCode);\n  const shardAndMinishard =\n      Uint64.lowMask(new Uint64(), sharding.minishardBits + sharding.shardBits);\n  Uint64.and(shardAndMinishard, shardAndMinishard, hashCode);\n  const getPriority = () => ({priorityTier: chunk.priorityTier, priority: chunk.priority});\n  const minishardIndex =\n      await minishardIndexSource.getData(shardAndMinishard, getPriority, cancellationToken);\n  const {startOffset, endOffset} = findMinishardEntry(minishardIndex, key);\n  let data =\n      await fetchHttpByteRange(minishardIndex.shardUrl, startOffset, endOffset, cancellationToken);\n  if (minishardIndexSource.sharding.dataEncoding === DataEncoding.GZIP) {\n    data =\n        (await requestAsyncComputation(decodeGzip, cancellationToken, [data], new Uint8Array(data)))\n            .buffer;\n  }\n  return {data, shardInfo: {shardUrl: minishardIndex.shardUrl, offset: startOffset}};\n}\n\n\nconst chunkDecoders = new Map<VolumeChunkEncoding, ChunkDecoder>();\nchunkDecoders.set(VolumeChunkEncoding.RAW, decodeRawChunk);\nchunkDecoders.set(VolumeChunkEncoding.JPEG, decodeJpegChunk);\nchunkDecoders.set(VolumeChunkEncoding.COMPRESSED_SEGMENTATION, decodeCompressedSegmentationChunk);\n\n@registerSharedObject() export class PrecomputedVolumeChunkSource extends\n(WithParameters(VolumeChunkSource, VolumeChunkSourceParameters)) {\n  chunkDecoder = chunkDecoders.get(this.parameters.encoding)!;\n  private minishardIndexSource = getMinishardIndexDataSource(this.chunkManager, this.parameters);\n\n  gridShape = (() => {\n    const gridShape = new Uint32Array(3);\n    const {upperVoxelBound, chunkDataSize} = this.spec;\n    for (let i = 0; i < 3; ++i) {\n      gridShape[i] = Math.ceil(upperVoxelBound[i] / chunkDataSize[i]);\n    }\n    return gridShape;\n  })();\n\n  async download(chunk: VolumeChunk, cancellationToken: CancellationToken): Promise<void> {\n    const {parameters} = this;\n\n    const {minishardIndexSource} = this;\n    let response: ArrayBuffer;\n    if (minishardIndexSource === undefined) {\n      let url: string;\n      {\n        // chunkPosition must not be captured, since it will be invalidated by the next call to\n        // computeChunkBounds.\n        let chunkPosition = this.computeChunkBounds(chunk);\n        let chunkDataSize = chunk.chunkDataSize!;\n        url = `${parameters.url}/${chunkPosition[0]}-${chunkPosition[0] + chunkDataSize[0]}_` +\n            `${chunkPosition[1]}-${chunkPosition[1] + chunkDataSize[1]}_` +\n            `${chunkPosition[2]}-${chunkPosition[2] + chunkDataSize[2]}`;\n      }\n      response = await cancellableFetchOk(url, {}, responseArrayBuffer, cancellationToken);\n    } else {\n      this.computeChunkBounds(chunk);\n      const {gridShape} = this;\n      const {chunkGridPosition} = chunk;\n      const xBits = Math.ceil(Math.log2(gridShape[0])), yBits = Math.ceil(Math.log2(gridShape[1])),\n            zBits = Math.ceil(Math.log2(gridShape[2]));\n      const chunkIndex = encodeZIndexCompressed(\n          new Uint64(), xBits, yBits, zBits, chunkGridPosition[0], chunkGridPosition[1],\n          chunkGridPosition[2]);\n      response =\n          (await getShardedData(minishardIndexSource, chunk, chunkIndex, cancellationToken)).data;\n    }\n    await this.chunkDecoder(chunk, cancellationToken, response);\n  }\n}\n\nexport function decodeManifestChunk(chunk: ManifestChunk, response: any) {\n  return decodeJsonManifestChunk(chunk, response, 'fragments');\n}\n\nexport function decodeFragmentChunk(chunk: FragmentChunk, response: ArrayBuffer) {\n  let dv = new DataView(response);\n  let numVertices = dv.getUint32(0, true);\n  assignMeshFragmentData(\n      chunk,\n      decodeTriangleVertexPositionsAndIndices(\n          response, Endianness.LITTLE, /*vertexByteOffset=*/ 4, numVertices));\n}\n\n@registerSharedObject() export class PrecomputedMeshSource extends\n(WithParameters(MeshSource, MeshSourceParameters)) {\n  download(chunk: ManifestChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    return cancellableFetchOk(\n               `${parameters.url}/${chunk.objectId}:${parameters.lod}`, {}, responseJson,\n               cancellationToken)\n        .then(response => decodeManifestChunk(chunk, response));\n  }\n\n  downloadFragment(chunk: FragmentChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    return cancellableFetchOk(\n               `${parameters.url}/${chunk.fragmentId}`, {}, responseArrayBuffer, cancellationToken)\n        .then(response => decodeFragmentChunk(chunk, response));\n  }\n}\n\ninterface PrecomputedMultiscaleManifestChunk extends MultiscaleManifestChunk {\n  /**\n   * Byte offsets into data file for each octree node.\n   *\n   * Stored as Float64Array to allow 53-bit integer values.\n   */\n  offsets: Float64Array;\n  shardInfo?: ShardInfo;\n}\n\nfunction decodeMultiscaleManifestChunk(\n    chunk: PrecomputedMultiscaleManifestChunk, response: ArrayBuffer) {\n  if (response.byteLength < 28 || response.byteLength % 4 !== 0) {\n    throw new Error(`Invalid index file size: ${response.byteLength}`);\n  }\n  const dv = new DataView(response);\n  let offset = 0;\n  const chunkShape = vec3.fromValues(\n      dv.getFloat32(offset, /*littleEndian=*/ true),\n      dv.getFloat32(offset + 4, /*littleEndian=*/ true),\n      dv.getFloat32(offset + 8, /*littleEndian=*/ true));\n  offset += 12;\n  const gridOrigin = vec3.fromValues(\n      dv.getFloat32(offset, /*littleEndian=*/ true),\n      dv.getFloat32(offset + 4, /*littleEndian=*/ true),\n      dv.getFloat32(offset + 8, /*littleEndian=*/ true));\n  offset += 12;\n  const numStoredLods = dv.getUint32(offset, /*littleEndian=*/ true);\n  offset += 4\n  if (response.byteLength < offset + (4 + 4 + 4 * 3) * numStoredLods) {\n    throw new Error(`Invalid index file size for ${numStoredLods} lods: ${response.byteLength}`);\n  }\n  const storedLodScales = new Float32Array(response, offset, numStoredLods);\n  offset += 4 * numStoredLods;\n  convertEndian32(storedLodScales, Endianness.LITTLE);\n  const vertexOffsets = new Float32Array(response, offset, numStoredLods * 3);\n  convertEndian32(vertexOffsets, Endianness.LITTLE);\n  offset += 12 * numStoredLods;\n  const numFragmentsPerLod = new Uint32Array(response, offset, numStoredLods);\n  offset += 4 * numStoredLods;\n  convertEndian32(numFragmentsPerLod, Endianness.LITTLE);\n  const totalFragments = numFragmentsPerLod.reduce((a, b) => a + b);\n  if (response.byteLength !== offset + 16 * totalFragments) {\n    throw new Error(\n        `Invalid index file size for ${numStoredLods} lods and ` +\n        `${totalFragments} total fragments: ${response.byteLength}`);\n  }\n  const fragmentInfo = new Uint32Array(response, offset);\n  convertEndian32(fragmentInfo, Endianness.LITTLE);\n  const clipUpperBound =\n      vec3.fromValues(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n  const clipLowerBound =\n      vec3.fromValues(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n  let numLods = Math.max(1, storedLodScales.length);\n  {\n    let fragmentBase = 0;\n    for (let lodIndex = 0; lodIndex < numStoredLods; ++lodIndex) {\n      const numFragments = numFragmentsPerLod[lodIndex];\n      for (let i = 0; i < 3; ++i) {\n        let upperBoundValue = Number.NEGATIVE_INFINITY;\n        let lowerBoundValue = Number.POSITIVE_INFINITY;\n        const base = fragmentBase + numFragments * i;\n        for (let j = 0; j < numFragments; ++j) {\n          const v = fragmentInfo[base + j];\n          upperBoundValue = Math.max(upperBoundValue, v);\n          lowerBoundValue = Math.min(lowerBoundValue, v);\n        }\n        if (numFragments != 0) {\n          while ((upperBoundValue >>> (numLods - lodIndex - 1)) !=\n                 (lowerBoundValue >>> (numLods - lodIndex - 1))) {\n            ++numLods;\n          }\n          if (lodIndex === 0) {\n            clipLowerBound[i] = Math.min(clipLowerBound[i], (1 << lodIndex) * lowerBoundValue);\n            clipUpperBound[i] =\n                Math.max(clipUpperBound[i], (1 << lodIndex) * (upperBoundValue + 1));\n          }\n        }\n      }\n      fragmentBase += numFragments * 4;\n    }\n  }\n\n  let maxFragments = 0;\n  {\n    let prevNumFragments = 0;\n    let prevLodIndex = 0;\n    for (let lodIndex = 0; lodIndex < numStoredLods; ++lodIndex) {\n      const numFragments = numFragmentsPerLod[lodIndex];\n      maxFragments += prevNumFragments * (lodIndex - prevLodIndex);\n      prevLodIndex = lodIndex;\n      prevNumFragments = numFragments;\n      maxFragments += numFragments;\n    }\n    maxFragments += (numLods - 1 - prevLodIndex) * prevNumFragments;\n  }\n  const octreeTemp = new Uint32Array(5 * maxFragments);\n  const offsetsTemp = new Float64Array(maxFragments + 1);\n  let octree: Uint32Array;\n  {\n    let priorStart = 0;\n    let baseRow = 0;\n    let dataOffset = 0;\n    let fragmentBase = 0;\n    for (let lodIndex = 0; lodIndex < numStoredLods; ++lodIndex) {\n      const numFragments = numFragmentsPerLod[lodIndex];\n      // Copy in indices\n      for (let j = 0; j < numFragments; ++j) {\n        for (let i = 0; i < 3; ++i) {\n          octreeTemp[5 * (baseRow + j) + i] = fragmentInfo[fragmentBase + j + i * numFragments];\n        }\n        const dataSize = fragmentInfo[fragmentBase + j + 3 * numFragments];\n        dataOffset += dataSize;\n        offsetsTemp[baseRow + j + 1] = dataOffset;\n        if (dataSize === 0) {\n          // Mark node as empty.\n          octreeTemp[5 * (baseRow + j) + 4] = 0x80000000;\n        }\n      }\n\n      fragmentBase += 4 * numFragments;\n\n      if (lodIndex !== 0) {\n        // Connect with prior level\n        computeOctreeChildOffsets(octreeTemp, priorStart, baseRow, baseRow + numFragments);\n      }\n\n      priorStart = baseRow;\n      baseRow += numFragments;\n      while (lodIndex + 1 < numLods &&\n             (lodIndex + 1 >= storedLodScales.length || storedLodScales[lodIndex + 1] === 0)) {\n        const curEnd = generateHigherOctreeLevel(octreeTemp, priorStart, baseRow);\n        offsetsTemp.fill(dataOffset, baseRow + 1, curEnd + 1);\n        priorStart = baseRow;\n        baseRow = curEnd;\n        ++lodIndex;\n      }\n    }\n    octree = octreeTemp.slice(0, 5 * baseRow);\n    chunk.offsets = offsetsTemp.slice(0, baseRow + 1);\n  }\n  const source = chunk.source! as PrecomputedMultiscaleMeshSource;\n  const {lodScaleMultiplier} = source.parameters.metadata;\n  const lodScales = new Float32Array(numLods);\n  lodScales.set(storedLodScales, 0);\n  for (let i = 0; i < storedLodScales.length; ++i) {\n    lodScales[i] *= lodScaleMultiplier;\n  }\n  chunk.manifest = {\n    chunkShape,\n    chunkGridSpatialOrigin: gridOrigin,\n    clipLowerBound: vec3.add(\n        clipLowerBound, gridOrigin, vec3.multiply(clipLowerBound, clipLowerBound, chunkShape)),\n    clipUpperBound: vec3.add(\n        clipUpperBound, gridOrigin, vec3.multiply(clipUpperBound, clipUpperBound, chunkShape)),\n    octree,\n    lodScales,\n    vertexOffsets,\n  };\n}\n\nasync function decodeMultiscaleFragmentChunk(\n    chunk: MultiscaleFragmentChunk, response: ArrayBuffer) {\n  const {lod} = chunk;\n  const source = chunk.manifestChunk!.source! as PrecomputedMultiscaleMeshSource;\n  const m = await import(/* webpackChunkName: \"draco\" */ 'neuroglancer/mesh/draco');\n  const rawMesh = await m.decodeDracoPartitioned(\n      new Uint8Array(response), source.parameters.metadata.vertexQuantizationBits, lod !== 0);\n  assignMultiscaleMeshFragmentData(chunk, rawMesh, source.format.vertexPositionFormat);\n}\n\n@registerSharedObject() //\nexport class PrecomputedMultiscaleMeshSource extends\n(WithParameters(MultiscaleMeshSource, MultiscaleMeshSourceParameters)) {\n  private minishardIndexSource = getMinishardIndexDataSource(\n      this.chunkManager, {url: this.parameters.url, sharding: this.parameters.metadata.sharding});\n\n  async download(chunk: PrecomputedMultiscaleManifestChunk, cancellationToken: CancellationToken):\n      Promise<void> {\n    const {parameters, minishardIndexSource} = this;\n    let data: ArrayBuffer;\n    if (minishardIndexSource === undefined) {\n      data = await cancellableFetchOk(\n          `${parameters.url}/${chunk.objectId}.index`, {}, responseArrayBuffer, cancellationToken);\n    } else {\n      ({data, shardInfo: chunk.shardInfo} =\n           await getShardedData(minishardIndexSource, chunk, chunk.objectId, cancellationToken));\n    }\n    await decodeMultiscaleManifestChunk(chunk, data);\n  }\n\n  async downloadFragment(\n      chunk: MultiscaleFragmentChunk, cancellationToken: CancellationToken): Promise<void> {\n    const {parameters} = this;\n    const manifestChunk = chunk.manifestChunk! as PrecomputedMultiscaleManifestChunk;\n    const chunkIndex = chunk.chunkIndex;\n    const {shardInfo, offsets} = manifestChunk;\n    const startOffset = offsets[chunkIndex];\n    const endOffset = offsets[chunkIndex + 1];\n    let requestUrl: string;\n    let adjustedStartOffset: Uint64|number, adjustedEndOffset: Uint64|number;\n    if (shardInfo !== undefined) {\n      requestUrl = shardInfo.shardUrl;\n      const fullDataSize = offsets[offsets.length - 1];\n      let startLow = shardInfo.offset.low - fullDataSize + startOffset;\n      let startHigh = shardInfo.offset.high;\n      let endLow = startLow + endOffset - startOffset;\n      let endHigh = startHigh;\n      while (startLow < 0) {\n        startLow += 4294967296;\n        startHigh -= 1;\n      }\n      while (endLow < 0) {\n        endLow += 4294967296;\n        endHigh -= 1;\n      }\n      while (endLow > 4294967296) {\n        endLow -= 4294967296;\n        endHigh += 1;\n      }\n      adjustedStartOffset = new Uint64(startLow, startHigh);\n      adjustedEndOffset = new Uint64(endLow, endHigh);\n    } else {\n      requestUrl = `${parameters.url}/${manifestChunk.objectId}`;\n      adjustedStartOffset = startOffset;\n      adjustedEndOffset = endOffset;\n    }\n    const response = await fetchHttpByteRange(\n        requestUrl, adjustedStartOffset, adjustedEndOffset, cancellationToken);\n    await decodeMultiscaleFragmentChunk(chunk, response);\n  }\n}\n\n@registerSharedObject() //\nexport class PrecomputedSkeletonSource extends\n(WithParameters(SkeletonSource, SkeletonSourceParameters)) {\n  private minishardIndexSource = getMinishardIndexDataSource(\n      this.chunkManager, {url: this.parameters.url, sharding: this.parameters.metadata.sharding});\n  async download(chunk: SkeletonChunk, cancellationToken: CancellationToken) {\n    const {minishardIndexSource, parameters} = this;\n    let response: ArrayBuffer;\n    if (minishardIndexSource === undefined) {\n      response = await cancellableFetchOk(\n          `${parameters.url}/${chunk.objectId}`, {}, responseArrayBuffer, cancellationToken);\n    } else {\n      response =\n          (await getShardedData(minishardIndexSource, chunk, chunk.objectId, cancellationToken))\n              .data;\n    }\n    decodeSkeletonChunk(chunk, response, parameters.metadata.vertexAttributes);\n  }\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {decodeSkeletonVertexPositionsAndIndices, SkeletonChunk} from 'neuroglancer/skeleton/backend';\nimport {VertexAttributeInfo} from 'neuroglancer/skeleton/base';\nimport {DATA_TYPE_BYTES} from 'neuroglancer/util/data_type';\nimport {convertEndian16, convertEndian32, Endianness} from 'neuroglancer/util/endian';\n\nexport function decodeSkeletonChunk(\n    chunk: SkeletonChunk, response: ArrayBuffer,\n    vertexAttributes: Map<string, VertexAttributeInfo>) {\n  let dv = new DataView(response);\n  let numVertices = dv.getUint32(0, true);\n  let numEdges = dv.getUint32(4, true);\n\n  const vertexPositionsStartOffset = 8;\n\n  let curOffset = 8 + numVertices * 4 * 3;\n  decodeSkeletonVertexPositionsAndIndices(\n      chunk, response, Endianness.LITTLE, /*vertexByteOffset=*/ vertexPositionsStartOffset,\n      numVertices,\n      /*indexByteOffset=*/ curOffset, /*numEdges=*/ numEdges);\n  curOffset += numEdges * 4 * 2;\n  let attributes: Uint8Array[] = [];\n  for (let info of vertexAttributes.values()) {\n    const bytesPerVertex = DATA_TYPE_BYTES[info.dataType] * info.numComponents;\n    const totalBytes = bytesPerVertex * numVertices;\n    const attribute = new Uint8Array(response, curOffset, totalBytes);\n    switch (bytesPerVertex) {\n      case 2:\n        convertEndian16(attribute, Endianness.LITTLE);\n        break;\n      case 4:\n      case 8:\n        convertEndian32(attribute, Endianness.LITTLE);\n        break;\n    }\n    attributes.push(attribute);\n    curOffset += totalBytes;\n  }\n  chunk.vertexAttributes = attributes;\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CredentialsProvider} from 'neuroglancer/credentials_provider';\nimport {fetchWithCredentials} from 'neuroglancer/credentials_provider/http_request';\nimport {CancellationToken, uncancelableToken} from 'neuroglancer/util/cancellation';\nimport {responseArrayBuffer, responseJson} from 'neuroglancer/util/http_request';\n\nexport type BrainmapsCredentialsProvider = CredentialsProvider<Credentials>;\n\n/**\n * OAuth2 token\n */\nexport interface Credentials {\n  tokenType: string;\n  accessToken: string;\n}\n\n/**\n * Key used for retrieving the CredentialsProvider from a CredentialsManager.\n */\nexport const credentialsKey = 'google-brainmaps';\n\nexport interface BrainmapsInstance {\n  description: string;\n  /**\n   * One or more server URLs to use to connect to the instance.\n   */\n  serverUrl: string;\n}\n\n/**\n * API-related interfaces.\n */\n\nexport interface ChangeSpecPayload {\n  change_stack_id?: string;\n  time_stamp?: number;\n  skip_equivalences?: boolean;\n}\n\nexport interface ChangeStackAwarePayload {\n  change_spec?: ChangeSpecPayload;\n}\n\nexport interface GeometryPayload {\n  corner: string;\n  size: string;\n  scale: number;\n}\n\nexport interface GeometryAwarePayload {\n  geometry: GeometryPayload;\n}\n\nexport interface ImageFormatOptionsPayload {\n  image_format?: 'AUTO'|'JPEG'|'PNG'|'JSON';\n  jpeg_quality?: number;\n  compressed_segmentation_block_size?: string;\n}\n\nexport interface SubvolumePayload extends ChangeStackAwarePayload, GeometryAwarePayload {\n  image_format_options?: ImageFormatOptionsPayload;\n  subvolume_format?: 'RAW'|'SINGLE_IMAGE';\n}\n\nexport interface SkeletonPayload extends ChangeStackAwarePayload {\n  object_id: string;\n}\n\nexport interface MeshFragmentPayload extends ChangeStackAwarePayload {\n  fragment_key: string;\n  object_id: string;\n}\n\nexport interface BatchMeshFragment {\n  object_id: string;\n  fragment_keys: string[];\n}\n\nexport interface BatchMeshFragmentPayload {\n  volume_id: string;\n  mesh_name: string;\n  batches: BatchMeshFragment[];\n}\n\nexport interface HttpCall {\n  method: 'GET'|'POST';\n  path: string;\n  payload?: string;\n}\n\nexport function makeRequest(\n    instance: BrainmapsInstance, credentialsProvider: BrainmapsCredentialsProvider,\n    httpCall: HttpCall&{responseType: 'arraybuffer'},\n    cancellationToken?: CancellationToken): Promise<ArrayBuffer>;\nexport function makeRequest(\n    instance: BrainmapsInstance, credentialsProvider: BrainmapsCredentialsProvider,\n    httpCall: HttpCall&{responseType: 'json'}, cancellationToken?: CancellationToken): Promise<any>;\n\nexport function makeRequest(\n    instance: BrainmapsInstance, credentialsProvider: BrainmapsCredentialsProvider,\n    httpCall: HttpCall&{responseType: XMLHttpRequestResponseType},\n    cancellationToken: CancellationToken = uncancelableToken): any {\n  return fetchWithCredentials(\n      credentialsProvider, `${instance.serverUrl}${httpCall.path}`,\n      {method: httpCall.method, body: httpCall.payload},\n      httpCall.responseType === 'json' ? responseJson : responseArrayBuffer,\n      (credentials, init) => {\n        const headers = new Headers(init.headers);\n        headers.set('Authorization', `${credentials.tokenType} ${credentials.accessToken}`);\n        return {...init, headers};\n      },\n      error => {\n        const {status} = error;\n        if (status === 401) {\n          // 401: Authorization needed.  OAuth2 token may have expired.\n          return 'refresh';\n        } else if (status === 504 || status === 503) {\n          // 503: Service unavailable.  Retry.\n          // 504: Gateway timeout.  Can occur if the server takes too long to reply.  Retry.\n          return 'retry';\n        }\n        throw error;\n      },\n      cancellationToken);\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {BrainmapsInstance} from 'neuroglancer/datasource/brainmaps/api';\nimport {vec3} from 'neuroglancer/util/geom';\n\nexport enum VolumeChunkEncoding {\n  RAW,\n  JPEG,\n  COMPRESSED_SEGMENTATION\n}\n\nexport class ChangeSpec {\n  changeStackId: string;\n  /**\n   * Apply changes prior to this timestamp (in milliseconds since epoch).  If 0, no changes should\n   * be applied.  If negative, all changes should be applied.\n   */\n  timeStamp?: number;\n  skipEquivalences?: boolean;\n}\n\nexport class VolumeSourceParameters {\n  instance: BrainmapsInstance;\n  volumeId: string;\n  scaleIndex: number;\n  encoding: VolumeChunkEncoding;\n  changeSpec: ChangeSpec|undefined;\n\n  static RPC_ID = 'brainmaps/VolumeChunkSource';\n}\n\nexport interface SingleMeshInfo {\n  name: string;\n  type: string;\n}\n\nexport interface MultiscaleMeshLOD {\n  info: SingleMeshInfo;\n  scale: number;\n\n  /**\n   * Shape of the chunk for this level of detail, as a multiple of the base chunk shape.\n   */\n  relativeBlockShape: vec3;\n\n  /**\n   * Size of chunk grid, in chunks.\n   */\n  gridShape: Uint32Array;\n}\n\nexport interface MultiscaleMeshInfo {\n  /**\n   * Prefix\n   */\n  key: string;\n\n  /**\n   * Chunk shape in spatial units (nm) for lod 0.\n   */\n  chunkShape: vec3;\n\n  lods: MultiscaleMeshLOD[];\n}\n\nexport class MultiscaleMeshSourceParameters {\n  instance: BrainmapsInstance;\n  volumeId: string;\n  info: MultiscaleMeshInfo;\n  changeSpec: ChangeSpec|undefined;\n\n  static RPC_ID = 'brainmaps/MultiscaleMeshSource';\n}\n\nexport class MeshSourceParameters  {\n  instance: BrainmapsInstance;\n  volumeId: string;\n  meshName: string;\n  changeSpec: ChangeSpec|undefined;\n  \n  static RPC_ID = 'brainmaps/MeshSource';\n}\n\nexport class SkeletonSourceParameters  {\n  instance: BrainmapsInstance;\n  volumeId: string;\n  meshName: string;\n  changeSpec: ChangeSpec|undefined;\n  \n  static RPC_ID = 'brainmaps/SkeletonSource';\n}\n\nexport class AnnotationSourceParameters {\n  instance: BrainmapsInstance;\n  volumeId: string;\n  changestack: string;\n\n  static RPC_ID = 'brainmaps/Annotation';\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Annotation, AnnotationId, AnnotationSerializer, AnnotationType} from 'neuroglancer/annotation';\nimport {AnnotationGeometryChunk, AnnotationGeometryData, AnnotationMetadataChunk, AnnotationSource, AnnotationSubsetGeometryChunk} from 'neuroglancer/annotation/backend';\nimport {WithParameters} from 'neuroglancer/chunk_manager/backend';\nimport {ChunkSourceParametersConstructor} from 'neuroglancer/chunk_manager/base';\nimport {CredentialsProvider} from 'neuroglancer/credentials_provider';\nimport {WithSharedCredentialsProviderCounterpart} from 'neuroglancer/credentials_provider/shared_counterpart';\nimport {BatchMeshFragment, BatchMeshFragmentPayload, BrainmapsInstance, ChangeStackAwarePayload, Credentials, makeRequest, SkeletonPayload, SubvolumePayload} from 'neuroglancer/datasource/brainmaps/api';\nimport {AnnotationSourceParameters, ChangeSpec, MeshSourceParameters, MultiscaleMeshSourceParameters, SkeletonSourceParameters, VolumeChunkEncoding, VolumeSourceParameters} from 'neuroglancer/datasource/brainmaps/base';\nimport {assignMeshFragmentData, assignMultiscaleMeshFragmentData, FragmentChunk, generateHigherOctreeLevel, ManifestChunk, MeshSource, MultiscaleFragmentChunk, MultiscaleManifestChunk, MultiscaleMeshSource} from 'neuroglancer/mesh/backend';\nimport {VertexPositionFormat} from 'neuroglancer/mesh/base';\nimport {MultiscaleMeshManifest} from 'neuroglancer/mesh/multiscale';\nimport {decodeSkeletonVertexPositionsAndIndices, SkeletonChunk, SkeletonSource} from 'neuroglancer/skeleton/backend';\nimport {decodeCompressedSegmentationChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/compressed_segmentation';\nimport {decodeJpegChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/jpeg';\nimport {decodeRawChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/raw';\nimport {VolumeChunk, VolumeChunkSource} from 'neuroglancer/sliceview/volume/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {convertEndian32, Endianness} from 'neuroglancer/util/endian';\nimport {kInfinityVec, kZeroVec, vec3, vec3Key} from 'neuroglancer/util/geom';\nimport {parseArray, parseFixedLengthArray, verifyObject, verifyObjectProperty, verifyOptionalString, verifyString, verifyStringArray} from 'neuroglancer/util/json';\nimport {Uint64} from 'neuroglancer/util/uint64';\nimport { decodeZIndexCompressed, getOctreeChildIndex, zorder3LessThan, encodeZIndexCompressed} from 'neuroglancer/util/zorder';\nimport {registerSharedObject, SharedObject} from 'neuroglancer/worker_rpc';\n\nconst CHUNK_DECODERS = new Map([\n  [\n    VolumeChunkEncoding.RAW,\n    decodeRawChunk,\n  ],\n  [VolumeChunkEncoding.JPEG, decodeJpegChunk],\n  [\n    VolumeChunkEncoding.COMPRESSED_SEGMENTATION,\n    decodeCompressedSegmentationChunk,\n  ]\n]);\n\nfunction applyChangeStack(changeStack: ChangeSpec|undefined, payload: ChangeStackAwarePayload) {\n  if (!changeStack) {\n    return;\n  }\n  payload.change_spec = {\n    change_stack_id: changeStack.changeStackId,\n  };\n  if (changeStack.timeStamp) {\n    payload.change_spec.time_stamp = changeStack.timeStamp;\n  }\n  if (changeStack.skipEquivalences) {\n    payload.change_spec.skip_equivalences = changeStack.skipEquivalences;\n  }\n}\n\nfunction BrainmapsSource<Parameters, TBase extends {new (...args: any[]): SharedObject}>(\n    Base: TBase, parametersConstructor: ChunkSourceParametersConstructor<Parameters>) {\n  return WithParameters(\n      WithSharedCredentialsProviderCounterpart<Credentials>()(Base), parametersConstructor);\n}\n\nconst tempUint64 = new Uint64();\n\n@registerSharedObject()\nexport class BrainmapsVolumeChunkSource extends\n(BrainmapsSource(VolumeChunkSource, VolumeSourceParameters)) {\n  chunkDecoder = CHUNK_DECODERS.get(this.parameters.encoding)!;\n\n  private applyEncodingParams(payload: SubvolumePayload) {\n    let {encoding} = this.parameters;\n    switch (encoding) {\n      case VolumeChunkEncoding.RAW:\n        payload.subvolume_format = 'RAW';\n        break;\n      case VolumeChunkEncoding.JPEG:\n        payload.subvolume_format = 'SINGLE_IMAGE';\n        payload.image_format_options = {\n          image_format: 'JPEG',\n          jpeg_quality: 70,\n        };\n        return;\n      case VolumeChunkEncoding.COMPRESSED_SEGMENTATION:\n        payload.subvolume_format = 'RAW';\n        payload.image_format_options = {\n          compressed_segmentation_block_size: vec3Key(this.spec.compressedSegmentationBlockSize!),\n        };\n        break;\n      default:\n        throw new Error(`Invalid encoding: ${encoding}`);\n    }\n  }\n\n  async download(chunk: VolumeChunk, cancellationToken: CancellationToken) {\n    let {parameters} = this;\n    let path: string;\n\n    // chunkPosition must not be captured, since it will be invalidated by the next call to\n    // computeChunkBounds.\n    let chunkPosition = this.computeChunkBounds(chunk);\n    let chunkDataSize = chunk.chunkDataSize!;\n    path = `/v1/volumes/${parameters['volumeId']}/subvolume:binary`;\n\n    let payload: SubvolumePayload = {\n      geometry: {\n        corner: vec3Key(chunkPosition),\n        size: vec3Key(chunkDataSize),\n        scale: parameters.scaleIndex,\n      },\n    };\n\n    this.applyEncodingParams(payload);\n    applyChangeStack(parameters.changeSpec, payload);\n\n    const response = await makeRequest(\n        parameters['instance'], this.credentialsProvider, {\n          method: 'POST',\n          payload: JSON.stringify(payload),\n          path,\n          responseType: 'arraybuffer',\n        },\n        cancellationToken);\n    await this.chunkDecoder(chunk, cancellationToken, response);\n  }\n}\n\nfunction getFragmentCorner(\n    fragmentId: string, xBits: number, yBits: number, zBits: number): Uint32Array {\n  const id = new Uint64();\n  if (!id.tryParseString(fragmentId, 16)) {\n    throw new Error(`Couldn't parse fragmentId ${fragmentId} as hex-encoded Uint64`);\n  }\n  return decodeZIndexCompressed(id, xBits, yBits, zBits);\n}\n\ninterface BrainmapsMultiscaleManifestChunk extends MultiscaleManifestChunk {\n  fragmentSupervoxelIds: {fragmentId: string, supervoxelIds: string[]}[];\n}\n\nfunction decodeMultiscaleManifestChunk(chunk: BrainmapsMultiscaleManifestChunk, response: any) {\n  verifyObject(response);\n  const source = chunk.source as BrainmapsMultiscaleMeshSource;\n  const fragmentKeys = verifyObjectProperty(response, 'fragmentKey', verifyStringArray);\n  const supervoxelIds = verifyObjectProperty(response, 'supervoxelId', verifyStringArray);\n  const length = fragmentKeys.length;\n  if (length !== supervoxelIds.length) {\n    throw new Error('Expected fragmentKey and supervoxelId arrays to have the same length.');\n  }\n  const fragmentSupervoxelIds = new Map<string, string[]>();\n  fragmentKeys.forEach((fragmentId, i) => {\n    let ids = fragmentSupervoxelIds.get(fragmentId);\n    if (ids === undefined) {\n      ids = [];\n      fragmentSupervoxelIds.set(fragmentId, ids);\n    }\n    ids.push(supervoxelIds[i]);\n  });\n  const {chunkShape} = source.parameters.info;\n  const gridShape = source.parameters.info.lods[0].gridShape;\n  const xBits = Math.ceil(Math.log2(gridShape[0])), yBits = Math.ceil(Math.log2(gridShape[1])),\n        zBits = Math.ceil(Math.log2(gridShape[2]));\n  const fragmentIdAndCorners =\n      Array.from(fragmentSupervoxelIds.entries()).map(([id, supervoxelIds]) => ({\n                                                        fragmentId: id,\n                                                        corner: getFragmentCorner(\n                                                            id, xBits, yBits, zBits),\n                                                        supervoxelIds\n                                                      }));\n  fragmentIdAndCorners.sort((a, b) => {\n    return zorder3LessThan(\n               a.corner[0], a.corner[1], a.corner[2], b.corner[0], b.corner[1], b.corner[2]) ?\n        -1 :\n        1;\n  });\n  let clipLowerBound: vec3, clipUpperBound: vec3;\n  let minNumLods = 0;\n  let octree: Uint32Array;\n  if (length === 0) {\n    clipLowerBound = clipUpperBound = kZeroVec;\n    octree = Uint32Array.of(0, 0, 0, 0, 0x80000000);\n  } else {\n    const minCoord = vec3.clone(kInfinityVec);\n    const maxCoord = vec3.clone(kZeroVec);\n    fragmentIdAndCorners.forEach(x => {\n      const {corner} = x;\n      for (let i = 0; i < 3; ++i) {\n        minCoord[i] = Math.min(minCoord[i], corner[i]);\n        maxCoord[i] = Math.max(maxCoord[i], corner[i]);\n      }\n    });\n    minNumLods = 1;\n    while ((maxCoord[0] >>> (minNumLods - 1)) != (minCoord[0] >>> (minNumLods - 1)) ||\n           (maxCoord[1] >>> (minNumLods - 1)) != (minCoord[1] >>> (minNumLods - 1)) ||\n           (maxCoord[2] >>> (minNumLods - 1)) != (minCoord[2] >>> (minNumLods - 1))) {\n      ++minNumLods;\n    }\n    clipLowerBound = vec3.multiply(minCoord, minCoord, chunkShape);\n    clipUpperBound = vec3.add(maxCoord, vec3.multiply(maxCoord, maxCoord, chunkShape), chunkShape);\n  }\n  const {lods} = source.parameters.info;\n  const lodScales = new Float32Array(Math.max(lods.length, minNumLods));\n  for (let lodIndex = 0; lodIndex < lods.length; ++lodIndex) {\n    lodScales[lodIndex] = lods[lodIndex].scale;\n  }\n\n  if (length !== 0) {\n    const octreeTemp = new Uint32Array(fragmentIdAndCorners.length * lodScales.length * 5);\n    fragmentIdAndCorners.forEach((x, i) => {\n      octreeTemp.set(x.corner, i * 5);\n      octreeTemp[i * 5] = x.corner[0];\n    });\n    let priorStart = 0;\n    let priorEnd = fragmentIdAndCorners.length;\n    for (let lod = 1; lod < lodScales.length; ++lod) {\n      const curEnd = generateHigherOctreeLevel(octreeTemp, priorStart, priorEnd);\n      priorStart = priorEnd;\n      priorEnd = curEnd;\n    }\n    octree = octreeTemp.slice(0, priorEnd * 5);\n  }\n\n  const manifest: MultiscaleMeshManifest = {\n    chunkShape,\n    chunkGridSpatialOrigin: kZeroVec,\n    clipLowerBound,\n    clipUpperBound,\n    octree: octree!,\n    lodScales: lodScales,\n    vertexOffsets: new Float32Array(lodScales.length * 3),\n  };\n  chunk.manifest = manifest;\n  chunk.fragmentSupervoxelIds = fragmentIdAndCorners;\n}\n\nconst maxMeshBatchSize = 100;\n\ninterface BatchMeshResponseFragment {\n  fullKey: string;\n  buffer: ArrayBuffer;\n  verticesOffset: number;\n  indicesOffset: number;\n  numVertices: number;\n  numIndices: number;\n}\n\nfunction decodeBatchMeshResponse(\n    response: ArrayBuffer, callback: (fragment: BatchMeshResponseFragment) => void) {\n  let length = response.byteLength;\n  let index = 0;\n  const dataView = new DataView(response);\n  const headerSize =\n      /*object id*/ 8 + /*fragment key length*/ 8 + /*num vertices*/ 8 + /*num triangles*/ 8;\n  while (index < length) {\n    if (index + headerSize > length) {\n      throw new Error(`Invalid batch mesh fragment response.`);\n    }\n    const objectIdLow = dataView.getUint32(index, /*littleEndian=*/ true);\n    const objectIdHigh = dataView.getUint32(index + 4, /*littleEndian=*/ true);\n    const objectIdString = new Uint64(objectIdLow, objectIdHigh).toString();\n    const prefix = objectIdString + '\\0';\n    index += 8;\n    const fragmentKeyLength = dataView.getUint32(index, /*littleEndian=*/ true);\n    const fragmentKeyLengthHigh = dataView.getUint32(index + 4, /*littleEndian=*/ true);\n    index += 8;\n    if (fragmentKeyLengthHigh !== 0) {\n      throw new Error(`Invalid batch mesh fragment response.`);\n    }\n    if (index + fragmentKeyLength + /* num vertices */ 8 + /*num indices*/ 8 > length) {\n      throw new Error(`Invalid batch mesh fragment response.`);\n    }\n    const fragmentKey =\n        new TextDecoder().decode(new Uint8Array(response, index, fragmentKeyLength));\n    const fullKey = prefix + fragmentKey;\n    index += fragmentKeyLength;\n    const numVertices = dataView.getUint32(index, /*littleEndian=*/ true);\n    const numVerticesHigh = dataView.getUint32(index + 4, /*littleEndian=*/ true);\n    index += 8;\n    const numTriangles = dataView.getUint32(index, /*littleEndian=*/ true);\n    const numTrianglesHigh = dataView.getUint32(index + 4, /*littleEndian=*/ true);\n    index += 8;\n    if (numVerticesHigh !== 0 || numTrianglesHigh !== 0) {\n      throw new Error(`Invalid batch mesh fragment response.`);\n    }\n    const endOffset = index + numTriangles * 12 + numVertices * 12;\n    if (endOffset > length) {\n      throw new Error(`Invalid batch mesh fragment response.`);\n    }\n    callback({\n      fullKey,\n      buffer: response,\n      verticesOffset: index,\n      numVertices,\n      indicesOffset: index + 12 * numVertices,\n      numIndices: numTriangles * 3,\n    });\n    index = endOffset;\n  }\n}\n\nfunction combineBatchMeshFragments(fragments: BatchMeshResponseFragment[]) {\n  let totalVertices = 0, totalIndices = 0;\n  for (let fragment of fragments) {\n    totalVertices += fragment.numVertices;\n    totalIndices += fragment.numIndices;\n  }\n  const vertexBuffer = new Float32Array(totalVertices * 3);\n  const indexBuffer = new Uint32Array(totalIndices);\n  let vertexOffset = 0;\n  let indexOffset = 0;\n  for (const fragment of fragments) {\n    vertexBuffer.set(\n        new Float32Array(fragment.buffer, fragment.verticesOffset, fragment.numVertices * 3),\n        vertexOffset * 3);\n    const {numIndices} = fragment;\n    const sourceIndices = new Uint32Array(fragment.buffer, fragment.indicesOffset, numIndices);\n    convertEndian32(sourceIndices, Endianness.LITTLE);\n    for (let i = 0; i < numIndices; ++i) {\n      indexBuffer[indexOffset++] = sourceIndices[i] + vertexOffset;\n    }\n    vertexOffset += fragment.numVertices;\n  }\n  convertEndian32(vertexBuffer, Endianness.LITTLE);\n  return {vertexPositions: vertexBuffer, indices: indexBuffer};\n}\n\nfunction makeBatchMeshRequest(\n    credentialsProvider: CredentialsProvider<Credentials>,\n    parameters: {instance: BrainmapsInstance, volumeId: string, meshName: string},\n    ids: Iterable<string>, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n  const path = `/v1/objects/meshes:batch`;\n\n  const batches: BatchMeshFragment[] = [];\n  let prevObjectId: string|undefined;\n  let batchSize = 0;\n  for (const id of ids) {\n    const splitIndex = id.indexOf('\\0');\n    const objectId = id.substring(0, splitIndex);\n    const fragmentId = id.substring(splitIndex + 1);\n    if (objectId !== prevObjectId) {\n      batches.push({object_id: objectId, fragment_keys: []});\n    }\n    batches[batches.length - 1].fragment_keys.push(fragmentId);\n    if (++batchSize === maxMeshBatchSize) break;\n  }\n  const payload: BatchMeshFragmentPayload = {\n    volume_id: parameters.volumeId,\n    mesh_name: parameters.meshName,\n    batches: batches,\n  };\n  return makeRequest(\n      parameters['instance'], credentialsProvider, {\n        method: 'POST',\n        path,\n        payload: JSON.stringify(payload),\n        responseType: 'arraybuffer',\n      },\n      cancellationToken);\n}\n\n@registerSharedObject() export class BrainmapsMultiscaleMeshSource extends\n(BrainmapsSource(MultiscaleMeshSource, MultiscaleMeshSourceParameters)) {\n  private listFragmentsParams = (() => {\n    const {parameters} = this;\n    const {changeSpec} = parameters;\n    if (changeSpec !== undefined) {\n      return `&header.changeStackId=${changeSpec.changeStackId}`;\n    }\n    return '';\n  })();\n\n  download(chunk: BrainmapsMultiscaleManifestChunk, cancellationToken: CancellationToken) {\n    let {parameters} = this;\n    const path = `/v1/objects/${parameters['volumeId']}/meshes/` +\n        `${parameters.info.lods[0].info.name}:listfragments?` +\n        `object_id=${chunk.objectId}&return_supervoxel_ids=true` + this.listFragmentsParams;\n    return makeRequest(\n               parameters['instance'], this.credentialsProvider, {\n                 method: 'GET',\n                 path,\n                 responseType: 'json',\n               },\n               cancellationToken)\n        .then(response => decodeMultiscaleManifestChunk(chunk, response));\n  }\n\n  downloadFragment(chunk: MultiscaleFragmentChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n\n    const manifestChunk = chunk.manifestChunk! as BrainmapsMultiscaleManifestChunk;\n    const {fragmentSupervoxelIds} = manifestChunk;\n    const manifest = manifestChunk.manifest!;\n    const {lod} = chunk;\n    const {octree} = manifest;\n    const numBaseChunks = fragmentSupervoxelIds.length;\n    const row = chunk.chunkIndex;\n    let startChunkIndex = row;\n    while (startChunkIndex >= numBaseChunks) {\n      startChunkIndex = octree[startChunkIndex * 5 + 3];\n    }\n    let endChunkIndex = row + 1;\n    while (endChunkIndex > numBaseChunks) {\n      endChunkIndex = octree[endChunkIndex * 5 - 1] & 0x7FFFFFFF;\n    }\n    const {relativeBlockShape, gridShape} = parameters.info.lods[lod];\n    const xBits = Math.ceil(Math.log2(gridShape[0])), yBits = Math.ceil(Math.log2(gridShape[1])),\n          zBits = Math.ceil(Math.log2(gridShape[2]));\n\n    let ids = new Map<string, number>();\n    for (let chunkIndex = startChunkIndex; chunkIndex < endChunkIndex; ++chunkIndex) {\n      // Determine number of x, y, and z bits to skip.\n      const gridX = Math.floor(octree[chunkIndex * 5] / relativeBlockShape[0]),\n            gridY = Math.floor(octree[chunkIndex * 5 + 1] / relativeBlockShape[1]),\n            gridZ = Math.floor(octree[chunkIndex * 5 + 2] / relativeBlockShape[2]);\n      const fragmentKey =\n          encodeZIndexCompressed(tempUint64, xBits, yBits, zBits, gridX, gridY, gridZ)\n              .toString(16)\n              .padStart(16, '0');\n      const entry = fragmentSupervoxelIds[chunkIndex];\n      for (const supervoxelId of entry.supervoxelIds) {\n        ids.set(supervoxelId + '\\0' + fragmentKey, chunkIndex);\n      }\n    }\n\n    let prevLod = Math.max(0, lod - 1);\n\n    let fragments: (BatchMeshResponseFragment&{chunkIndex: number})[] = [];\n\n    const idArray = Array.from(ids);\n    idArray.sort((a, b) => a[0].localeCompare(b[0]));\n    ids = new Map(idArray);\n\n    function copyMeshData() {\n      fragments.sort((a, b) => a.chunkIndex - b.chunkIndex);\n      let indexOffset = 0;\n      const numSubChunks = 1 << (3 * (lod - prevLod));\n      const subChunkOffsets = new Uint32Array(numSubChunks + 1);\n      let prevSubChunkIndex = 0;\n      for (const fragment of fragments) {\n        const row = fragment.chunkIndex;\n        const subChunkIndex = getOctreeChildIndex(\n                                  octree[row * 5] >>> prevLod, octree[row * 5 + 1] >>> prevLod,\n                                  octree[row * 5 + 2] >>> prevLod) &\n            (numSubChunks - 1);\n        subChunkOffsets.fill(indexOffset, prevSubChunkIndex + 1, subChunkIndex + 1);\n        prevSubChunkIndex = subChunkIndex;\n        indexOffset += fragment.numIndices;\n      }\n      subChunkOffsets.fill(indexOffset, prevSubChunkIndex + 1, numSubChunks + 1);\n      assignMultiscaleMeshFragmentData(\n          chunk, {...combineBatchMeshFragments(fragments), subChunkOffsets},\n          VertexPositionFormat.float32);\n    }\n    function decodeResponse(response: ArrayBuffer): Promise<void>|void {\n      decodeBatchMeshResponse(\n          response, (fragment: BatchMeshResponseFragment&{chunkIndex: number}) => {\n            const chunkIndex = ids.get(fragment.fullKey)!;\n            if (!ids.delete(fragment.fullKey)) {\n              throw new Error(\n                  `Received unexpected fragment key: ${JSON.stringify(fragment.fullKey)}.`);\n            }\n            fragment.chunkIndex = chunkIndex;\n            fragments.push(fragment);\n          });\n\n      if (ids.size !== 0) {\n        // Partial response received.\n        return makeBatchRequest();\n      }\n      copyMeshData();\n    }\n\n    const {credentialsProvider} = this;\n\n    const meshName = parameters.info.lods[lod].info.name;\n\n    function makeBatchRequest(): Promise<void> {\n      return makeBatchMeshRequest(\n                 credentialsProvider,\n                 {instance: parameters.instance, volumeId: parameters.volumeId, meshName},\n                 ids.keys(), cancellationToken)\n          .then(decodeResponse);\n    }\n    return makeBatchRequest();\n  }\n}\n\nfunction groupFragmentsIntoBatches(ids: string[]) {\n  const batches = [];\n  let index = 0;\n  const length = ids.length;\n  while (index < length) {\n    batches.push(JSON.stringify(ids.slice(index, index + maxMeshBatchSize)));\n    index += maxMeshBatchSize;\n  }\n  return batches;\n}\n\nfunction decodeManifestChunkWithSupervoxelIds(chunk: ManifestChunk, response: any) {\n  verifyObject(response);\n  const fragmentKeys = verifyObjectProperty(response, 'fragmentKey', verifyStringArray);\n  const supervoxelIds = verifyObjectProperty(response, 'supervoxelId', verifyStringArray);\n  const length = fragmentKeys.length;\n  if (length !== supervoxelIds.length) {\n    throw new Error('Expected fragmentKey and supervoxelId arrays to have the same length.');\n  }\n  let fragmentIds =\n      supervoxelIds.map((supervoxelId, index) => supervoxelId + '\\0' + fragmentKeys[index]);\n  chunk.fragmentIds = groupFragmentsIntoBatches(fragmentIds);\n}\n\n@registerSharedObject() export class BrainmapsMeshSource extends\n(BrainmapsSource(MeshSource, MeshSourceParameters)) {\n  private listFragmentsParams = (() => {\n    const {parameters} = this;\n    const {changeSpec} = parameters;\n    if (changeSpec !== undefined) {\n      return `&header.changeStackId=${changeSpec.changeStackId}`;\n    }\n    return '';\n  })();\n\n  download(chunk: ManifestChunk, cancellationToken: CancellationToken) {\n    let {parameters} = this;\n    const path = `/v1/objects/${parameters['volumeId']}/meshes/` +\n        `${parameters['meshName']}:listfragments?` +\n        `object_id=${chunk.objectId}&return_supervoxel_ids=true` + this.listFragmentsParams;\n    return makeRequest(\n               parameters['instance'], this.credentialsProvider, {\n                 method: 'GET',\n                 path,\n                 responseType: 'json',\n               },\n               cancellationToken)\n        .then(response => decodeManifestChunkWithSupervoxelIds(chunk, response));\n  }\n\n  downloadFragment(chunk: FragmentChunk, cancellationToken: CancellationToken) {\n    let {parameters} = this;\n\n    const ids = new Set<string>(JSON.parse(chunk.fragmentId!));\n\n    let fragments: BatchMeshResponseFragment[] = [];\n\n    function copyMeshData() {\n      assignMeshFragmentData(chunk, combineBatchMeshFragments(fragments));\n    }\n\n    function decodeResponse(response: ArrayBuffer): Promise<void>|void {\n      decodeBatchMeshResponse(response, fragment => {\n        if (!ids.delete(fragment.fullKey)) {\n          throw new Error(`Received unexpected fragment key: ${JSON.stringify(fragment.fullKey)}.`);\n        }\n        fragments.push(fragment);\n      });\n\n      if (ids.size !== 0) {\n        // Partial response received.\n        return makeBatchRequest();\n      }\n      copyMeshData();\n    }\n\n    const {credentialsProvider} = this;\n\n    function makeBatchRequest(): Promise<void> {\n      return makeBatchMeshRequest(credentialsProvider, parameters, ids, cancellationToken)\n          .then(decodeResponse);\n    }\n    return makeBatchRequest();\n  }\n}\n\nfunction decodeSkeletonChunk(chunk: SkeletonChunk, response: ArrayBuffer) {\n  let dv = new DataView(response);\n  let numVertices = dv.getUint32(0, true);\n  let numVerticesHigh = dv.getUint32(4, true);\n  if (numVerticesHigh !== 0) {\n    throw new Error(`The number of vertices should not exceed 2^32-1.`);\n  }\n  let numEdges = dv.getUint32(8, true);\n  let numEdgesHigh = dv.getUint32(12, true);\n  if (numEdgesHigh !== 0) {\n    throw new Error(`The number of edges should not exceed 2^32-1.`);\n  }\n  decodeSkeletonVertexPositionsAndIndices(\n      chunk, response, Endianness.LITTLE, /*vertexByteOffset=*/ 16, numVertices,\n      /*indexByteOffset=*/ undefined, /*numEdges=*/ numEdges);\n}\n\n@registerSharedObject() export class BrainmapsSkeletonSource extends\n(BrainmapsSource(SkeletonSource, SkeletonSourceParameters)) {\n  download(chunk: SkeletonChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    let payload: SkeletonPayload = {\n      object_id: `${chunk.objectId}`,\n    };\n    const path = `/v1/objects/${parameters['volumeId']}` +\n        `/meshes/${parameters.meshName}` +\n        '/skeleton:binary';\n    applyChangeStack(parameters.changeSpec, payload);\n    return makeRequest(\n               parameters['instance'], this.credentialsProvider, {\n                 method: 'POST',\n                 path,\n                 payload: JSON.stringify(payload),\n                 responseType: 'arraybuffer',\n               },\n               cancellationToken)\n        .then(response => decodeSkeletonChunk(chunk, response));\n  }\n}\n\nconst spatialAnnotationTypes = ['LOCATION', 'LINE', 'VOLUME'];\n\nfunction parseCommaSeparatedPoint(x: string) {\n  const pattern = /(-?[0-9]+),(-?[0-9]+),(-?[0-9]+)/;\n  const cornerParts = x.match(pattern);\n  if (cornerParts === null) {\n    throw new Error(`Error parsing number triplet: ${JSON.stringify(x)}.`);\n  }\n  return vec3.fromValues(\n      parseFloat(cornerParts[1]), parseFloat(cornerParts[2]), parseFloat(cornerParts[3]));\n}\n\nfunction getIdPrefix(parameters: AnnotationSourceParameters) {\n  return parameters.volumeId + ':' + parameters.changestack + ':';\n}\n\nfunction parseBrainmapsAnnotationId(idPrefix: string, fullId: string) {\n  if (!fullId.startsWith(idPrefix)) {\n    throw new Error(`Received annotation id ${\n        JSON.stringify(fullId)} does not have expected prefix of ${JSON.stringify(idPrefix)}.`);\n  }\n  const id = fullId.substring(idPrefix.length);\n  return id;\n}\n\nfunction parseObjectLabels(obj: any): Uint64[]|undefined {\n  if (obj == null) {\n    return undefined;\n  }\n  return parseArray(obj, x => Uint64.parseString('' + x, 10));\n}\n\nfunction parseAnnotation(entry: any, idPrefix: string, expectedId?: string): Annotation {\n  const corner =\n      verifyObjectProperty(entry, 'corner', x => parseCommaSeparatedPoint(verifyString(x)));\n  const size = verifyObjectProperty(entry, 'size', x => parseCommaSeparatedPoint(verifyString(x)));\n  const description = verifyObjectProperty(entry, 'payload', verifyOptionalString);\n  const spatialAnnotationType = verifyObjectProperty(entry, 'type', verifyString);\n  const fullId = verifyObjectProperty(entry, 'id', verifyString);\n  const id = parseBrainmapsAnnotationId(idPrefix, fullId);\n  const segments = verifyObjectProperty(entry, 'objectLabels', parseObjectLabels);\n  if (expectedId !== undefined && id !== expectedId) {\n    throw new Error(`Received annotation has unexpected id ${JSON.stringify(fullId)}.`);\n  }\n  switch (spatialAnnotationType) {\n    case 'LOCATION':\n      if (vec3.equals(size, kZeroVec)) {\n        return {\n          type: AnnotationType.POINT,\n          id,\n          point: corner,\n          description,\n          segments,\n        };\n      } else {\n        const radii = vec3.scale(vec3.create(), size, 0.5);\n        const center = vec3.add(vec3.create(), corner, radii);\n        return {\n          type: AnnotationType.ELLIPSOID,\n          id,\n          center,\n          radii,\n          description,\n          segments,\n        };\n      }\n    case 'LINE':\n      return {\n        type: AnnotationType.LINE,\n        id,\n        pointA: corner,\n        pointB: vec3.add(vec3.create(), corner, size),\n        description,\n        segments,\n      };\n    case 'VOLUME':\n      return {\n        type: AnnotationType.AXIS_ALIGNED_BOUNDING_BOX,\n        id,\n        pointA: corner,\n        pointB: vec3.add(vec3.create(), corner, size),\n        description,\n        segments,\n      };\n    default:\n      throw new Error(`Unknown spatial annotation type: ${JSON.stringify(spatialAnnotationType)}.`);\n  }\n}\n\nfunction parseAnnotationResponse(response: any, idPrefix: string, expectedId?: string): Annotation {\n  verifyObject(response);\n  const entry = verifyObjectProperty(\n      response, 'annotations', x => parseFixedLengthArray(<any[]>[undefined], x, verifyObject))[0];\n  return parseAnnotation(entry, idPrefix, expectedId);\n}\n\nfunction parseAnnotations(\n    chunk: AnnotationGeometryChunk|AnnotationSubsetGeometryChunk, responses: any[]) {\n  const serializer = new AnnotationSerializer();\n  const source = <BrainmapsAnnotationSource>chunk.source.parent;\n  const idPrefix = getIdPrefix(source.parameters);\n  responses.forEach((response, responseIndex) => {\n    try {\n      verifyObject(response);\n      const annotationsArray =\n          verifyObjectProperty(response, 'annotations', x => x === undefined ? [] : x);\n      if (!Array.isArray(annotationsArray)) {\n        throw new Error(`Expected array, but received ${JSON.stringify(typeof annotationsArray)}.`);\n      }\n      for (const entry of annotationsArray) {\n        try {\n          serializer.add(parseAnnotation(entry, idPrefix));\n        } catch (e) {\n          throw new Error(`Error parsing annotation: ${e.message}`);\n        }\n      }\n    } catch (parseError) {\n      throw new Error(`Error parsing ${spatialAnnotationTypes[responseIndex]} annotations: ${\n          parseError.message}`);\n    }\n  });\n  chunk.data = Object.assign(new AnnotationGeometryData(), serializer.serialize());\n}\n\nfunction getSpatialAnnotationTypeFromId(id: string) {\n  const index = id.indexOf('.');\n  return id.substring(0, index);\n}\n\nfunction toCommaSeparated(v: vec3) {\n  return `${Math.round(v[0])},${Math.round(v[1])},${Math.round(v[2])}`;\n}\n\nfunction getFullSpatialAnnotationId(parameters: AnnotationSourceParameters, id: string) {\n  return `${parameters.volumeId}:${parameters.changestack}:${id}`;\n}\n\nfunction annotationToBrainmaps(annotation: Annotation): any {\n  const payload = annotation.description || '';\n  const objectLabels =\n      annotation.segments === undefined ? undefined : annotation.segments.map(x => x.toString());\n  switch (annotation.type) {\n    case AnnotationType.LINE:\n    case AnnotationType.AXIS_ALIGNED_BOUNDING_BOX: {\n      const {pointA, pointB} = annotation;\n      const minPoint = vec3.min(vec3.create(), pointA, pointB);\n      const maxPoint = vec3.max(vec3.create(), pointA, pointB);\n      const size = vec3.subtract(maxPoint, maxPoint, minPoint);\n      return {\n        type: annotation.type === AnnotationType.LINE ? 'LINE' : 'VOLUME',\n        corner: toCommaSeparated(minPoint),\n        size: toCommaSeparated(size),\n        object_labels: objectLabels,\n        payload,\n      };\n    }\n    case AnnotationType.POINT: {\n      return {\n        type: 'LOCATION',\n        corner: toCommaSeparated(annotation.point),\n        size: '0,0,0',\n        object_labels: objectLabels,\n        payload,\n      };\n    }\n    case AnnotationType.ELLIPSOID: {\n      const corner = vec3.subtract(vec3.create(), annotation.center, annotation.radii);\n      const size = vec3.scale(vec3.create(), annotation.radii, 2);\n      return {\n        type: 'LOCATION',\n        corner: toCommaSeparated(corner),\n        size: toCommaSeparated(size),\n        object_labels: objectLabels,\n        payload,\n      };\n    }\n  }\n}\n\n@registerSharedObject() export class BrainmapsAnnotationSource extends (BrainmapsSource(AnnotationSource, AnnotationSourceParameters)) {\n  downloadGeometry(chunk: AnnotationGeometryChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    return Promise\n        .all(spatialAnnotationTypes.map(\n            spatialAnnotationType => makeRequest(\n                parameters.instance, this.credentialsProvider, {\n                  method: 'POST',\n                  path: `/v1/changes/${parameters.volumeId}/${parameters.changestack}/spatials:get`,\n                  payload: JSON.stringify({\n                    type: spatialAnnotationType,\n                    ignore_payload: true,\n                  }),\n                  responseType: 'json',\n                },\n                cancellationToken)))\n        .then(values => {\n          parseAnnotations(chunk, values);\n        });\n  }\n\n  downloadSegmentFilteredGeometry(\n      chunk: AnnotationSubsetGeometryChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    return Promise\n        .all(spatialAnnotationTypes.map(\n            spatialAnnotationType => makeRequest(\n                parameters.instance, this.credentialsProvider, {\n                  method: 'POST',\n                  path: `/v1/changes/${parameters.volumeId}/${parameters.changestack}/spatials:get`,\n                  payload: JSON.stringify({\n                    type: spatialAnnotationType,\n                    object_labels: [chunk.objectId.toString()],\n                    ignore_payload: true,\n                  }),\n                  responseType: 'json',\n                },\n                cancellationToken)))\n        .then(values => {\n          parseAnnotations(chunk, values);\n        });\n  }\n\n  downloadMetadata(chunk: AnnotationMetadataChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    const id = chunk.key!;\n    return makeRequest(\n               parameters.instance, this.credentialsProvider, {\n                 method: 'POST',\n                 path: `/v1/changes/${parameters.volumeId}/${parameters.changestack}/spatials:get`,\n                 payload: JSON.stringify({\n                   type: getSpatialAnnotationTypeFromId(id),\n                   id: getFullSpatialAnnotationId(parameters, id)\n                 }),\n                 responseType: 'json',\n               },\n               cancellationToken)\n        .then(\n            response => {\n              chunk.annotation = parseAnnotationResponse(response, getIdPrefix(parameters), id);\n            },\n            () => {\n              chunk.annotation = null;\n            });\n  }\n\n  add(annotation: Annotation) {\n    const {parameters} = this;\n    const brainmapsAnnotation = annotationToBrainmaps(annotation);\n    return makeRequest(parameters.instance, this.credentialsProvider, {\n             method: 'POST',\n             path: `/v1/changes/${parameters.volumeId}/${parameters.changestack}/spatials:push`,\n             payload: JSON.stringify({annotations: [brainmapsAnnotation]}),\n             responseType: 'json',\n           })\n        .then(response => {\n          verifyObject(response);\n          const ids = verifyObjectProperty(response, 'ids', verifyStringArray);\n          if (ids.length !== 1) {\n            throw new Error(`Expected list of 1 id, but received ${JSON.stringify(ids)}.`);\n          }\n          const idPrefix = getIdPrefix(this.parameters);\n          return parseBrainmapsAnnotationId(idPrefix, ids[0]);\n        });\n  }\n\n  update(id: AnnotationId, annotation: Annotation) {\n    const {parameters} = this;\n    const brainmapsAnnotation = annotationToBrainmaps(annotation);\n    brainmapsAnnotation.id = getFullSpatialAnnotationId(parameters, id);\n    return makeRequest(parameters.instance, this.credentialsProvider, {\n      method: 'POST',\n      path: `/v1/changes/${parameters.volumeId}/${parameters.changestack}/spatials:push`,\n      payload: JSON.stringify({annotations: [brainmapsAnnotation]}),\n      responseType: 'json',\n    });\n  }\n\n  delete (id: AnnotationId) {\n    const {parameters} = this;\n    return makeRequest(parameters.instance, this.credentialsProvider, {\n      method: 'POST',\n      path: `/v1/changes/${parameters.volumeId}/${parameters.changestack}/spatials:delete`,\n      payload: JSON.stringify({\n        type: getSpatialAnnotationTypeFromId(id),\n        ids: [getFullSpatialAnnotationId(parameters, id)]\n      }),\n      responseType: 'json',\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum VolumeChunkEncoding {\n  JPEG,\n  RAW,\n  COMPRESSED_SEGMENTATION,\n  COMPRESSED_SEGMENTATIONARRAY\n}\n\nexport class DVIDSourceParameters {\n  baseUrl: string;\n  nodeKey: string;\n  dataInstanceKey: string;\n}\n\nexport class VolumeChunkSourceParameters extends DVIDSourceParameters {\n  dataScale: string;\n  encoding: VolumeChunkEncoding;\n  static RPC_ID = 'dvid/VolumeChunkSource';\n}\n\nexport class SkeletonSourceParameters extends DVIDSourceParameters {\n  static RPC_ID = 'dvid/SkeletonSource';\n}\n\nexport class MeshSourceParameters extends DVIDSourceParameters {\n  static RPC_ID = 'dvid/MeshSource';\n}\n","import {SkeletonChunk} from 'neuroglancer/skeleton/backend';\n\nexport function decodeSwcSkeletonChunk(chunk: SkeletonChunk, swcStr: string) {\n  let swcObjects: Array<PointObj> = parseSwc(swcStr);\n  if (swcObjects.length < 2) {\n    throw new Error(`ERROR parsing swc file`);\n  }\n\n  let glVertices = new Float32Array(3 * (swcObjects.length));\n  let glIndices = new Uint32Array(2 * (swcObjects.length - 1));\n\n  swcObjects.forEach(function(swc_obj, i) {\n    glVertices[3 * i] = swc_obj.z;\n    glVertices[3 * i + 1] = swc_obj.y;\n    glVertices[3 * i + 2] = swc_obj.x;\n\n    if (swc_obj.parent !== -1) {\n      glIndices[2 * (i - 1)] = i;\n      glIndices[2 * i - 1] = swc_obj.parent;\n    }\n  });\n\n  chunk.indices = glIndices;\n  chunk.vertexPositions = glVertices;\n}\n\n/*\n * Parses a standard SWC file into an array of point objects\n * modified from\n * https://github.com/JaneliaSciComp/SharkViewer/blob/d9969a7c513beee32ff9650b00bf79cda8f3c76a/html/js/sharkviewer_loader.js\n */\nfunction parseSwc(swcStr: string) {\n  // split by line\n  let swcInputAr = swcStr.split('\\n');\n  let swcObjectsAr: Array<PointObj> = new Array();\n  let float = '-?\\\\d*(?:\\\\.\\\\d+)?';\n  let pattern = new RegExp('^[ \\\\t]*(' + [\n    '\\\\d+',    // index\n    '\\\\d+',    // type\n    float,     // x\n    float,     // y\n    float,     // z\n    float,     // radius\n    '-1|\\\\d+'  // parent\n  ].join(')[ \\\\t]+(') + ')[ \\\\t]*$');\n\n  swcInputAr.forEach(function(e) {\n    // if line meets swc point criteria, add it to the array\n    // subtract 1 from indices to convert 1-indexing to 0-indexing\n    let match = e.match(pattern);\n    if (match) {\n      let point = swcObjectsAr[parseInt(match[1], 10) - 1] = new PointObj();\n      point.type = parseInt(match[2], 10);\n      point.x = parseFloat(match[3]);\n      point.y = parseFloat(match[4]);\n      point.z = parseFloat(match[5]);\n      point.radius = parseFloat(match[6]);\n      point.parent = parseInt(match[7], 10) - 1;\n    }\n  });\n  return swcObjectsAr;\n}\n\nclass PointObj {\n  type: number;\n  x: number;\n  y: number;\n  z: number;\n  radius: number;\n  parent: number;\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {WithParameters} from 'neuroglancer/chunk_manager/backend';\nimport {MeshSourceParameters, SkeletonSourceParameters, VolumeChunkEncoding, VolumeChunkSourceParameters} from 'neuroglancer/datasource/dvid/base';\nimport {assignMeshFragmentData, decodeTriangleVertexPositionsAndIndices, FragmentChunk, ManifestChunk, MeshSource} from 'neuroglancer/mesh/backend';\nimport {SkeletonChunk, SkeletonSource} from 'neuroglancer/skeleton/backend';\nimport {decodeSwcSkeletonChunk} from 'neuroglancer/skeleton/decode_swc_skeleton';\nimport {decodeCompressedSegmentationChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/compressed_segmentation';\nimport {decodeJpegChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/jpeg';\nimport {VolumeChunk, VolumeChunkSource} from 'neuroglancer/sliceview/volume/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {Endianness} from 'neuroglancer/util/endian';\nimport {cancellableFetchOk, responseArrayBuffer} from 'neuroglancer/util/http_request';\nimport {registerSharedObject} from 'neuroglancer/worker_rpc';\n\n@registerSharedObject() export class DVIDSkeletonSource extends\n(WithParameters(SkeletonSource, SkeletonSourceParameters)) {\n  download(chunk: SkeletonChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    let bodyid = `${chunk.objectId}`;\n    const url = `${parameters.baseUrl}/api/node/${parameters['nodeKey']}` +\n        `/${parameters['dataInstanceKey']}/key/` + bodyid + '_swc';\n    return cancellableFetchOk(url, {}, responseArrayBuffer, cancellationToken)\n        .then(response => {\n          let enc = new TextDecoder('utf-8');\n          decodeSwcSkeletonChunk(chunk, enc.decode(response));\n        });\n  }\n}\n\nexport function decodeFragmentChunk(chunk: FragmentChunk, response: ArrayBuffer) {\n  let dv = new DataView(response);\n  let numVertices = dv.getUint32(0, true);\n  assignMeshFragmentData(\n      chunk,\n      decodeTriangleVertexPositionsAndIndices(\n          response, Endianness.LITTLE, /*vertexByteOffset=*/ 4, numVertices));\n}\n\n@registerSharedObject() export class DVIDMeshSource extends\n(WithParameters(MeshSource, MeshSourceParameters)) {\n  download(chunk: ManifestChunk) {\n    // DVID does not currently store meshes chunked, the main\n    // use-case is for low-resolution 3D views.\n    // for now, fragmentId is the body id\n    chunk.fragmentIds = [`${chunk.objectId}`];\n    return Promise.resolve(undefined);\n  }\n\n  downloadFragment(chunk: FragmentChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    const url = `${parameters.baseUrl}/api/node/${parameters['nodeKey']}/${\n        parameters['dataInstanceKey']}/key/${chunk.fragmentId}.ngmesh`;\n    return cancellableFetchOk(url, {}, responseArrayBuffer, cancellationToken)\n        .then(response => decodeFragmentChunk(chunk, response));\n  }\n}\n\n@registerSharedObject() export class DVIDVolumeChunkSource extends\n(WithParameters(VolumeChunkSource, VolumeChunkSourceParameters)) {\n  async download(chunk: VolumeChunk, cancellationToken: CancellationToken) {\n    let params = this.parameters;\n    let path: string;\n    {\n      // chunkPosition must not be captured, since it will be invalidated by the next call to\n      // computeChunkBounds.\n      let chunkPosition = this.computeChunkBounds(chunk);\n      let chunkDataSize = chunk.chunkDataSize!;\n\n      // if the volume is an image, get a jpeg\n      path = this.getPath(chunkPosition, chunkDataSize);\n    }\n    const decoder = this.getDecoder(params);\n    const response = await cancellableFetchOk(\n        `${params.baseUrl}${path}`, {}, responseArrayBuffer, cancellationToken);\n    await decoder(\n        chunk, cancellationToken,\n        (params.encoding === VolumeChunkEncoding.JPEG) ? response.slice(16) : response);\n  }\n  getPath(chunkPosition: Float32Array, chunkDataSize: Float32Array) {\n    let params = this.parameters;\n    if (params.encoding === VolumeChunkEncoding.JPEG) {\n      return `/api/node/${params['nodeKey']}/${params['dataInstanceKey']}/subvolblocks/` +\n          `${chunkDataSize[0]}_${chunkDataSize[1]}_${chunkDataSize[2]}/` +\n          `${chunkPosition[0]}_${chunkPosition[1]}_${chunkPosition[2]}`;\n    } else if (params.encoding === VolumeChunkEncoding.RAW) {\n      return `/api/node/${params['nodeKey']}/${params['dataInstanceKey']}/raw/0_1_2/` +\n          `${chunkDataSize[0]}_${chunkDataSize[1]}_${chunkDataSize[2]}/` +\n          `${chunkPosition[0]}_${chunkPosition[1]}_${chunkPosition[2]}/jpeg`;\n    } else if (params.encoding === VolumeChunkEncoding.COMPRESSED_SEGMENTATIONARRAY) {\n      return `/api/node/${params['nodeKey']}/${params['dataInstanceKey']}/raw/0_1_2/` +\n          `${chunkDataSize[0]}_${chunkDataSize[1]}_${chunkDataSize[2]}/` +\n          `${chunkPosition[0]}_${chunkPosition[1]}_${\n                 chunkPosition[2]}?compression=googlegzip&scale=${params['dataScale']}`;\n    } else {\n      // encoding is COMPRESSED_SEGMENTATION\n      return `/api/node/${params['nodeKey']}/${params['dataInstanceKey']}/raw/0_1_2/` +\n          `${chunkDataSize[0]}_${chunkDataSize[1]}_${chunkDataSize[2]}/` +\n          `${chunkPosition[0]}_${chunkPosition[1]}_${chunkPosition[2]}?compression=googlegzip`;\n    }\n  }\n  getDecoder(params: any) {\n    if ((params.encoding === VolumeChunkEncoding.JPEG) ||\n        (params.encoding === VolumeChunkEncoding.RAW)) {\n      return decodeJpegChunk;\n    } else {\n      // encoding is COMPRESSED_SEGMENTATION\n      return decodeCompressedSegmentationChunk;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DataType, VolumeType} from 'neuroglancer/sliceview/volume/base';\nimport {mat4, quat, vec3} from 'neuroglancer/util/geom';\n\nexport const GET_NIFTI_VOLUME_INFO_RPC_ID = 'nifti/getNiftiVolumeInfo';\n\nexport interface NiftiVolumeInfo {\n  numChannels: number;\n  dataType: DataType;\n  volumeType: VolumeType;\n  voxelSize: vec3;\n  affine: mat4;\n  description: string;\n  volumeSize: vec3;\n  qoffset: vec3;\n  quatern: quat;\n  qfac: number;\n  qform_code: number;\n  sform_code: number;\n}\n\nexport enum NiftiDataType {\n  NONE = 0,\n  BINARY = 1,\n  UINT8 = 2,\n  INT16 = 4,\n  INT32 = 8,\n  FLOAT32 = 16,\n  COMPLEX64 = 32,\n  FLOAT64 = 64,\n  RGB24 = 128,\n  INT8 = 256,\n  UINT16 = 512,\n  UINT32 = 768,\n  INT64 = 1024,\n  UINT64 = 1280,\n  FLOAT128 = 1536,\n  COMPLEX128 = 1792,\n  COMPLEX256 = 2048,\n}\n\nexport class VolumeSourceParameters {\n  url: string;\n\n  static RPC_ID = 'nifti/VolumeChunkSource';\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {decodeGzip} from 'neuroglancer/async_computation/decode_gzip_request';\nimport {requestAsyncComputation} from 'neuroglancer/async_computation/request';\nimport {ChunkManager, WithParameters} from 'neuroglancer/chunk_manager/backend';\nimport {ChunkPriorityTier} from 'neuroglancer/chunk_manager/base';\nimport {GenericSharedDataSource, PriorityGetter} from 'neuroglancer/chunk_manager/generic_file_source';\nimport {GET_NIFTI_VOLUME_INFO_RPC_ID, NiftiDataType, NiftiVolumeInfo, VolumeSourceParameters} from 'neuroglancer/datasource/nifti/base';\nimport {decodeRawChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/raw';\nimport {VolumeChunk, VolumeChunkSource} from 'neuroglancer/sliceview/volume/backend';\nimport {DataType, VolumeType} from 'neuroglancer/sliceview/volume/base';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {Borrowed} from 'neuroglancer/util/disposable';\nimport {Endianness} from 'neuroglancer/util/endian';\nimport {mat4, quat, vec3} from 'neuroglancer/util/geom';\nimport {registerPromiseRPC, registerSharedObject, RPCPromise} from 'neuroglancer/worker_rpc';\nimport {isCompressed, NIFTI1, NIFTI2, readHeader, readImage} from 'nifti-reader-js';\n\nexport class NiftiFileData {\n  uncompressedData: ArrayBuffer;\n  header: NIFTI1|NIFTI2;\n}\n\nasync function decodeNiftiFile(buffer: ArrayBuffer, cancellationToken: CancellationToken) {\n  if (isCompressed(buffer)) {\n    buffer = (await requestAsyncComputation(\n                  decodeGzip, cancellationToken, [buffer], new Uint8Array(buffer)))\n                 .buffer;\n  }\n  let data = new NiftiFileData();\n  data.uncompressedData = buffer;\n  let header = readHeader(buffer);\n  if (header === null) {\n    throw new Error('Failed to parse NIFTI header.');\n  }\n  data.header = header;\n  return {data, size: buffer.byteLength};\n}\n\nfunction getNiftiFileData(\n    chunkManager: Borrowed<ChunkManager>, url: string, getPriority: PriorityGetter,\n    cancellationToken: CancellationToken) {\n  return GenericSharedDataSource.getUrl(\n      chunkManager, decodeNiftiFile, url, getPriority, cancellationToken);\n}\n\nconst NIFTI_HEADER_INFO_PRIORITY = 1000;\n\nfunction getNiftiHeaderInfo(\n    chunkManager: Borrowed<ChunkManager>, url: string, cancellationToken: CancellationToken) {\n  return getNiftiFileData(\n             chunkManager, url,\n             () =>\n                 ({priorityTier: ChunkPriorityTier.VISIBLE, priority: NIFTI_HEADER_INFO_PRIORITY}),\n             cancellationToken)\n      .then(data => data.header);\n}\n\nfunction convertAffine(affine: number[][]) {\n  return mat4.fromValues(\n      affine[0][0], affine[1][0], affine[2][0], affine[3][0], affine[0][1], affine[1][1],\n      affine[2][1], affine[3][1], affine[0][2], affine[1][2], affine[2][2], affine[3][2],\n      affine[0][3], affine[1][3], affine[2][3], affine[3][3]);\n}\n\nconst DATA_TYPE_CONVERSIONS = new Map([\n  [NiftiDataType.INT8, {dataType: DataType.UINT8, volumeType: VolumeType.IMAGE}],\n  [NiftiDataType.UINT8, {dataType: DataType.UINT8, volumeType: VolumeType.IMAGE}],\n  [NiftiDataType.INT16, {dataType: DataType.UINT16, volumeType: VolumeType.IMAGE}],\n  [NiftiDataType.UINT16, {dataType: DataType.UINT16, volumeType: VolumeType.IMAGE}],\n  [NiftiDataType.INT32, {dataType: DataType.UINT32, volumeType: VolumeType.SEGMENTATION}],\n  [NiftiDataType.UINT32, {dataType: DataType.UINT32, volumeType: VolumeType.SEGMENTATION}],\n  [NiftiDataType.INT64, {dataType: DataType.UINT64, volumeType: VolumeType.SEGMENTATION}],\n  [NiftiDataType.UINT64, {dataType: DataType.UINT64, volumeType: VolumeType.SEGMENTATION}],\n  [NiftiDataType.FLOAT32, {dataType: DataType.FLOAT32, volumeType: VolumeType.IMAGE}],\n]);\n\nregisterPromiseRPC(\n    GET_NIFTI_VOLUME_INFO_RPC_ID, function(x, cancellationToken): RPCPromise<NiftiVolumeInfo> {\n      const chunkManager = this.getRef<ChunkManager>(x['chunkManager']);\n      const headerPromise = getNiftiHeaderInfo(chunkManager, x['url'], cancellationToken);\n      chunkManager.dispose();\n      return headerPromise.then(header => {\n        let dataTypeInfo = DATA_TYPE_CONVERSIONS.get(header.datatypeCode);\n        if (dataTypeInfo === undefined) {\n          throw new Error(\n              `Unsupported data type: ` +\n              `${NiftiDataType[header.datatypeCode] || header.datatypeCode}.`);\n        }\n        if (header.dims[4] !== 1) {\n          throw new Error(`Time series data not supported.`);\n        }\n        const spatialUnits = header.xyzt_units & NIFTI1.SPATIAL_UNITS_MASK;\n        let unitsPerNm = 1;\n        switch (spatialUnits) {\n          case NIFTI1.UNITS_METER:\n            unitsPerNm = 1e9;\n            break;\n          case NIFTI1.UNITS_MM:\n            unitsPerNm = 1e6;\n            break;\n          case NIFTI1.UNITS_MICRON:\n            unitsPerNm = 1e3;\n            break;\n        }\n        const {quatern_b, quatern_c, quatern_d} = header;\n        const quatern_a =\n            Math.sqrt(1.0 - quatern_b * quatern_b - quatern_c * quatern_c - quatern_d * quatern_d);\n        const qfac = header.pixDims[0] === -1 ? -1 : 1;\n        let info: NiftiVolumeInfo = {\n          description: header.description,\n          affine: convertAffine(header.affine),\n          dataType: dataTypeInfo.dataType,\n          numChannels: header.dims[5],\n          volumeType: dataTypeInfo.volumeType,\n          voxelSize: vec3.fromValues(\n              unitsPerNm * header.pixDims[1], unitsPerNm * header.pixDims[2],\n              unitsPerNm * header.pixDims[3]),\n          volumeSize: vec3.fromValues(header.dims[1], header.dims[2], header.dims[3]),\n          qoffset: vec3.fromValues(\n              unitsPerNm * header.qoffset_x, unitsPerNm * header.qoffset_y,\n              unitsPerNm * header.qoffset_z),\n          qform_code: header.qform_code,\n          sform_code: header.sform_code,\n          qfac: qfac,\n          quatern: quat.fromValues(quatern_b, quatern_c, quatern_d, quatern_a),\n        };\n        return {value: info};\n      });\n    });\n\n@registerSharedObject() export class NiftiVolumeChunkSource extends\n(WithParameters(VolumeChunkSource, VolumeSourceParameters)) {\n  async download(chunk: VolumeChunk, cancellationToken: CancellationToken) {\n    chunk.chunkDataSize = this.spec.chunkDataSize;\n    const data = await getNiftiFileData(\n        this.chunkManager, this.parameters.url,\n        () => ({priorityTier: chunk.priorityTier, priority: chunk.priority}), cancellationToken);\n    const imageBuffer = readImage(data.header, data.uncompressedData);\n    await decodeRawChunk(\n        chunk, cancellationToken, imageBuffer,\n        data.header.littleEndian ? Endianness.LITTLE : Endianness.BIG);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum VolumeChunkEncoding {\n  RAW,\n  GZIP,\n}\n\nexport class VolumeChunkSourceParameters {\n  url: string;\n  encoding: VolumeChunkEncoding;\n\n  static RPC_ID = 'n5/VolumeChunkSource';\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {decodeGzip} from 'neuroglancer/async_computation/decode_gzip_request';\nimport {requestAsyncComputation} from 'neuroglancer/async_computation/request';\nimport {WithParameters} from 'neuroglancer/chunk_manager/backend';\nimport {VolumeChunkEncoding, VolumeChunkSourceParameters} from 'neuroglancer/datasource/n5/base';\nimport {decodeRawChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/raw';\nimport {VolumeChunk, VolumeChunkSource} from 'neuroglancer/sliceview/volume/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {Endianness} from 'neuroglancer/util/endian';\nimport {vec3} from 'neuroglancer/util/geom';\nimport {cancellableFetchOk, responseArrayBuffer} from 'neuroglancer/util/http_request';\nimport {registerSharedObject} from 'neuroglancer/worker_rpc';\n\nasync function decodeChunk(\n    chunk: VolumeChunk, cancellationToken: CancellationToken, response: ArrayBuffer,\n    encoding: VolumeChunkEncoding) {\n  const dv = new DataView(response);\n  const mode = dv.getUint16(0, /*littleEndian=*/ false);\n  if (mode !== 0) {\n    throw new Error(`Unsupported mode: ${mode}.`);\n  }\n  const numDimensions = dv.getUint16(2, /*littleEndian=*/ false);\n  if (numDimensions !== 3) {\n    throw new Error(`Number of dimensions must be 3.`);\n  }\n  let offset = 4;\n  const shape = new Uint32Array(numDimensions);\n  for (let i = 0; i < numDimensions; ++i) {\n    shape[i] = dv.getUint32(offset, /*littleEndian=*/ false);\n    offset += 4;\n  }\n  chunk.chunkDataSize = vec3.fromValues(shape[0], shape[1], shape[2]);\n  let buffer = new Uint8Array(response, offset);\n  if (encoding === VolumeChunkEncoding.GZIP) {\n    buffer = await requestAsyncComputation(decodeGzip, cancellationToken, [buffer.buffer], buffer);\n  }\n  await decodeRawChunk(\n      chunk, cancellationToken, buffer.buffer, Endianness.BIG, buffer.byteOffset,\n      buffer.byteLength);\n}\n\n\n@registerSharedObject() export class PrecomputedVolumeChunkSource extends\n(WithParameters(VolumeChunkSource, VolumeChunkSourceParameters)) {\n  async download(chunk: VolumeChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    const {chunkGridPosition} = chunk;\n    const url =\n        `${parameters.url}/${chunkGridPosition[0]}/${chunkGridPosition[1]}/${chunkGridPosition[2]}`;\n    const response = await cancellableFetchOk(url, {}, responseArrayBuffer, cancellationToken);\n    await decodeChunk(chunk, cancellationToken, response, parameters.encoding);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {copyBufferOverlap, VolumeComputationBackend} from 'neuroglancer/datasource/computed/backend';\nimport {getArrayView} from 'neuroglancer/datasource/computed/base';\nimport {EXAMPLE_COMPUTATION_RPC_ID, ExampleComputationParameters} from 'neuroglancer/datasource/computed/example/base';\nimport {DataType} from 'neuroglancer/util/data_type';\nimport {vec3} from 'neuroglancer/util/geom';\nimport {registerSharedObject} from 'neuroglancer/worker_rpc';\n\n@registerSharedObject(EXAMPLE_COMPUTATION_RPC_ID)\nexport class ExampleComputation extends VolumeComputationBackend {\n  params: ExampleComputationParameters;\n\n  compute(inputBuffer: ArrayBuffer) {\n    const {inputSpec, outputSpec} = this.params;\n    const inputBufferView = getArrayView(inputBuffer, inputSpec.dataType);\n    const outputBuffer = this.createOutputBuffer();\n    const outputBufferView = getArrayView(outputBuffer, outputSpec.dataType);\n\n    // const offset = vec3.floor(vec3.create(), vec3.divide(vec3.create(),\n    // vec3.subtract(vec3.create(), inputSpec.size, outputSpec.size), [2, 2, 2]));\n    const zeros = vec3.create();\n    zeros.set([0, 0, 0]);\n\n    copyBufferOverlap(\n        zeros, inputSpec.size, inputBufferView, zeros, outputSpec.size, outputBufferView,\n        outputSpec.dataType);\n\n    if (inputSpec.dataType === DataType.UINT8) {\n      for (let i = 0; i < outputBufferView.length; ++i) {\n        outputBufferView[i] = 255 - outputBufferView[i];\n      }\n    }\n\n    return Promise.resolve(outputBuffer);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {ComputationParameters} from 'neuroglancer/datasource/computed/base';\n\nexport const EXAMPLE_COMPUTATION_RPC_ID = 'Computation.ExampleComputation';\n\nexport class ExampleComputationParameters extends ComputationParameters {}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ComputedVolumeChunk, VolumeComputationBackend} from 'neuroglancer/datasource/computed/backend';\nimport {getArrayView} from 'neuroglancer/datasource/computed/base';\nimport {InferenceRequest, InferenceResult, TENSORFLOW_COMPUTATION_RPC_ID, TENSORFLOW_INFERENCE_RPC_ID, TensorflowArray, TensorflowComputationParameters} from 'neuroglancer/datasource/computed/tensorflow/base';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {registerSharedObject} from 'neuroglancer/worker_rpc';\n\n@registerSharedObject(TENSORFLOW_COMPUTATION_RPC_ID)\nexport class TensorflowComputation extends VolumeComputationBackend {\n  params: TensorflowComputationParameters;\n\n  /**\n   * Converts an input data buffer into a TF.js-compatible normalized typed\n   * array.\n   * @param buffer the input data buffer\n   * @param dtype TF.js-centric dtype string\n   */\n  convertInputBuffer_(buffer: ArrayBuffer, dtype: string): TensorflowArray {\n    const inputArray = getArrayView(buffer, this.params.inputSpec.dataType);\n    let outputArray;\n    switch (dtype) {\n      case 'float32':\n        outputArray = new Float32Array(inputArray.length);\n        break;\n      case 'int32':\n        outputArray = new Int32Array(inputArray.length);\n        break;\n      default:\n        throw new Error(`Unsupported dtype: ${dtype}`);\n    }\n\n    for (let i = 0; i < inputArray.length; ++i) {\n      outputArray[i] = (inputArray[i] - this.params.mean!) / this.params.stdDev!;\n    }\n\n    return outputArray;\n  }\n\n  /**\n   * Copies a TF.js typed array prediction output into a type-correct data\n   * buffer, to be used as computational output in a ComputedVolumeChunk.\n   * @param inputArray TF.js prediction output\n   */\n  convertOutputBuffer_(inputArray: TensorflowArray) {\n    const buffer = this.createOutputBuffer();\n    const outputArray = getArrayView(buffer, this.params.outputSpec.dataType);\n    outputArray.set(inputArray);\n    return buffer;\n  }\n\n  compute(\n      inputBuffer: ArrayBuffer, cancellationToken: CancellationToken, chunk: ComputedVolumeChunk) {\n    this.addRef();\n    const inferenceRequest: InferenceRequest = {\n      inputBuffer: this.convertInputBuffer_(inputBuffer, this.params.inputDType!),\n      computationRef: this.rpcId,\n      priority: chunk.priority\n    };\n\n    return this.rpc!\n        .promiseInvoke<InferenceResult>(\n            TENSORFLOW_INFERENCE_RPC_ID, {inferenceRequest}, cancellationToken)\n        .then((result) => {\n          this.dispose();\n          return this.convertOutputBuffer_(result.outputBuffer);\n        })\n        .catch((e) => {\n          this.dispose();\n          throw e;\n        });\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {ComputationParameters} from 'neuroglancer/datasource/computed/base';\n\nexport const TENSORFLOW_COMPUTATION_RPC_ID = 'Computation.Tensorflow';\nexport const TENSORFLOW_INFERENCE_RPC_ID = 'Computation.Tensorflow.Inference';\n\nexport class TensorflowComputationParameters extends ComputationParameters {\n  inputDType?: string;\n  mean?: number;\n  stdDev?: number;\n  inputTensorShape?: number[];\n  inputTensorNumElements?: number;\n}\n\nexport type TensorflowArray = Int32Array|Float32Array;\n\nexport interface InferenceRequest {\n  inputBuffer: TensorflowArray;\n  computationRef: any;\n  priority: number;\n}\n\nexport interface InferenceResult {\n  outputBuffer: TensorflowArray;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {asyncComputation} from 'neuroglancer/async_computation';\nimport {TriangularMesh} from 'neuroglancer/datasource/vtk/parse';\n\nexport const parseVTKFromArrayBuffer = asyncComputation<(buffer: ArrayBuffer) => {\n  data: TriangularMesh, size: number\n}>('parseVTKFromArrayBuffer');\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {requestAsyncComputation} from 'neuroglancer/async_computation/request';\nimport {parseVTKFromArrayBuffer} from 'neuroglancer/async_computation/vtk_mesh_request';\nimport {GenericSharedDataSource} from 'neuroglancer/chunk_manager/generic_file_source';\nimport {registerSingleMeshFactory, SingleMesh} from 'neuroglancer/single_mesh/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {DataType} from 'neuroglancer/util/data_type';\n\n/**\n * This needs to be a global function, because it identifies the instance of GenericSharedDataSource\n * to use.\n */\nfunction parse(buffer: ArrayBuffer, cancellationToken: CancellationToken) {\n  return requestAsyncComputation(parseVTKFromArrayBuffer, cancellationToken, [buffer], buffer);\n}\n\nregisterSingleMeshFactory('vtk', {\n  description: 'VTK',\n  getMesh: (chunkManager, url, getPriority, cancellationToken) =>\n      GenericSharedDataSource.getUrl(chunkManager, parse, url, getPriority, cancellationToken)\n          .then(mesh => {\n            let result: SingleMesh = {\n              info: {\n                numTriangles: mesh.numTriangles,\n                numVertices: mesh.numVertices,\n                vertexAttributes: [],\n              },\n              indices: mesh.indices,\n              vertexPositions: mesh.vertexPositions,\n              vertexAttributes: [],\n            };\n            for (const attribute of mesh.vertexAttributes) {\n              result.info.vertexAttributes.push({\n                name: attribute.name,\n                dataType: DataType.FLOAT32,\n                numComponents: attribute.numComponents,\n              });\n              result.vertexAttributes.push(attribute.data);\n            }\n            return result;\n          })\n});\n","/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {asyncComputation} from 'neuroglancer/async_computation';\nimport {SingleMeshVertexAttributes} from 'neuroglancer/single_mesh/backend';\n\nexport const parseCSVFromArrayBuffer = asyncComputation<(buffer: ArrayBuffer) => {\n  data: SingleMeshVertexAttributes, size: number\n}>('parseCSVFromArrayBuffer');\n","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {parseCSVFromArrayBuffer} from 'neuroglancer/async_computation/csv_vertex_attributes_request';\nimport {requestAsyncComputation} from 'neuroglancer/async_computation/request';\nimport {GenericSharedDataSource} from 'neuroglancer/chunk_manager/generic_file_source';\nimport {registerSingleMeshVertexAttributesFactory} from 'neuroglancer/single_mesh/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\n\n/**\n * This needs to be a global function, because it identifies the instance of GenericSharedDataSource\n * to use.\n */\nfunction parse(buffer: ArrayBuffer, cancellationToken: CancellationToken) {\n  return requestAsyncComputation(parseCSVFromArrayBuffer, cancellationToken, [buffer], buffer);\n}\n\nregisterSingleMeshVertexAttributesFactory('csv', {\n  description: 'Comma separated value text file',\n  getMeshVertexAttributes: (chunkManager, url, getPriority, cancellationToken) =>\n      GenericSharedDataSource.getUrl(chunkManager, parse, url, getPriority, cancellationToken)\n});\n"],"sourceRoot":""}